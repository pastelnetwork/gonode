// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raptorq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaptorQClient is the client API for RaptorQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaptorQClient interface {
	// Get list of symbol ids and encoder parameter
	//
	// Performs encoding, but doesn't return actual symbols, instead returns list of symbol's identifiers
	//
	// Input:
	//      EncodeMetaDataRequest
	//          path            - location of the input file
	//          files_number    - how many ID files to create, can be 0
	//          block_hash      - block_hash of the Registration ticket
	//          pastel_id       - PastelID used to sign the Registration ticket
	//
	// Output:
	//      EncodeMetaDataReply
	//          encoder_parameters  - Object Transmission Information (12 bytes array)
	//          path                - path to the location of ID files
	//          symbols_count       - number of symbols
	//
	EncodeMetaData(ctx context.Context, in *EncodeMetaDataRequest, opts ...grpc.CallOption) (*EncodeMetaDataReply, error)
	// Encode input data blob into symbols
	//
	// Performs encoding, and returns actual symbols as gRPC stream
	//
	// Input:
	//      EncodeRequest
	//          path            - location of the input file
	//
	// Output:
	//      EncodeReply
	//          path            - location of the output symbol files
	//          symbols_count   - number of created symbol files
	//
	Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeReply, error)
	// Decode symbols back into original data blob
	//
	// Performs decoding, and returns original data blob
	//
	// Input:
	//      DecodeRequest
	//          encoder_parameters  - Object Transmission Information (12 bytes array)
	//          path                - location of the input file
	//
	// Output:
	//      Data blob
	//
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeReply, error)
}

type raptorQClient struct {
	cc grpc.ClientConnInterface
}

func NewRaptorQClient(cc grpc.ClientConnInterface) RaptorQClient {
	return &raptorQClient{cc}
}

func (c *raptorQClient) EncodeMetaData(ctx context.Context, in *EncodeMetaDataRequest, opts ...grpc.CallOption) (*EncodeMetaDataReply, error) {
	out := new(EncodeMetaDataReply)
	err := c.cc.Invoke(ctx, "/raptorq.RaptorQ/EncodeMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raptorQClient) Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeReply, error) {
	out := new(EncodeReply)
	err := c.cc.Invoke(ctx, "/raptorq.RaptorQ/Encode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raptorQClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeReply, error) {
	out := new(DecodeReply)
	err := c.cc.Invoke(ctx, "/raptorq.RaptorQ/Decode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaptorQServer is the server API for RaptorQ service.
// All implementations must embed UnimplementedRaptorQServer
// for forward compatibility
type RaptorQServer interface {
	// Get list of symbol ids and encoder parameter
	//
	// Performs encoding, but doesn't return actual symbols, instead returns list of symbol's identifiers
	//
	// Input:
	//      EncodeMetaDataRequest
	//          path            - location of the input file
	//          files_number    - how many ID files to create, can be 0
	//          block_hash      - block_hash of the Registration ticket
	//          pastel_id       - PastelID used to sign the Registration ticket
	//
	// Output:
	//      EncodeMetaDataReply
	//          encoder_parameters  - Object Transmission Information (12 bytes array)
	//          path                - path to the location of ID files
	//          symbols_count       - number of symbols
	//
	EncodeMetaData(context.Context, *EncodeMetaDataRequest) (*EncodeMetaDataReply, error)
	// Encode input data blob into symbols
	//
	// Performs encoding, and returns actual symbols as gRPC stream
	//
	// Input:
	//      EncodeRequest
	//          path            - location of the input file
	//
	// Output:
	//      EncodeReply
	//          path            - location of the output symbol files
	//          symbols_count   - number of created symbol files
	//
	Encode(context.Context, *EncodeRequest) (*EncodeReply, error)
	// Decode symbols back into original data blob
	//
	// Performs decoding, and returns original data blob
	//
	// Input:
	//      DecodeRequest
	//          encoder_parameters  - Object Transmission Information (12 bytes array)
	//          path                - location of the input file
	//
	// Output:
	//      Data blob
	//
	Decode(context.Context, *DecodeRequest) (*DecodeReply, error)
	mustEmbedUnimplementedRaptorQServer()
}

// UnimplementedRaptorQServer must be embedded to have forward compatible implementations.
type UnimplementedRaptorQServer struct {
}

func (UnimplementedRaptorQServer) EncodeMetaData(context.Context, *EncodeMetaDataRequest) (*EncodeMetaDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeMetaData not implemented")
}
func (UnimplementedRaptorQServer) Encode(context.Context, *EncodeRequest) (*EncodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedRaptorQServer) Decode(context.Context, *DecodeRequest) (*DecodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedRaptorQServer) mustEmbedUnimplementedRaptorQServer() {}

// UnsafeRaptorQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaptorQServer will
// result in compilation errors.
type UnsafeRaptorQServer interface {
	mustEmbedUnimplementedRaptorQServer()
}

func RegisterRaptorQServer(s grpc.ServiceRegistrar, srv RaptorQServer) {
	s.RegisterService(&RaptorQ_ServiceDesc, srv)
}

func _RaptorQ_EncodeMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaptorQServer).EncodeMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raptorq.RaptorQ/EncodeMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaptorQServer).EncodeMetaData(ctx, req.(*EncodeMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaptorQ_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaptorQServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raptorq.RaptorQ/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaptorQServer).Encode(ctx, req.(*EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaptorQ_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaptorQServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raptorq.RaptorQ/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaptorQServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaptorQ_ServiceDesc is the grpc.ServiceDesc for RaptorQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaptorQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raptorq.RaptorQ",
	HandlerType: (*RaptorQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeMetaData",
			Handler:    _RaptorQ_EncodeMetaData_Handler,
		},
		{
			MethodName: "Encode",
			Handler:    _RaptorQ_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _RaptorQ_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raptorq.proto",
}
