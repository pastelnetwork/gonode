// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raptorq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaptorQClient is the client API for RaptorQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaptorQClient interface {
	// Get list of symbol ids and encoder parameter
	//
	// Performs encoding, but doesn't return actual symbols, instead returns list of symbol's identifiers
	//
	// Input: data blob
	// Output:
	//      Symbols
	EncoderInfo(ctx context.Context, in *UploadDataRequest, opts ...grpc.CallOption) (*EncoderInfoReply, error)
	// Encode input data blob into symbols
	//
	// Performs encoding, and returns actual symbols as gRPC stream
	//
	// Input:
	//      Data blob
	//
	// Output:
	//      List of symbol ids, where id = SHA3-256(symbol)
	Encode(ctx context.Context, in *UploadDataRequest, opts ...grpc.CallOption) (RaptorQ_EncodeClient, error)
	// Decode symbols back into original data blob
	//
	// Performs decoding, and returns original data blob
	//
	// Input:
	//      Encoder parameters and/or symbols one by one over gRPC stream
	//
	// Output:
	//      Data blob
	Decode(ctx context.Context, opts ...grpc.CallOption) (RaptorQ_DecodeClient, error)
}

type raptorQClient struct {
	cc grpc.ClientConnInterface
}

func NewRaptorQClient(cc grpc.ClientConnInterface) RaptorQClient {
	return &raptorQClient{cc}
}

func (c *raptorQClient) EncoderInfo(ctx context.Context, in *UploadDataRequest, opts ...grpc.CallOption) (*EncoderInfoReply, error) {
	out := new(EncoderInfoReply)
	err := c.cc.Invoke(ctx, "/raptorq.RaptorQ/EncoderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raptorQClient) Encode(ctx context.Context, in *UploadDataRequest, opts ...grpc.CallOption) (RaptorQ_EncodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaptorQ_ServiceDesc.Streams[0], "/raptorq.RaptorQ/Encode", opts...)
	if err != nil {
		return nil, err
	}
	x := &raptorQEncodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RaptorQ_EncodeClient interface {
	Recv() (*SymbolReply, error)
	grpc.ClientStream
}

type raptorQEncodeClient struct {
	grpc.ClientStream
}

func (x *raptorQEncodeClient) Recv() (*SymbolReply, error) {
	m := new(SymbolReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raptorQClient) Decode(ctx context.Context, opts ...grpc.CallOption) (RaptorQ_DecodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaptorQ_ServiceDesc.Streams[1], "/raptorq.RaptorQ/Decode", opts...)
	if err != nil {
		return nil, err
	}
	x := &raptorQDecodeClient{stream}
	return x, nil
}

type RaptorQ_DecodeClient interface {
	Send(*UploadSymbolsRequest) error
	CloseAndRecv() (*DownloadDataReply, error)
	grpc.ClientStream
}

type raptorQDecodeClient struct {
	grpc.ClientStream
}

func (x *raptorQDecodeClient) Send(m *UploadSymbolsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raptorQDecodeClient) CloseAndRecv() (*DownloadDataReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DownloadDataReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaptorQServer is the server API for RaptorQ service.
// All implementations must embed UnimplementedRaptorQServer
// for forward compatibility
type RaptorQServer interface {
	// Get list of symbol ids and encoder parameter
	//
	// Performs encoding, but doesn't return actual symbols, instead returns list of symbol's identifiers
	//
	// Input: data blob
	// Output:
	//      Symbols
	EncoderInfo(context.Context, *UploadDataRequest) (*EncoderInfoReply, error)
	// Encode input data blob into symbols
	//
	// Performs encoding, and returns actual symbols as gRPC stream
	//
	// Input:
	//      Data blob
	//
	// Output:
	//      List of symbol ids, where id = SHA3-256(symbol)
	Encode(*UploadDataRequest, RaptorQ_EncodeServer) error
	// Decode symbols back into original data blob
	//
	// Performs decoding, and returns original data blob
	//
	// Input:
	//      Encoder parameters and/or symbols one by one over gRPC stream
	//
	// Output:
	//      Data blob
	Decode(RaptorQ_DecodeServer) error
	mustEmbedUnimplementedRaptorQServer()
}

// UnimplementedRaptorQServer must be embedded to have forward compatible implementations.
type UnimplementedRaptorQServer struct {
}

func (UnimplementedRaptorQServer) EncoderInfo(context.Context, *UploadDataRequest) (*EncoderInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncoderInfo not implemented")
}
func (UnimplementedRaptorQServer) Encode(*UploadDataRequest, RaptorQ_EncodeServer) error {
	return status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedRaptorQServer) Decode(RaptorQ_DecodeServer) error {
	return status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedRaptorQServer) mustEmbedUnimplementedRaptorQServer() {}

// UnsafeRaptorQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaptorQServer will
// result in compilation errors.
type UnsafeRaptorQServer interface {
	mustEmbedUnimplementedRaptorQServer()
}

func RegisterRaptorQServer(s grpc.ServiceRegistrar, srv RaptorQServer) {
	s.RegisterService(&RaptorQ_ServiceDesc, srv)
}

func _RaptorQ_EncoderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaptorQServer).EncoderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raptorq.RaptorQ/EncoderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaptorQServer).EncoderInfo(ctx, req.(*UploadDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaptorQ_Encode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UploadDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaptorQServer).Encode(m, &raptorQEncodeServer{stream})
}

type RaptorQ_EncodeServer interface {
	Send(*SymbolReply) error
	grpc.ServerStream
}

type raptorQEncodeServer struct {
	grpc.ServerStream
}

func (x *raptorQEncodeServer) Send(m *SymbolReply) error {
	return x.ServerStream.SendMsg(m)
}

func _RaptorQ_Decode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaptorQServer).Decode(&raptorQDecodeServer{stream})
}

type RaptorQ_DecodeServer interface {
	SendAndClose(*DownloadDataReply) error
	Recv() (*UploadSymbolsRequest, error)
	grpc.ServerStream
}

type raptorQDecodeServer struct {
	grpc.ServerStream
}

func (x *raptorQDecodeServer) SendAndClose(m *DownloadDataReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raptorQDecodeServer) Recv() (*UploadSymbolsRequest, error) {
	m := new(UploadSymbolsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaptorQ_ServiceDesc is the grpc.ServiceDesc for RaptorQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaptorQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raptorq.RaptorQ",
	HandlerType: (*RaptorQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncoderInfo",
			Handler:    _RaptorQ_EncoderInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Encode",
			Handler:       _RaptorQ_Encode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Decode",
			Handler:       _RaptorQ_Decode_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "raptorq.proto",
}
