//go:generate mockery --name=Client
//go:generate mockery --name=Connection
//go:generate mockery --name=RaptorQ

package node

import (
	"context"
)

// Config contains path to where symbolid files are generated by raptorq service
type Config struct {
	RqFilesDir string
}

// RawSymbolIDFile represents raw content of symbolid files generated by raptorq service
type RawSymbolIDFile struct {
	ID                string
	BlockHash         string
	PastelID          string
	SymbolIdentifiers []string
}

// EncoderParameters represents the encoding params used by raptorq service
type EncoderParameters struct {
	Oti []byte
}

// EncodeInfo represents the response returns by EncodeInfo method
type EncodeInfo struct {
	SymbolIDFiles map[string]RawSymbolIDFile
	EncoderParam  EncoderParameters
}

// Encode represents the response returns by Encode method
type Encode struct {
	Symbols      map[string][]byte
	EncoderParam EncoderParameters
}

// Decode represents the response returns by Decode method
type Decode struct {
	File []byte
}

// Client represents a base connection interface.
type Client interface {
	// Connect connects to the server at the given address.
	Connect(ctx context.Context, address string) (Connection, error)
}

// Connection represents a client connection
type Connection interface {
	// Close closes connection.
	Close() error
	// Done returns a channel that's closed when connection is shutdown.
	Done() <-chan struct{}
	// RaptorQ returns a new RaptorQ stream.
	RaptorQ(config *Config) RaptorQ
}

// RaptorQ contains methods for request services from RaptorQ service.
type RaptorQ interface {
	// Get map of symbols
	Encode(ctx context.Context, data []byte) (*Encode, error)

	// Get encode info(include encode parameters + symbol id files)
	EncodeInfo(ctx context.Context, data []byte, copies uint32, blockHash string, pastelID string) (*EncodeInfo, error)

	// Decode returns a path to restored file.
	Decode(ctx context.Context, encodeInfo *Encode) (*Decode, error)
}
