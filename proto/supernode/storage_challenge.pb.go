// Copyright (c) 2021-2021 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: storage_challenge.proto

package supernode

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageChallengeMessageMessageType int32

const (
	StorageChallengeMessage_MessageType_UNKNOWN                               StorageChallengeMessageMessageType = 0
	StorageChallengeMessage_MessageType_STORAGE_CHALLENGE_CHALLENGE_MESSAGE   StorageChallengeMessageMessageType = 1
	StorageChallengeMessage_MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE    StorageChallengeMessageMessageType = 2
	StorageChallengeMessage_MessageType_STORAGE_CHALLENGE_EVALUATION_MESSAGE  StorageChallengeMessageMessageType = 3
	StorageChallengeMessage_MessageType_STORAGE_CHALLENGE_AFFIRMATION_MESSAGE StorageChallengeMessageMessageType = 4
	StorageChallengeMessage_MessageType_STORAGE_CHALLENGE_BROADCAST_MESSAGE   StorageChallengeMessageMessageType = 5
)

// Enum value maps for StorageChallengeMessageMessageType.
var (
	StorageChallengeMessageMessageType_name = map[int32]string{
		0: "MessageType_UNKNOWN",
		1: "MessageType_STORAGE_CHALLENGE_CHALLENGE_MESSAGE",
		2: "MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE",
		3: "MessageType_STORAGE_CHALLENGE_EVALUATION_MESSAGE",
		4: "MessageType_STORAGE_CHALLENGE_AFFIRMATION_MESSAGE",
		5: "MessageType_STORAGE_CHALLENGE_BROADCAST_MESSAGE",
	}
	StorageChallengeMessageMessageType_value = map[string]int32{
		"MessageType_UNKNOWN":                               0,
		"MessageType_STORAGE_CHALLENGE_CHALLENGE_MESSAGE":   1,
		"MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE":    2,
		"MessageType_STORAGE_CHALLENGE_EVALUATION_MESSAGE":  3,
		"MessageType_STORAGE_CHALLENGE_AFFIRMATION_MESSAGE": 4,
		"MessageType_STORAGE_CHALLENGE_BROADCAST_MESSAGE":   5,
	}
)

func (x StorageChallengeMessageMessageType) Enum() *StorageChallengeMessageMessageType {
	p := new(StorageChallengeMessageMessageType)
	*p = x
	return p
}

func (x StorageChallengeMessageMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageChallengeMessageMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_challenge_proto_enumTypes[0].Descriptor()
}

func (StorageChallengeMessageMessageType) Type() protoreflect.EnumType {
	return &file_storage_challenge_proto_enumTypes[0]
}

func (x StorageChallengeMessageMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageChallengeMessageMessageType.Descriptor instead.
func (StorageChallengeMessageMessageType) EnumDescriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{8, 0}
}

type ProcessStorageChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProcessStorageChallengeRequest) Reset() {
	*x = ProcessStorageChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStorageChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStorageChallengeRequest) ProtoMessage() {}

func (x *ProcessStorageChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStorageChallengeRequest.ProtoReflect.Descriptor instead.
func (*ProcessStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessStorageChallengeRequest) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProcessStorageChallengeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProcessStorageChallengeReply) Reset() {
	*x = ProcessStorageChallengeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStorageChallengeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStorageChallengeReply) ProtoMessage() {}

func (x *ProcessStorageChallengeReply) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStorageChallengeReply.ProtoReflect.Descriptor instead.
func (*ProcessStorageChallengeReply) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessStorageChallengeReply) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyStorageChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyStorageChallengeRequest) Reset() {
	*x = VerifyStorageChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyStorageChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyStorageChallengeRequest) ProtoMessage() {}

func (x *VerifyStorageChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyStorageChallengeRequest.ProtoReflect.Descriptor instead.
func (*VerifyStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyStorageChallengeRequest) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyStorageChallengeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyStorageChallengeReply) Reset() {
	*x = VerifyStorageChallengeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyStorageChallengeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyStorageChallengeReply) ProtoMessage() {}

func (x *VerifyStorageChallengeReply) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyStorageChallengeReply.ProtoReflect.Descriptor instead.
func (*VerifyStorageChallengeReply) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyStorageChallengeReply) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyEvaluationResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyEvaluationResultRequest) Reset() {
	*x = VerifyEvaluationResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEvaluationResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEvaluationResultRequest) ProtoMessage() {}

func (x *VerifyEvaluationResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEvaluationResultRequest.ProtoReflect.Descriptor instead.
func (*VerifyEvaluationResultRequest) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyEvaluationResultRequest) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyEvaluationResultReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyEvaluationResultReply) Reset() {
	*x = VerifyEvaluationResultReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEvaluationResultReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEvaluationResultReply) ProtoMessage() {}

func (x *VerifyEvaluationResultReply) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEvaluationResultReply.ProtoReflect.Descriptor instead.
func (*VerifyEvaluationResultReply) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyEvaluationResultReply) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type BroadcastStorageChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId     string            `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Challenger      map[string][]byte `protobuf:"bytes,2,rep,name=challenger,proto3" json:"challenger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recipient       map[string][]byte `protobuf:"bytes,3,rep,name=recipient,proto3" json:"recipient,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Observers       map[string][]byte `protobuf:"bytes,4,rep,name=observers,proto3" json:"observers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SenderSignature []byte            `protobuf:"bytes,5,opt,name=sender_signature,json=senderSignature,proto3" json:"sender_signature,omitempty"`
}

func (x *BroadcastStorageChallengeRequest) Reset() {
	*x = BroadcastStorageChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastStorageChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastStorageChallengeRequest) ProtoMessage() {}

func (x *BroadcastStorageChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastStorageChallengeRequest.ProtoReflect.Descriptor instead.
func (*BroadcastStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{6}
}

func (x *BroadcastStorageChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *BroadcastStorageChallengeRequest) GetChallenger() map[string][]byte {
	if x != nil {
		return x.Challenger
	}
	return nil
}

func (x *BroadcastStorageChallengeRequest) GetRecipient() map[string][]byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *BroadcastStorageChallengeRequest) GetObservers() map[string][]byte {
	if x != nil {
		return x.Observers
	}
	return nil
}

func (x *BroadcastStorageChallengeRequest) GetSenderSignature() []byte {
	if x != nil {
		return x.SenderSignature
	}
	return nil
}

type BroadcastStorageChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *StorageChallengeMessage `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BroadcastStorageChallengeResponse) Reset() {
	*x = BroadcastStorageChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastStorageChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastStorageChallengeResponse) ProtoMessage() {}

func (x *BroadcastStorageChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastStorageChallengeResponse.ProtoReflect.Descriptor instead.
func (*BroadcastStorageChallengeResponse) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{7}
}

func (x *BroadcastStorageChallengeResponse) GetData() *StorageChallengeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

type StorageChallengeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType     StorageChallengeMessageMessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=supernode.StorageChallengeMessageMessageType" json:"message_type,omitempty"`
	ChallengeId     string                             `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Data            []byte                             `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	SenderId        string                             `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	SenderSignature []byte                             `protobuf:"bytes,5,opt,name=sender_signature,json=senderSignature,proto3" json:"sender_signature,omitempty"`
}

func (x *StorageChallengeMessage) Reset() {
	*x = StorageChallengeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageChallengeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageChallengeMessage) ProtoMessage() {}

func (x *StorageChallengeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageChallengeMessage.ProtoReflect.Descriptor instead.
func (*StorageChallengeMessage) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{8}
}

func (x *StorageChallengeMessage) GetMessageType() StorageChallengeMessageMessageType {
	if x != nil {
		return x.MessageType
	}
	return StorageChallengeMessage_MessageType_UNKNOWN
}

func (x *StorageChallengeMessage) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *StorageChallengeMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StorageChallengeMessage) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *StorageChallengeMessage) GetSenderSignature() []byte {
	if x != nil {
		return x.SenderSignature
	}
	return nil
}

type BroadcastStorageChallengeMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	SenderId string `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (x *BroadcastStorageChallengeMetricsRequest) Reset() {
	*x = BroadcastStorageChallengeMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastStorageChallengeMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastStorageChallengeMetricsRequest) ProtoMessage() {}

func (x *BroadcastStorageChallengeMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastStorageChallengeMetricsRequest.ProtoReflect.Descriptor instead.
func (*BroadcastStorageChallengeMetricsRequest) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{9}
}

func (x *BroadcastStorageChallengeMetricsRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BroadcastStorageChallengeMetricsRequest) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

type BroadcastStorageChallengeMetricsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BroadcastStorageChallengeMetricsReply) Reset() {
	*x = BroadcastStorageChallengeMetricsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_challenge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastStorageChallengeMetricsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastStorageChallengeMetricsReply) ProtoMessage() {}

func (x *BroadcastStorageChallengeMetricsReply) ProtoReflect() protoreflect.Message {
	mi := &file_storage_challenge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastStorageChallengeMetricsReply.ProtoReflect.Descriptor instead.
func (*BroadcastStorageChallengeMetricsReply) Descriptor() ([]byte, []int) {
	return file_storage_challenge_proto_rawDescGZIP(), []int{10}
}

var File_storage_challenge_proto protoreflect.FileDescriptor

var file_storage_challenge_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x56, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x55, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x55, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbc, 0x04, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x5b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x21, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9f, 0x04, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x51, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x32, 0x0a, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x05, 0x22, 0x5a, 0x0a, 0x27, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x27, 0x0a, 0x25, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xa5, 0x05, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x6d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x6a, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a, 0x0a,
	0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7c, 0x0a, 0x1f, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x20, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67,
	0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x3b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_challenge_proto_rawDescOnce sync.Once
	file_storage_challenge_proto_rawDescData = file_storage_challenge_proto_rawDesc
)

func file_storage_challenge_proto_rawDescGZIP() []byte {
	file_storage_challenge_proto_rawDescOnce.Do(func() {
		file_storage_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_challenge_proto_rawDescData)
	})
	return file_storage_challenge_proto_rawDescData
}

var file_storage_challenge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_storage_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_storage_challenge_proto_goTypes = []interface{}{
	(StorageChallengeMessageMessageType)(0),         // 0: supernode.StorageChallengeMessage.messageType
	(*ProcessStorageChallengeRequest)(nil),          // 1: supernode.ProcessStorageChallengeRequest
	(*ProcessStorageChallengeReply)(nil),            // 2: supernode.ProcessStorageChallengeReply
	(*VerifyStorageChallengeRequest)(nil),           // 3: supernode.VerifyStorageChallengeRequest
	(*VerifyStorageChallengeReply)(nil),             // 4: supernode.VerifyStorageChallengeReply
	(*VerifyEvaluationResultRequest)(nil),           // 5: supernode.VerifyEvaluationResultRequest
	(*VerifyEvaluationResultReply)(nil),             // 6: supernode.VerifyEvaluationResultReply
	(*BroadcastStorageChallengeRequest)(nil),        // 7: supernode.BroadcastStorageChallengeRequest
	(*BroadcastStorageChallengeResponse)(nil),       // 8: supernode.BroadcastStorageChallengeResponse
	(*StorageChallengeMessage)(nil),                 // 9: supernode.StorageChallengeMessage
	(*BroadcastStorageChallengeMetricsRequest)(nil), // 10: supernode.BroadcastStorageChallengeMetricsRequest
	(*BroadcastStorageChallengeMetricsReply)(nil),   // 11: supernode.BroadcastStorageChallengeMetricsReply
	nil,                    // 12: supernode.BroadcastStorageChallengeRequest.ChallengerEntry
	nil,                    // 13: supernode.BroadcastStorageChallengeRequest.RecipientEntry
	nil,                    // 14: supernode.BroadcastStorageChallengeRequest.ObserversEntry
	(*SessionRequest)(nil), // 15: supernode.SessionRequest
	(*SessionReply)(nil),   // 16: supernode.SessionReply
}
var file_storage_challenge_proto_depIdxs = []int32{
	9,  // 0: supernode.ProcessStorageChallengeRequest.data:type_name -> supernode.StorageChallengeMessage
	9,  // 1: supernode.ProcessStorageChallengeReply.data:type_name -> supernode.StorageChallengeMessage
	9,  // 2: supernode.VerifyStorageChallengeRequest.data:type_name -> supernode.StorageChallengeMessage
	9,  // 3: supernode.VerifyStorageChallengeReply.data:type_name -> supernode.StorageChallengeMessage
	9,  // 4: supernode.VerifyEvaluationResultRequest.data:type_name -> supernode.StorageChallengeMessage
	9,  // 5: supernode.VerifyEvaluationResultReply.data:type_name -> supernode.StorageChallengeMessage
	12, // 6: supernode.BroadcastStorageChallengeRequest.challenger:type_name -> supernode.BroadcastStorageChallengeRequest.ChallengerEntry
	13, // 7: supernode.BroadcastStorageChallengeRequest.recipient:type_name -> supernode.BroadcastStorageChallengeRequest.RecipientEntry
	14, // 8: supernode.BroadcastStorageChallengeRequest.observers:type_name -> supernode.BroadcastStorageChallengeRequest.ObserversEntry
	9,  // 9: supernode.BroadcastStorageChallengeResponse.data:type_name -> supernode.StorageChallengeMessage
	0,  // 10: supernode.StorageChallengeMessage.message_type:type_name -> supernode.StorageChallengeMessage.messageType
	15, // 11: supernode.StorageChallenge.Session:input_type -> supernode.SessionRequest
	1,  // 12: supernode.StorageChallenge.ProcessStorageChallenge:input_type -> supernode.ProcessStorageChallengeRequest
	3,  // 13: supernode.StorageChallenge.VerifyStorageChallenge:input_type -> supernode.VerifyStorageChallengeRequest
	5,  // 14: supernode.StorageChallenge.VerifyEvaluationResult:input_type -> supernode.VerifyEvaluationResultRequest
	7,  // 15: supernode.StorageChallenge.BroadcastStorageChallengeResult:input_type -> supernode.BroadcastStorageChallengeRequest
	10, // 16: supernode.StorageChallenge.BroadcastStorageChallengeMetrics:input_type -> supernode.BroadcastStorageChallengeMetricsRequest
	16, // 17: supernode.StorageChallenge.Session:output_type -> supernode.SessionReply
	2,  // 18: supernode.StorageChallenge.ProcessStorageChallenge:output_type -> supernode.ProcessStorageChallengeReply
	4,  // 19: supernode.StorageChallenge.VerifyStorageChallenge:output_type -> supernode.VerifyStorageChallengeReply
	6,  // 20: supernode.StorageChallenge.VerifyEvaluationResult:output_type -> supernode.VerifyEvaluationResultReply
	8,  // 21: supernode.StorageChallenge.BroadcastStorageChallengeResult:output_type -> supernode.BroadcastStorageChallengeResponse
	11, // 22: supernode.StorageChallenge.BroadcastStorageChallengeMetrics:output_type -> supernode.BroadcastStorageChallengeMetricsReply
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_storage_challenge_proto_init() }
func file_storage_challenge_proto_init() {
	if File_storage_challenge_proto != nil {
		return
	}
	file_common_sn_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStorageChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStorageChallengeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyStorageChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyStorageChallengeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEvaluationResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEvaluationResultReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastStorageChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastStorageChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageChallengeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastStorageChallengeMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_challenge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastStorageChallengeMetricsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_challenge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_challenge_proto_goTypes,
		DependencyIndexes: file_storage_challenge_proto_depIdxs,
		EnumInfos:         file_storage_challenge_proto_enumTypes,
		MessageInfos:      file_storage_challenge_proto_msgTypes,
	}.Build()
	File_storage_challenge_proto = out.File
	file_storage_challenge_proto_rawDesc = nil
	file_storage_challenge_proto_goTypes = nil
	file_storage_challenge_proto_depIdxs = nil
}
