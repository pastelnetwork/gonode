// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage_challenges.proto

package storagechallenge

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StorageChallengeDataMessageType int32

const (
	MessageType_UNKNOWN                                StorageChallengeDataMessageType = 0
	MessageType_STORAGE_CHALLENGE_ISSUANCE_MESSAGE     StorageChallengeDataMessageType = 1
	MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE     StorageChallengeDataMessageType = 2
	MessageType_STORAGE_CHALLENGE_VERIFICATION_MESSAGE StorageChallengeDataMessageType = 3
)

var StorageChallengeDataMessageType_name = map[int32]string{
	0: "MessageType_UNKNOWN",
	1: "MessageType_STORAGE_CHALLENGE_ISSUANCE_MESSAGE",
	2: "MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE",
	3: "MessageType_STORAGE_CHALLENGE_VERIFICATION_MESSAGE",
}

var StorageChallengeDataMessageType_value = map[string]int32{
	"MessageType_UNKNOWN":                                0,
	"MessageType_STORAGE_CHALLENGE_ISSUANCE_MESSAGE":     1,
	"MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE":     2,
	"MessageType_STORAGE_CHALLENGE_VERIFICATION_MESSAGE": 3,
}

func (StorageChallengeDataMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{2, 0}
}

type StorageChallengeDataStatus int32

const (
	Status_UNKNOWN                   StorageChallengeDataStatus = 0
	Status_PENDING                   StorageChallengeDataStatus = 1
	Status_RESPONDED                 StorageChallengeDataStatus = 2
	Status_SUCCEEDED                 StorageChallengeDataStatus = 3
	Status_FAILED_TIMEOUT            StorageChallengeDataStatus = 4
	Status_FAILED_INCORRECT_RESPONSE StorageChallengeDataStatus = 5
)

var StorageChallengeDataStatus_name = map[int32]string{
	0: "Status_UNKNOWN",
	1: "Status_PENDING",
	2: "Status_RESPONDED",
	3: "Status_SUCCEEDED",
	4: "Status_FAILED_TIMEOUT",
	5: "Status_FAILED_INCORRECT_RESPONSE",
}

var StorageChallengeDataStatus_value = map[string]int32{
	"Status_UNKNOWN":                   0,
	"Status_PENDING":                   1,
	"Status_RESPONDED":                 2,
	"Status_SUCCEEDED":                 3,
	"Status_FAILED_TIMEOUT":            4,
	"Status_FAILED_INCORRECT_RESPONSE": 5,
}

func (StorageChallengeDataStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{2, 1}
}

type SessionRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *SessionRequest) Reset()      { *m = SessionRequest{} }
func (*SessionRequest) ProtoMessage() {}
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{0}
}
func (m *SessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequest.Merge(m, src)
}
func (m *SessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequest proto.InternalMessageInfo

func (m *SessionRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type SessionReply struct {
	SessID string `protobuf:"bytes,1,opt,name=sessID,proto3" json:"sessID,omitempty"`
}

func (m *SessionReply) Reset()      { *m = SessionReply{} }
func (*SessionReply) ProtoMessage() {}
func (*SessionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{1}
}
func (m *SessionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionReply.Merge(m, src)
}
func (m *SessionReply) XXX_Size() int {
	return m.Size()
}
func (m *SessionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionReply proto.InternalMessageInfo

func (m *SessionReply) GetSessID() string {
	if m != nil {
		return m.SessID
	}
	return ""
}

type StorageChallengeData struct {
	MessageId                     string                             `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageType                   StorageChallengeDataMessageType    `protobuf:"varint,2,opt,name=message_type,json=messageType,proto3,enum=storagechallenge.StorageChallengeDataMessageType" json:"message_type,omitempty"`
	ChallengeStatus               StorageChallengeDataStatus         `protobuf:"varint,3,opt,name=challenge_status,json=challengeStatus,proto3,enum=storagechallenge.StorageChallengeDataStatus" json:"challenge_status,omitempty"`
	TimestampChallengeSent        int64                              `protobuf:"varint,4,opt,name=timestamp_challenge_sent,json=timestampChallengeSent,proto3" json:"timestamp_challenge_sent,omitempty"`
	TimestampChallengeRespondedTo int64                              `protobuf:"varint,5,opt,name=timestamp_challenge_responded_to,json=timestampChallengeRespondedTo,proto3" json:"timestamp_challenge_responded_to,omitempty"`
	TimestampChallengeVerified    int64                              `protobuf:"varint,6,opt,name=timestamp_challenge_verified,json=timestampChallengeVerified,proto3" json:"timestamp_challenge_verified,omitempty"`
	BlockHashWhenChallengeSent    string                             `protobuf:"bytes,7,opt,name=block_hash_when_challenge_sent,json=blockHashWhenChallengeSent,proto3" json:"block_hash_when_challenge_sent,omitempty"`
	ChallengingMasternodeId       string                             `protobuf:"bytes,8,opt,name=challenging_masternode_id,json=challengingMasternodeId,proto3" json:"challenging_masternode_id,omitempty"`
	RespondingMasternodeId        string                             `protobuf:"bytes,9,opt,name=responding_masternode_id,json=respondingMasternodeId,proto3" json:"responding_masternode_id,omitempty"`
	ChallengeFile                 *StorageChallengeDataChallengeFile `protobuf:"bytes,10,opt,name=challenge_file,json=challengeFile,proto3" json:"challenge_file,omitempty"`
	ChallengeSliceCorrectHash     string                             `protobuf:"bytes,11,opt,name=challenge_slice_correct_hash,json=challengeSliceCorrectHash,proto3" json:"challenge_slice_correct_hash,omitempty"`
	ChallengeResponseHash         string                             `protobuf:"bytes,12,opt,name=challenge_response_hash,json=challengeResponseHash,proto3" json:"challenge_response_hash,omitempty"`
	ChallengeId                   string                             `protobuf:"bytes,13,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *StorageChallengeData) Reset()      { *m = StorageChallengeData{} }
func (*StorageChallengeData) ProtoMessage() {}
func (*StorageChallengeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{2}
}
func (m *StorageChallengeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageChallengeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageChallengeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageChallengeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageChallengeData.Merge(m, src)
}
func (m *StorageChallengeData) XXX_Size() int {
	return m.Size()
}
func (m *StorageChallengeData) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageChallengeData.DiscardUnknown(m)
}

var xxx_messageInfo_StorageChallengeData proto.InternalMessageInfo

func (m *StorageChallengeData) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *StorageChallengeData) GetMessageType() StorageChallengeDataMessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_UNKNOWN
}

func (m *StorageChallengeData) GetChallengeStatus() StorageChallengeDataStatus {
	if m != nil {
		return m.ChallengeStatus
	}
	return Status_UNKNOWN
}

func (m *StorageChallengeData) GetTimestampChallengeSent() int64 {
	if m != nil {
		return m.TimestampChallengeSent
	}
	return 0
}

func (m *StorageChallengeData) GetTimestampChallengeRespondedTo() int64 {
	if m != nil {
		return m.TimestampChallengeRespondedTo
	}
	return 0
}

func (m *StorageChallengeData) GetTimestampChallengeVerified() int64 {
	if m != nil {
		return m.TimestampChallengeVerified
	}
	return 0
}

func (m *StorageChallengeData) GetBlockHashWhenChallengeSent() string {
	if m != nil {
		return m.BlockHashWhenChallengeSent
	}
	return ""
}

func (m *StorageChallengeData) GetChallengingMasternodeId() string {
	if m != nil {
		return m.ChallengingMasternodeId
	}
	return ""
}

func (m *StorageChallengeData) GetRespondingMasternodeId() string {
	if m != nil {
		return m.RespondingMasternodeId
	}
	return ""
}

func (m *StorageChallengeData) GetChallengeFile() *StorageChallengeDataChallengeFile {
	if m != nil {
		return m.ChallengeFile
	}
	return nil
}

func (m *StorageChallengeData) GetChallengeSliceCorrectHash() string {
	if m != nil {
		return m.ChallengeSliceCorrectHash
	}
	return ""
}

func (m *StorageChallengeData) GetChallengeResponseHash() string {
	if m != nil {
		return m.ChallengeResponseHash
	}
	return ""
}

func (m *StorageChallengeData) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

type StorageChallengeDataChallengeFile struct {
	FileHashToChallenge      string `protobuf:"bytes,1,opt,name=file_hash_to_challenge,json=fileHashToChallenge,proto3" json:"file_hash_to_challenge,omitempty"`
	ChallengeSliceStartIndex int64  `protobuf:"varint,2,opt,name=challenge_slice_start_index,json=challengeSliceStartIndex,proto3" json:"challenge_slice_start_index,omitempty"`
	ChallengeSliceEndIndex   int64  `protobuf:"varint,3,opt,name=challenge_slice_end_index,json=challengeSliceEndIndex,proto3" json:"challenge_slice_end_index,omitempty"`
}

func (m *StorageChallengeDataChallengeFile) Reset()      { *m = StorageChallengeDataChallengeFile{} }
func (*StorageChallengeDataChallengeFile) ProtoMessage() {}
func (*StorageChallengeDataChallengeFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{2, 0}
}
func (m *StorageChallengeDataChallengeFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageChallengeDataChallengeFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageChallengeDataChallengeFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageChallengeDataChallengeFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageChallengeDataChallengeFile.Merge(m, src)
}
func (m *StorageChallengeDataChallengeFile) XXX_Size() int {
	return m.Size()
}
func (m *StorageChallengeDataChallengeFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageChallengeDataChallengeFile.DiscardUnknown(m)
}

var xxx_messageInfo_StorageChallengeDataChallengeFile proto.InternalMessageInfo

func (m *StorageChallengeDataChallengeFile) GetFileHashToChallenge() string {
	if m != nil {
		return m.FileHashToChallenge
	}
	return ""
}

func (m *StorageChallengeDataChallengeFile) GetChallengeSliceStartIndex() int64 {
	if m != nil {
		return m.ChallengeSliceStartIndex
	}
	return 0
}

func (m *StorageChallengeDataChallengeFile) GetChallengeSliceEndIndex() int64 {
	if m != nil {
		return m.ChallengeSliceEndIndex
	}
	return 0
}

type ProcessStorageChallengeRequest struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ProcessStorageChallengeRequest) Reset()      { *m = ProcessStorageChallengeRequest{} }
func (*ProcessStorageChallengeRequest) ProtoMessage() {}
func (*ProcessStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{3}
}
func (m *ProcessStorageChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStorageChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStorageChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStorageChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStorageChallengeRequest.Merge(m, src)
}
func (m *ProcessStorageChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStorageChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStorageChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStorageChallengeRequest proto.InternalMessageInfo

func (m *ProcessStorageChallengeRequest) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProcessStorageChallengeReply struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ProcessStorageChallengeReply) Reset()      { *m = ProcessStorageChallengeReply{} }
func (*ProcessStorageChallengeReply) ProtoMessage() {}
func (*ProcessStorageChallengeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{4}
}
func (m *ProcessStorageChallengeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStorageChallengeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStorageChallengeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStorageChallengeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStorageChallengeReply.Merge(m, src)
}
func (m *ProcessStorageChallengeReply) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStorageChallengeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStorageChallengeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStorageChallengeReply proto.InternalMessageInfo

func (m *ProcessStorageChallengeReply) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type VerifyStorageChallengeRequest struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VerifyStorageChallengeRequest) Reset()      { *m = VerifyStorageChallengeRequest{} }
func (*VerifyStorageChallengeRequest) ProtoMessage() {}
func (*VerifyStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{5}
}
func (m *VerifyStorageChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyStorageChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyStorageChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyStorageChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyStorageChallengeRequest.Merge(m, src)
}
func (m *VerifyStorageChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyStorageChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyStorageChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyStorageChallengeRequest proto.InternalMessageInfo

func (m *VerifyStorageChallengeRequest) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type VerifyStorageChallengeReply struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VerifyStorageChallengeReply) Reset()      { *m = VerifyStorageChallengeReply{} }
func (*VerifyStorageChallengeReply) ProtoMessage() {}
func (*VerifyStorageChallengeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{6}
}
func (m *VerifyStorageChallengeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyStorageChallengeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyStorageChallengeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyStorageChallengeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyStorageChallengeReply.Merge(m, src)
}
func (m *VerifyStorageChallengeReply) XXX_Size() int {
	return m.Size()
}
func (m *VerifyStorageChallengeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyStorageChallengeReply.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyStorageChallengeReply proto.InternalMessageInfo

func (m *VerifyStorageChallengeReply) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type GenerateStorageChallengeRequest struct {
	ChallengingMasternodeId         string `protobuf:"bytes,1,opt,name=challenging_masternode_id,json=challengingMasternodeId,proto3" json:"challenging_masternode_id,omitempty"`
	ChallengesPerMasternodePerBlock int32  `protobuf:"varint,2,opt,name=challenges_per_masternode_per_block,json=challengesPerMasternodePerBlock,proto3" json:"challenges_per_masternode_per_block,omitempty"`
	CurrentBlockHash                string `protobuf:"bytes,3,opt,name=current_block_hash,json=currentBlockHash,proto3" json:"current_block_hash,omitempty"`
}

func (m *GenerateStorageChallengeRequest) Reset()      { *m = GenerateStorageChallengeRequest{} }
func (*GenerateStorageChallengeRequest) ProtoMessage() {}
func (*GenerateStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{7}
}
func (m *GenerateStorageChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateStorageChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateStorageChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateStorageChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateStorageChallengeRequest.Merge(m, src)
}
func (m *GenerateStorageChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateStorageChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateStorageChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateStorageChallengeRequest proto.InternalMessageInfo

func (m *GenerateStorageChallengeRequest) GetChallengingMasternodeId() string {
	if m != nil {
		return m.ChallengingMasternodeId
	}
	return ""
}

func (m *GenerateStorageChallengeRequest) GetChallengesPerMasternodePerBlock() int32 {
	if m != nil {
		return m.ChallengesPerMasternodePerBlock
	}
	return 0
}

func (m *GenerateStorageChallengeRequest) GetCurrentBlockHash() string {
	if m != nil {
		return m.CurrentBlockHash
	}
	return ""
}

type GenerateStorageChallengeReply struct {
}

func (m *GenerateStorageChallengeReply) Reset()      { *m = GenerateStorageChallengeReply{} }
func (*GenerateStorageChallengeReply) ProtoMessage() {}
func (*GenerateStorageChallengeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8e0e3301d0ae12, []int{8}
}
func (m *GenerateStorageChallengeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateStorageChallengeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateStorageChallengeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateStorageChallengeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateStorageChallengeReply.Merge(m, src)
}
func (m *GenerateStorageChallengeReply) XXX_Size() int {
	return m.Size()
}
func (m *GenerateStorageChallengeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateStorageChallengeReply.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateStorageChallengeReply proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("storagechallenge.StorageChallengeDataMessageType", StorageChallengeDataMessageType_name, StorageChallengeDataMessageType_value)
	proto.RegisterEnum("storagechallenge.StorageChallengeDataStatus", StorageChallengeDataStatus_name, StorageChallengeDataStatus_value)
	proto.RegisterType((*SessionRequest)(nil), "storagechallenge.SessionRequest")
	proto.RegisterType((*SessionReply)(nil), "storagechallenge.SessionReply")
	proto.RegisterType((*StorageChallengeData)(nil), "storagechallenge.StorageChallengeData")
	proto.RegisterType((*StorageChallengeDataChallengeFile)(nil), "storagechallenge.StorageChallengeData.challengeFile")
	proto.RegisterType((*ProcessStorageChallengeRequest)(nil), "storagechallenge.ProcessStorageChallengeRequest")
	proto.RegisterType((*ProcessStorageChallengeReply)(nil), "storagechallenge.ProcessStorageChallengeReply")
	proto.RegisterType((*VerifyStorageChallengeRequest)(nil), "storagechallenge.VerifyStorageChallengeRequest")
	proto.RegisterType((*VerifyStorageChallengeReply)(nil), "storagechallenge.VerifyStorageChallengeReply")
	proto.RegisterType((*GenerateStorageChallengeRequest)(nil), "storagechallenge.GenerateStorageChallengeRequest")
	proto.RegisterType((*GenerateStorageChallengeReply)(nil), "storagechallenge.GenerateStorageChallengeReply")
}

func init() { proto.RegisterFile("storage_challenges.proto", fileDescriptor_db8e0e3301d0ae12) }

var fileDescriptor_db8e0e3301d0ae12 = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x73, 0xdb, 0x44,
	0x14, 0xf6, 0xd6, 0x49, 0x20, 0xcf, 0x69, 0xd0, 0x6c, 0xdb, 0x44, 0x49, 0x13, 0xc5, 0x18, 0xa6,
	0x93, 0x03, 0x38, 0x33, 0x2e, 0xd3, 0x81, 0x32, 0x0c, 0x38, 0xb6, 0xe2, 0x6a, 0x48, 0xe4, 0x20,
	0x39, 0x2d, 0xb4, 0xcc, 0x68, 0x14, 0xeb, 0xd5, 0xd6, 0xd4, 0x96, 0x84, 0x76, 0x4d, 0xf1, 0x8d,
	0x1b, 0x1c, 0xf9, 0x07, 0xb8, 0xf3, 0x57, 0x70, 0x64, 0x38, 0xe6, 0x58, 0x6e, 0xc4, 0xb9, 0x70,
	0xec, 0x9f, 0xc0, 0x68, 0x25, 0x4b, 0xb6, 0xf3, 0x83, 0xcc, 0x74, 0x38, 0xee, 0x7b, 0xdf, 0xf7,
	0xf9, 0x7b, 0xfb, 0xf6, 0x3d, 0x19, 0x64, 0xc6, 0xfd, 0xd0, 0xee, 0xa0, 0xd5, 0xee, 0xda, 0xbd,
	0x1e, 0x7a, 0x1d, 0x64, 0xe5, 0x20, 0xf4, 0xb9, 0x4f, 0xa5, 0x24, 0x93, 0x26, 0x4a, 0xdb, 0xb0,
	0x6c, 0x22, 0x63, 0xae, 0xef, 0x19, 0xf8, 0xdd, 0x00, 0x19, 0xa7, 0x2b, 0xb0, 0xe0, 0xf9, 0x0e,
	0x6a, 0x75, 0x99, 0x14, 0xc9, 0xf6, 0xa2, 0x91, 0x9c, 0x4a, 0xf7, 0x60, 0x29, 0x45, 0x06, 0xbd,
	0x61, 0x84, 0x63, 0xc8, 0x58, 0x86, 0x8b, 0x4f, 0xa5, 0x9f, 0x0b, 0x70, 0xdb, 0x8c, 0x7f, 0xa6,
	0x36, 0xfe, 0x99, 0xba, 0xcd, 0x6d, 0xba, 0x09, 0xd0, 0x47, 0xc6, 0x22, 0x63, 0xae, 0x93, 0x90,
	0x16, 0x93, 0x88, 0xe6, 0xd0, 0x23, 0x58, 0x1a, 0xa7, 0xf9, 0x30, 0x40, 0xf9, 0x46, 0x91, 0x6c,
	0x2f, 0x57, 0x2a, 0xe5, 0x59, 0xcb, 0xe5, 0x8b, 0xc4, 0xcb, 0x09, 0xb5, 0x35, 0x0c, 0xd0, 0x28,
	0x4c, 0x1c, 0xe8, 0xd7, 0x20, 0xa5, 0x54, 0x8b, 0x71, 0x9b, 0x0f, 0x98, 0x9c, 0x17, 0xd2, 0x1f,
	0x5e, 0x53, 0x3a, 0x26, 0x19, 0xef, 0xa4, 0x30, 0x53, 0x04, 0xe8, 0xc7, 0x20, 0x73, 0xb7, 0x8f,
	0x8c, 0xdb, 0xfd, 0xc0, 0x9a, 0xf8, 0x0d, 0xf4, 0xb8, 0x3c, 0x57, 0x24, 0xdb, 0x79, 0x63, 0x25,
	0xcd, 0xa7, 0x8a, 0x26, 0x7a, 0x9c, 0x36, 0xa0, 0x78, 0x11, 0x33, 0x44, 0x16, 0xf8, 0x9e, 0x83,
	0x8e, 0xc5, 0x7d, 0x79, 0x5e, 0x28, 0x6c, 0x9e, 0x57, 0x30, 0xc6, 0xa8, 0x96, 0x4f, 0xbf, 0x80,
	0x8d, 0x8b, 0x84, 0xbe, 0xc7, 0xd0, 0x7d, 0xee, 0xa2, 0x23, 0x2f, 0x08, 0x91, 0xf5, 0xf3, 0x22,
	0x8f, 0x13, 0x04, 0xdd, 0x05, 0xe5, 0xb8, 0xe7, 0xb7, 0x5f, 0x58, 0x5d, 0x9b, 0x75, 0xad, 0x97,
	0x5d, 0xf4, 0x66, 0x4b, 0x79, 0x4b, 0x34, 0x6a, 0x5d, 0xa0, 0x1e, 0xd9, 0xac, 0xfb, 0xa4, 0x8b,
	0xde, 0x74, 0x39, 0x0f, 0x61, 0x6d, 0xcc, 0x71, 0xbd, 0x8e, 0xd5, 0xb7, 0x19, 0xc7, 0x30, 0x7a,
	0x35, 0x51, 0x9f, 0xdf, 0x16, 0xf4, 0xd5, 0x09, 0xc0, 0x41, 0x9a, 0xd7, 0x9c, 0xe8, 0x12, 0x93,
	0xb2, 0xcf, 0x53, 0x17, 0x05, 0x75, 0x25, 0xcb, 0x4f, 0x31, 0x9f, 0xc1, 0x72, 0xe6, 0xf4, 0xb9,
	0xdb, 0x43, 0x19, 0x8a, 0x64, 0xbb, 0x50, 0xf9, 0xe8, 0x9a, 0x6d, 0x4d, 0xd3, 0x7b, 0x6e, 0x0f,
	0x8d, 0x9b, 0x53, 0x47, 0xfa, 0x39, 0x6c, 0x4c, 0x5c, 0x43, 0xcf, 0x6d, 0xa3, 0xd5, 0xf6, 0xc3,
	0x10, 0xdb, 0x5c, 0x5c, 0x94, 0x5c, 0x10, 0xd6, 0xd6, 0xb2, 0x27, 0x11, 0x41, 0x6a, 0x31, 0x22,
	0xba, 0x24, 0xfa, 0x00, 0x56, 0x67, 0x1b, 0xcb, 0x30, 0xe6, 0x2e, 0x09, 0xee, 0x9d, 0xf6, 0x74,
	0x43, 0x19, 0x0a, 0xde, 0xbb, 0xb0, 0x94, 0xf1, 0x5c, 0x47, 0xbe, 0x29, 0xc0, 0x85, 0x34, 0xa6,
	0x39, 0xeb, 0xbf, 0x13, 0x98, 0x71, 0x7b, 0x1f, 0x56, 0xa2, 0x0b, 0x88, 0x7b, 0xc8, 0xfd, 0xac,
	0x83, 0xc9, 0x94, 0xdd, 0x8a, 0xb2, 0x91, 0x7c, 0xcb, 0x4f, 0xef, 0x80, 0x7e, 0x06, 0x77, 0x67,
	0x4b, 0x64, 0xdc, 0x0e, 0xb9, 0xe5, 0x7a, 0x0e, 0xfe, 0x20, 0xc6, 0x2f, 0x6f, 0xc8, 0xd3, 0x15,
	0x9a, 0x11, 0x40, 0x8b, 0xf2, 0xf4, 0x93, 0xac, 0xe9, 0x63, 0x3a, 0x7a, 0x4e, 0x42, 0xce, 0xc7,
	0xcf, 0x7f, 0x9a, 0xac, 0x7a, 0x8e, 0xa0, 0x96, 0xfe, 0x20, 0x30, 0x35, 0xa2, 0xab, 0x70, 0xeb,
	0x20, 0x3b, 0x5a, 0x47, 0xfa, 0x97, 0x7a, 0xf3, 0x89, 0x2e, 0xe5, 0x68, 0x05, 0xca, 0x93, 0x09,
	0xb3, 0xd5, 0x34, 0xaa, 0x0d, 0xd5, 0xaa, 0x3d, 0xaa, 0xee, 0xef, 0xab, 0x7a, 0x43, 0xb5, 0x34,
	0xd3, 0x3c, 0xaa, 0xea, 0x35, 0xd5, 0x3a, 0x50, 0x4d, 0xb3, 0xda, 0x50, 0x25, 0xf2, 0xdf, 0x1c,
	0x43, 0x35, 0x0f, 0x9b, 0xba, 0x99, 0x71, 0x6e, 0xd0, 0x07, 0x50, 0xb9, 0x9a, 0xf3, 0x58, 0x35,
	0xb4, 0x3d, 0xad, 0x56, 0x6d, 0x69, 0x4d, 0x3d, 0xe5, 0xe5, 0x4b, 0xbf, 0x12, 0x58, 0x88, 0xb7,
	0x03, 0xa5, 0xb0, 0x1c, 0xaf, 0x85, 0x09, 0xfb, 0x59, 0xec, 0x50, 0xd5, 0xeb, 0x9a, 0xde, 0x90,
	0x08, 0xbd, 0x0d, 0x52, 0x12, 0x8b, 0x7d, 0xd4, 0xd5, 0xba, 0x74, 0x63, 0x22, 0x6a, 0x1e, 0xd5,
	0x6a, 0xaa, 0x1a, 0x45, 0xf3, 0x74, 0x0d, 0xee, 0x24, 0xd1, 0xbd, 0xaa, 0xb6, 0xaf, 0xd6, 0xad,
	0x96, 0x76, 0xa0, 0x36, 0x8f, 0x5a, 0xd2, 0x1c, 0x7d, 0x1f, 0x8a, 0xd3, 0x29, 0x4d, 0xaf, 0x35,
	0x0d, 0x43, 0xad, 0xb5, 0xd2, 0xfa, 0xa4, 0xf9, 0xd2, 0xb7, 0xa0, 0x1c, 0x86, 0x7e, 0x1b, 0x19,
	0x9b, 0x9d, 0x80, 0xf1, 0xb2, 0x7f, 0x08, 0x73, 0x8e, 0xcd, 0x6d, 0xf1, 0x4e, 0x0a, 0x95, 0x7b,
	0xd7, 0x1b, 0x1d, 0x43, 0x70, 0x4a, 0x4f, 0x61, 0xe3, 0x52, 0xf5, 0xe8, 0x03, 0xf1, 0x26, 0xda,
	0xcf, 0x60, 0x53, 0xac, 0xa8, 0xe1, 0xff, 0x61, 0xfc, 0x1b, 0xb8, 0x7b, 0x99, 0xf8, 0x9b, 0xfa,
	0xfe, 0x8b, 0xc0, 0x56, 0x03, 0x3d, 0x0c, 0x6d, 0x8e, 0x97, 0x5b, 0xbf, 0x62, 0x5d, 0x92, 0xab,
	0xd7, 0xe5, 0x3e, 0xbc, 0x97, 0x7d, 0xd4, 0xad, 0x00, 0xc3, 0x49, 0x7a, 0x74, 0x14, 0x6b, 0x5a,
	0x0c, 0xef, 0xbc, 0xb1, 0x95, 0x41, 0x0f, 0x31, 0xcc, 0x74, 0x0e, 0x31, 0xdc, 0x8d, 0x60, 0xf4,
	0x03, 0xa0, 0xed, 0x41, 0x18, 0xa2, 0xc7, 0xad, 0xec, 0x23, 0x20, 0x86, 0x77, 0xd1, 0x90, 0x92,
	0xcc, 0xee, 0x78, 0xef, 0x97, 0xb6, 0x60, 0xf3, 0xf2, 0xd2, 0x82, 0xde, 0x70, 0xf7, 0x27, 0x72,
	0x72, 0xaa, 0xe4, 0x5e, 0x9d, 0x2a, 0xb9, 0xd7, 0xa7, 0x0a, 0xf9, 0x71, 0xa4, 0x90, 0xdf, 0x46,
	0x0a, 0xf9, 0x73, 0xa4, 0x90, 0x93, 0x91, 0x42, 0xfe, 0x1e, 0x29, 0xe4, 0x9f, 0x91, 0x92, 0x7b,
	0x3d, 0x52, 0xc8, 0x2f, 0x67, 0x4a, 0xee, 0xe4, 0x4c, 0xc9, 0xbd, 0x3a, 0x53, 0x72, 0x4f, 0xbf,
	0xea, 0xb8, 0xbc, 0x3b, 0x38, 0x2e, 0xb7, 0xfd, 0xfe, 0x4e, 0x10, 0x99, 0xec, 0x79, 0xc8, 0x5f,
	0xfa, 0xe1, 0x8b, 0x9d, 0x8e, 0x1f, 0xd9, 0xdd, 0x11, 0xff, 0x5d, 0x76, 0xd8, 0x20, 0x88, 0xed,
	0xef, 0xcc, 0x36, 0xe4, 0xd3, 0xd9, 0xc0, 0xf1, 0x82, 0xa0, 0xdc, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x03, 0x15, 0xc1, 0x56, 0x0a, 0x09, 0x00, 0x00,
}

func (x StorageChallengeDataMessageType) String() string {
	s, ok := StorageChallengeDataMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StorageChallengeDataStatus) String() string {
	s, ok := StorageChallengeDataStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SessionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionRequest)
	if !ok {
		that2, ok := that.(SessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *SessionReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionReply)
	if !ok {
		that2, ok := that.(SessionReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessID != that1.SessID {
		return false
	}
	return true
}
func (this *StorageChallengeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageChallengeData)
	if !ok {
		that2, ok := that.(StorageChallengeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if this.ChallengeStatus != that1.ChallengeStatus {
		return false
	}
	if this.TimestampChallengeSent != that1.TimestampChallengeSent {
		return false
	}
	if this.TimestampChallengeRespondedTo != that1.TimestampChallengeRespondedTo {
		return false
	}
	if this.TimestampChallengeVerified != that1.TimestampChallengeVerified {
		return false
	}
	if this.BlockHashWhenChallengeSent != that1.BlockHashWhenChallengeSent {
		return false
	}
	if this.ChallengingMasternodeId != that1.ChallengingMasternodeId {
		return false
	}
	if this.RespondingMasternodeId != that1.RespondingMasternodeId {
		return false
	}
	if !this.ChallengeFile.Equal(that1.ChallengeFile) {
		return false
	}
	if this.ChallengeSliceCorrectHash != that1.ChallengeSliceCorrectHash {
		return false
	}
	if this.ChallengeResponseHash != that1.ChallengeResponseHash {
		return false
	}
	if this.ChallengeId != that1.ChallengeId {
		return false
	}
	return true
}
func (this *StorageChallengeDataChallengeFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageChallengeDataChallengeFile)
	if !ok {
		that2, ok := that.(StorageChallengeDataChallengeFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileHashToChallenge != that1.FileHashToChallenge {
		return false
	}
	if this.ChallengeSliceStartIndex != that1.ChallengeSliceStartIndex {
		return false
	}
	if this.ChallengeSliceEndIndex != that1.ChallengeSliceEndIndex {
		return false
	}
	return true
}
func (this *ProcessStorageChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessStorageChallengeRequest)
	if !ok {
		that2, ok := that.(ProcessStorageChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *ProcessStorageChallengeReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessStorageChallengeReply)
	if !ok {
		that2, ok := that.(ProcessStorageChallengeReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *VerifyStorageChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyStorageChallengeRequest)
	if !ok {
		that2, ok := that.(VerifyStorageChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *VerifyStorageChallengeReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyStorageChallengeReply)
	if !ok {
		that2, ok := that.(VerifyStorageChallengeReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GenerateStorageChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateStorageChallengeRequest)
	if !ok {
		that2, ok := that.(GenerateStorageChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChallengingMasternodeId != that1.ChallengingMasternodeId {
		return false
	}
	if this.ChallengesPerMasternodePerBlock != that1.ChallengesPerMasternodePerBlock {
		return false
	}
	if this.CurrentBlockHash != that1.CurrentBlockHash {
		return false
	}
	return true
}
func (this *GenerateStorageChallengeReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateStorageChallengeReply)
	if !ok {
		that2, ok := that.(GenerateStorageChallengeReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SessionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storagechallenge.SessionRequest{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storagechallenge.SessionReply{")
	s = append(s, "SessID: "+fmt.Sprintf("%#v", this.SessID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageChallengeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&storagechallenge.StorageChallengeData{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	s = append(s, "ChallengeStatus: "+fmt.Sprintf("%#v", this.ChallengeStatus)+",\n")
	s = append(s, "TimestampChallengeSent: "+fmt.Sprintf("%#v", this.TimestampChallengeSent)+",\n")
	s = append(s, "TimestampChallengeRespondedTo: "+fmt.Sprintf("%#v", this.TimestampChallengeRespondedTo)+",\n")
	s = append(s, "TimestampChallengeVerified: "+fmt.Sprintf("%#v", this.TimestampChallengeVerified)+",\n")
	s = append(s, "BlockHashWhenChallengeSent: "+fmt.Sprintf("%#v", this.BlockHashWhenChallengeSent)+",\n")
	s = append(s, "ChallengingMasternodeId: "+fmt.Sprintf("%#v", this.ChallengingMasternodeId)+",\n")
	s = append(s, "RespondingMasternodeId: "+fmt.Sprintf("%#v", this.RespondingMasternodeId)+",\n")
	if this.ChallengeFile != nil {
		s = append(s, "ChallengeFile: "+fmt.Sprintf("%#v", this.ChallengeFile)+",\n")
	}
	s = append(s, "ChallengeSliceCorrectHash: "+fmt.Sprintf("%#v", this.ChallengeSliceCorrectHash)+",\n")
	s = append(s, "ChallengeResponseHash: "+fmt.Sprintf("%#v", this.ChallengeResponseHash)+",\n")
	s = append(s, "ChallengeId: "+fmt.Sprintf("%#v", this.ChallengeId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageChallengeDataChallengeFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&storagechallenge.StorageChallengeDataChallengeFile{")
	s = append(s, "FileHashToChallenge: "+fmt.Sprintf("%#v", this.FileHashToChallenge)+",\n")
	s = append(s, "ChallengeSliceStartIndex: "+fmt.Sprintf("%#v", this.ChallengeSliceStartIndex)+",\n")
	s = append(s, "ChallengeSliceEndIndex: "+fmt.Sprintf("%#v", this.ChallengeSliceEndIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessStorageChallengeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storagechallenge.ProcessStorageChallengeRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessStorageChallengeReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storagechallenge.ProcessStorageChallengeReply{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyStorageChallengeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storagechallenge.VerifyStorageChallengeRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyStorageChallengeReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&storagechallenge.VerifyStorageChallengeReply{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateStorageChallengeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&storagechallenge.GenerateStorageChallengeRequest{")
	s = append(s, "ChallengingMasternodeId: "+fmt.Sprintf("%#v", this.ChallengingMasternodeId)+",\n")
	s = append(s, "ChallengesPerMasternodePerBlock: "+fmt.Sprintf("%#v", this.ChallengesPerMasternodePerBlock)+",\n")
	s = append(s, "CurrentBlockHash: "+fmt.Sprintf("%#v", this.CurrentBlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateStorageChallengeReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&storagechallenge.GenerateStorageChallengeReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStorageChallenges(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessID) > 0 {
		i -= len(m.SessID)
		copy(dAtA[i:], m.SessID)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.SessID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageChallengeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageChallengeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageChallengeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChallengeResponseHash) > 0 {
		i -= len(m.ChallengeResponseHash)
		copy(dAtA[i:], m.ChallengeResponseHash)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.ChallengeResponseHash)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ChallengeSliceCorrectHash) > 0 {
		i -= len(m.ChallengeSliceCorrectHash)
		copy(dAtA[i:], m.ChallengeSliceCorrectHash)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.ChallengeSliceCorrectHash)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ChallengeFile != nil {
		{
			size, err := m.ChallengeFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallenges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.RespondingMasternodeId) > 0 {
		i -= len(m.RespondingMasternodeId)
		copy(dAtA[i:], m.RespondingMasternodeId)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.RespondingMasternodeId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChallengingMasternodeId) > 0 {
		i -= len(m.ChallengingMasternodeId)
		copy(dAtA[i:], m.ChallengingMasternodeId)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.ChallengingMasternodeId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BlockHashWhenChallengeSent) > 0 {
		i -= len(m.BlockHashWhenChallengeSent)
		copy(dAtA[i:], m.BlockHashWhenChallengeSent)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.BlockHashWhenChallengeSent)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TimestampChallengeVerified != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.TimestampChallengeVerified))
		i--
		dAtA[i] = 0x30
	}
	if m.TimestampChallengeRespondedTo != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.TimestampChallengeRespondedTo))
		i--
		dAtA[i] = 0x28
	}
	if m.TimestampChallengeSent != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.TimestampChallengeSent))
		i--
		dAtA[i] = 0x20
	}
	if m.ChallengeStatus != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.ChallengeStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.MessageType != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageChallengeDataChallengeFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageChallengeDataChallengeFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageChallengeDataChallengeFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSliceEndIndex != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.ChallengeSliceEndIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ChallengeSliceStartIndex != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.ChallengeSliceStartIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileHashToChallenge) > 0 {
		i -= len(m.FileHashToChallenge)
		copy(dAtA[i:], m.FileHashToChallenge)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.FileHashToChallenge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessStorageChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStorageChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStorageChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallenges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessStorageChallengeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStorageChallengeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStorageChallengeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallenges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyStorageChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyStorageChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyStorageChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallenges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyStorageChallengeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyStorageChallengeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyStorageChallengeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallenges(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateStorageChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateStorageChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateStorageChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentBlockHash) > 0 {
		i -= len(m.CurrentBlockHash)
		copy(dAtA[i:], m.CurrentBlockHash)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.CurrentBlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChallengesPerMasternodePerBlock != 0 {
		i = encodeVarintStorageChallenges(dAtA, i, uint64(m.ChallengesPerMasternodePerBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChallengingMasternodeId) > 0 {
		i -= len(m.ChallengingMasternodeId)
		copy(dAtA[i:], m.ChallengingMasternodeId)
		i = encodeVarintStorageChallenges(dAtA, i, uint64(len(m.ChallengingMasternodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateStorageChallengeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateStorageChallengeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateStorageChallengeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintStorageChallenges(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageChallenges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *SessionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessID)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *StorageChallengeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	if m.MessageType != 0 {
		n += 1 + sovStorageChallenges(uint64(m.MessageType))
	}
	if m.ChallengeStatus != 0 {
		n += 1 + sovStorageChallenges(uint64(m.ChallengeStatus))
	}
	if m.TimestampChallengeSent != 0 {
		n += 1 + sovStorageChallenges(uint64(m.TimestampChallengeSent))
	}
	if m.TimestampChallengeRespondedTo != 0 {
		n += 1 + sovStorageChallenges(uint64(m.TimestampChallengeRespondedTo))
	}
	if m.TimestampChallengeVerified != 0 {
		n += 1 + sovStorageChallenges(uint64(m.TimestampChallengeVerified))
	}
	l = len(m.BlockHashWhenChallengeSent)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	l = len(m.ChallengingMasternodeId)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	l = len(m.RespondingMasternodeId)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	if m.ChallengeFile != nil {
		l = m.ChallengeFile.Size()
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	l = len(m.ChallengeSliceCorrectHash)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	l = len(m.ChallengeResponseHash)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *StorageChallengeDataChallengeFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHashToChallenge)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	if m.ChallengeSliceStartIndex != 0 {
		n += 1 + sovStorageChallenges(uint64(m.ChallengeSliceStartIndex))
	}
	if m.ChallengeSliceEndIndex != 0 {
		n += 1 + sovStorageChallenges(uint64(m.ChallengeSliceEndIndex))
	}
	return n
}

func (m *ProcessStorageChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *ProcessStorageChallengeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *VerifyStorageChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *VerifyStorageChallengeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *GenerateStorageChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChallengingMasternodeId)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	if m.ChallengesPerMasternodePerBlock != 0 {
		n += 1 + sovStorageChallenges(uint64(m.ChallengesPerMasternodePerBlock))
	}
	l = len(m.CurrentBlockHash)
	if l > 0 {
		n += 1 + l + sovStorageChallenges(uint64(l))
	}
	return n
}

func (m *GenerateStorageChallengeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovStorageChallenges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageChallenges(x uint64) (n int) {
	return sovStorageChallenges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionRequest{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionReply{`,
		`SessID:` + fmt.Sprintf("%v", this.SessID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageChallengeData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageChallengeData{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`ChallengeStatus:` + fmt.Sprintf("%v", this.ChallengeStatus) + `,`,
		`TimestampChallengeSent:` + fmt.Sprintf("%v", this.TimestampChallengeSent) + `,`,
		`TimestampChallengeRespondedTo:` + fmt.Sprintf("%v", this.TimestampChallengeRespondedTo) + `,`,
		`TimestampChallengeVerified:` + fmt.Sprintf("%v", this.TimestampChallengeVerified) + `,`,
		`BlockHashWhenChallengeSent:` + fmt.Sprintf("%v", this.BlockHashWhenChallengeSent) + `,`,
		`ChallengingMasternodeId:` + fmt.Sprintf("%v", this.ChallengingMasternodeId) + `,`,
		`RespondingMasternodeId:` + fmt.Sprintf("%v", this.RespondingMasternodeId) + `,`,
		`ChallengeFile:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeFile), "StorageChallengeDataChallengeFile", "StorageChallengeDataChallengeFile", 1) + `,`,
		`ChallengeSliceCorrectHash:` + fmt.Sprintf("%v", this.ChallengeSliceCorrectHash) + `,`,
		`ChallengeResponseHash:` + fmt.Sprintf("%v", this.ChallengeResponseHash) + `,`,
		`ChallengeId:` + fmt.Sprintf("%v", this.ChallengeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageChallengeDataChallengeFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageChallengeDataChallengeFile{`,
		`FileHashToChallenge:` + fmt.Sprintf("%v", this.FileHashToChallenge) + `,`,
		`ChallengeSliceStartIndex:` + fmt.Sprintf("%v", this.ChallengeSliceStartIndex) + `,`,
		`ChallengeSliceEndIndex:` + fmt.Sprintf("%v", this.ChallengeSliceEndIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessStorageChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessStorageChallengeRequest{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessStorageChallengeReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessStorageChallengeReply{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyStorageChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyStorageChallengeRequest{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyStorageChallengeReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyStorageChallengeReply{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateStorageChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateStorageChallengeRequest{`,
		`ChallengingMasternodeId:` + fmt.Sprintf("%v", this.ChallengingMasternodeId) + `,`,
		`ChallengesPerMasternodePerBlock:` + fmt.Sprintf("%v", this.ChallengesPerMasternodePerBlock) + `,`,
		`CurrentBlockHash:` + fmt.Sprintf("%v", this.CurrentBlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateStorageChallengeReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateStorageChallengeReply{`,
		`}`,
	}, "")
	return s
}
func valueToStringStorageChallenges(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageChallengeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageChallengeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageChallengeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= StorageChallengeDataMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeStatus", wireType)
			}
			m.ChallengeStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeStatus |= StorageChallengeDataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampChallengeSent", wireType)
			}
			m.TimestampChallengeSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampChallengeSent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampChallengeRespondedTo", wireType)
			}
			m.TimestampChallengeRespondedTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampChallengeRespondedTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampChallengeVerified", wireType)
			}
			m.TimestampChallengeVerified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampChallengeVerified |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHashWhenChallengeSent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHashWhenChallengeSent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengingMasternodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengingMasternodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespondingMasternodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespondingMasternodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeFile == nil {
				m.ChallengeFile = &StorageChallengeDataChallengeFile{}
			}
			if err := m.ChallengeFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSliceCorrectHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSliceCorrectHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeResponseHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeResponseHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageChallengeDataChallengeFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: challengeFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: challengeFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHashToChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHashToChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSliceStartIndex", wireType)
			}
			m.ChallengeSliceStartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSliceStartIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSliceEndIndex", wireType)
			}
			m.ChallengeSliceEndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSliceEndIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessStorageChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStorageChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStorageChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessStorageChallengeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStorageChallengeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStorageChallengeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyStorageChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyStorageChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyStorageChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyStorageChallengeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyStorageChallengeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyStorageChallengeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateStorageChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateStorageChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateStorageChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengingMasternodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengingMasternodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengesPerMasternodePerBlock", wireType)
			}
			m.ChallengesPerMasternodePerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengesPerMasternodePerBlock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateStorageChallengeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateStorageChallengeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateStorageChallengeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallenges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallenges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageChallenges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageChallenges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageChallenges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageChallenges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageChallenges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageChallenges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageChallenges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageChallenges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageChallenges = fmt.Errorf("proto: unexpected end of group")
)
