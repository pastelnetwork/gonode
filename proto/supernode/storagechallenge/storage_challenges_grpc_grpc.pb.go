// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storagechallenge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageChallengeClient is the client API for StorageChallenge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageChallengeClient interface {
	GenerateStorageChallenge(ctx context.Context, in *GenerateStorageChallengeRequest, opts ...grpc.CallOption) (*GenerateStorageChallengeReply, error)
	ProcessStorageChallenge(ctx context.Context, in *ProcessStorageChallengeRequest, opts ...grpc.CallOption) (*ProcessStorageChallengeReply, error)
	VerifyStorageChallenge(ctx context.Context, in *VerifyStorageChallengeRequest, opts ...grpc.CallOption) (*VerifyStorageChallengeReply, error)
}

type storageChallengeClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageChallengeClient(cc grpc.ClientConnInterface) StorageChallengeClient {
	return &storageChallengeClient{cc}
}

func (c *storageChallengeClient) GenerateStorageChallenge(ctx context.Context, in *GenerateStorageChallengeRequest, opts ...grpc.CallOption) (*GenerateStorageChallengeReply, error) {
	out := new(GenerateStorageChallengeReply)
	err := c.cc.Invoke(ctx, "/storagechallenge.StorageChallenge/GenerateStorageChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) ProcessStorageChallenge(ctx context.Context, in *ProcessStorageChallengeRequest, opts ...grpc.CallOption) (*ProcessStorageChallengeReply, error) {
	out := new(ProcessStorageChallengeReply)
	err := c.cc.Invoke(ctx, "/storagechallenge.StorageChallenge/ProcessStorageChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) VerifyStorageChallenge(ctx context.Context, in *VerifyStorageChallengeRequest, opts ...grpc.CallOption) (*VerifyStorageChallengeReply, error) {
	out := new(VerifyStorageChallengeReply)
	err := c.cc.Invoke(ctx, "/storagechallenge.StorageChallenge/VerifyStorageChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageChallengeServer is the server API for StorageChallenge service.
// All implementations must embed UnimplementedStorageChallengeServer
// for forward compatibility
type StorageChallengeServer interface {
	GenerateStorageChallenge(context.Context, *GenerateStorageChallengeRequest) (*GenerateStorageChallengeReply, error)
	ProcessStorageChallenge(context.Context, *ProcessStorageChallengeRequest) (*ProcessStorageChallengeReply, error)
	VerifyStorageChallenge(context.Context, *VerifyStorageChallengeRequest) (*VerifyStorageChallengeReply, error)
	mustEmbedUnimplementedStorageChallengeServer()
}

// UnimplementedStorageChallengeServer must be embedded to have forward compatible implementations.
type UnimplementedStorageChallengeServer struct {
}

func (UnimplementedStorageChallengeServer) GenerateStorageChallenge(context.Context, *GenerateStorageChallengeRequest) (*GenerateStorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) ProcessStorageChallenge(context.Context, *ProcessStorageChallengeRequest) (*ProcessStorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) VerifyStorageChallenge(context.Context, *VerifyStorageChallengeRequest) (*VerifyStorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) mustEmbedUnimplementedStorageChallengeServer() {}

// UnsafeStorageChallengeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageChallengeServer will
// result in compilation errors.
type UnsafeStorageChallengeServer interface {
	mustEmbedUnimplementedStorageChallengeServer()
}

func RegisterStorageChallengeServer(s grpc.ServiceRegistrar, srv StorageChallengeServer) {
	s.RegisterService(&StorageChallenge_ServiceDesc, srv)
}

func _StorageChallenge_GenerateStorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).GenerateStorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagechallenge.StorageChallenge/GenerateStorageChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).GenerateStorageChallenge(ctx, req.(*GenerateStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_ProcessStorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).ProcessStorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagechallenge.StorageChallenge/ProcessStorageChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).ProcessStorageChallenge(ctx, req.(*ProcessStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_VerifyStorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).VerifyStorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagechallenge.StorageChallenge/VerifyStorageChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).VerifyStorageChallenge(ctx, req.(*VerifyStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageChallenge_ServiceDesc is the grpc.ServiceDesc for StorageChallenge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageChallenge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagechallenge.StorageChallenge",
	HandlerType: (*StorageChallengeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateStorageChallenge",
			Handler:    _StorageChallenge_GenerateStorageChallenge_Handler,
		},
		{
			MethodName: "ProcessStorageChallenge",
			Handler:    _StorageChallenge_ProcessStorageChallenge_Handler,
		},
		{
			MethodName: "VerifyStorageChallenge",
			Handler:    _StorageChallenge_VerifyStorageChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_challenges_grpc.proto",
}
