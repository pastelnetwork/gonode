// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalDupeDetectionClient is the client API for ExternalDupeDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalDupeDetectionClient interface {
	// Session informs primary supernode about its `nodeID` and `sessID` it wants
	// to connect to. The stream is used by the parties to inform each other about
	// the cancellation of the task.
	Session(ctx context.Context, opts ...grpc.CallOption) (ExternalDupeDetection_SessionClient, error)
	// SendDDTicketSignature send signature from supernodes mn2/mn3 for given reg NFT session id to primary supernode
	SendDDTicketSignature(ctx context.Context, in *SendTicketSignatureRequest, opts ...grpc.CallOption) (*SendTicketSignatureReply, error)
}

type externalDupeDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalDupeDetectionClient(cc grpc.ClientConnInterface) ExternalDupeDetectionClient {
	return &externalDupeDetectionClient{cc}
}

func (c *externalDupeDetectionClient) Session(ctx context.Context, opts ...grpc.CallOption) (ExternalDupeDetection_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExternalDupeDetection_ServiceDesc.Streams[0], "/supernode.ExternalDupeDetection/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalDupeDetectionSessionClient{stream}
	return x, nil
}

type ExternalDupeDetection_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type externalDupeDetectionSessionClient struct {
	grpc.ClientStream
}

func (x *externalDupeDetectionSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *externalDupeDetectionSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalDupeDetectionClient) SendDDTicketSignature(ctx context.Context, in *SendTicketSignatureRequest, opts ...grpc.CallOption) (*SendTicketSignatureReply, error) {
	out := new(SendTicketSignatureReply)
	err := c.cc.Invoke(ctx, "/supernode.ExternalDupeDetection/SendDDTicketSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalDupeDetectionServer is the server API for ExternalDupeDetection service.
// All implementations must embed UnimplementedExternalDupeDetectionServer
// for forward compatibility
type ExternalDupeDetectionServer interface {
	// Session informs primary supernode about its `nodeID` and `sessID` it wants
	// to connect to. The stream is used by the parties to inform each other about
	// the cancellation of the task.
	Session(ExternalDupeDetection_SessionServer) error
	// SendDDTicketSignature send signature from supernodes mn2/mn3 for given reg NFT session id to primary supernode
	SendDDTicketSignature(context.Context, *SendTicketSignatureRequest) (*SendTicketSignatureReply, error)
	mustEmbedUnimplementedExternalDupeDetectionServer()
}

// UnimplementedExternalDupeDetectionServer must be embedded to have forward compatible implementations.
type UnimplementedExternalDupeDetectionServer struct {
}

func (UnimplementedExternalDupeDetectionServer) Session(ExternalDupeDetection_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedExternalDupeDetectionServer) SendDDTicketSignature(context.Context, *SendTicketSignatureRequest) (*SendTicketSignatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDDTicketSignature not implemented")
}
func (UnimplementedExternalDupeDetectionServer) mustEmbedUnimplementedExternalDupeDetectionServer() {}

// UnsafeExternalDupeDetectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalDupeDetectionServer will
// result in compilation errors.
type UnsafeExternalDupeDetectionServer interface {
	mustEmbedUnimplementedExternalDupeDetectionServer()
}

func RegisterExternalDupeDetectionServer(s grpc.ServiceRegistrar, srv ExternalDupeDetectionServer) {
	s.RegisterService(&ExternalDupeDetection_ServiceDesc, srv)
}

func _ExternalDupeDetection_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalDupeDetectionServer).Session(&externalDupeDetectionSessionServer{stream})
}

type ExternalDupeDetection_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type externalDupeDetectionSessionServer struct {
	grpc.ServerStream
}

func (x *externalDupeDetectionSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *externalDupeDetectionSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExternalDupeDetection_SendDDTicketSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalDupeDetectionServer).SendDDTicketSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.ExternalDupeDetection/SendDDTicketSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalDupeDetectionServer).SendDDTicketSignature(ctx, req.(*SendTicketSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalDupeDetection_ServiceDesc is the grpc.ServiceDesc for ExternalDupeDetection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalDupeDetection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.ExternalDupeDetection",
	HandlerType: (*ExternalDupeDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDDTicketSignature",
			Handler:    _ExternalDupeDetection_SendDDTicketSignature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _ExternalDupeDetection_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "external_dupe_detection_request.proto",
}
