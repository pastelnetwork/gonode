// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: supernode/register_artwork.proto

package supernode

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *SessionRequest) Reset()      { *m = SessionRequest{} }
func (*SessionRequest) ProtoMessage() {}
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_101d8b5ba52f317b, []int{0}
}
func (m *SessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequest.Merge(m, src)
}
func (m *SessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequest proto.InternalMessageInfo

func (m *SessionRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type SessionReply struct {
	SessID string `protobuf:"bytes,1,opt,name=sessID,proto3" json:"sessID,omitempty"`
}

func (m *SessionReply) Reset()      { *m = SessionReply{} }
func (*SessionReply) ProtoMessage() {}
func (*SessionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_101d8b5ba52f317b, []int{1}
}
func (m *SessionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionReply.Merge(m, src)
}
func (m *SessionReply) XXX_Size() int {
	return m.Size()
}
func (m *SessionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionReply proto.InternalMessageInfo

func (m *SessionReply) GetSessID() string {
	if m != nil {
		return m.SessID
	}
	return ""
}

type SendArtTicketSignatureRequest struct {
	NodeID    string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SendArtTicketSignatureRequest) Reset()      { *m = SendArtTicketSignatureRequest{} }
func (*SendArtTicketSignatureRequest) ProtoMessage() {}
func (*SendArtTicketSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_101d8b5ba52f317b, []int{2}
}
func (m *SendArtTicketSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendArtTicketSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendArtTicketSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendArtTicketSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendArtTicketSignatureRequest.Merge(m, src)
}
func (m *SendArtTicketSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendArtTicketSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendArtTicketSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendArtTicketSignatureRequest proto.InternalMessageInfo

func (m *SendArtTicketSignatureRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *SendArtTicketSignatureRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SendArtTicketSignatureReply struct {
}

func (m *SendArtTicketSignatureReply) Reset()      { *m = SendArtTicketSignatureReply{} }
func (*SendArtTicketSignatureReply) ProtoMessage() {}
func (*SendArtTicketSignatureReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_101d8b5ba52f317b, []int{3}
}
func (m *SendArtTicketSignatureReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendArtTicketSignatureReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendArtTicketSignatureReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendArtTicketSignatureReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendArtTicketSignatureReply.Merge(m, src)
}
func (m *SendArtTicketSignatureReply) XXX_Size() int {
	return m.Size()
}
func (m *SendArtTicketSignatureReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendArtTicketSignatureReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendArtTicketSignatureReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SessionRequest)(nil), "supernode.SessionRequest")
	proto.RegisterType((*SessionReply)(nil), "supernode.SessionReply")
	proto.RegisterType((*SendArtTicketSignatureRequest)(nil), "supernode.SendArtTicketSignatureRequest")
	proto.RegisterType((*SendArtTicketSignatureReply)(nil), "supernode.SendArtTicketSignatureReply")
}

func init() { proto.RegisterFile("supernode/register_artwork.proto", fileDescriptor_101d8b5ba52f317b) }

var fileDescriptor_101d8b5ba52f317b = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbd, 0x4e, 0xeb, 0x30,
	0x14, 0xc7, 0x73, 0xee, 0xd0, 0xab, 0x5a, 0xd5, 0xbd, 0x92, 0x87, 0x52, 0x0a, 0x3d, 0xaa, 0x32,
	0x54, 0x99, 0x12, 0x04, 0x4f, 0x50, 0xc4, 0xc2, 0x9a, 0xc2, 0xc2, 0x82, 0xfa, 0x71, 0x14, 0x42,
	0x43, 0x6c, 0x6c, 0x47, 0x28, 0x1b, 0x8f, 0xc0, 0x63, 0xf0, 0x18, 0x8c, 0x8c, 0x1d, 0x3b, 0x52,
	0x77, 0x61, 0xec, 0x23, 0xa0, 0xa6, 0x25, 0x55, 0xa5, 0xf2, 0x31, 0x9e, 0x73, 0x7e, 0xf6, 0xf9,
	0xff, 0x64, 0xb3, 0xb6, 0xce, 0x24, 0xa9, 0x54, 0x8c, 0x28, 0x50, 0x14, 0xc5, 0xda, 0x90, 0xba,
	0xee, 0x2b, 0xf3, 0x20, 0xd4, 0xd8, 0x97, 0x4a, 0x18, 0xc1, 0xab, 0x25, 0xe1, 0x7a, 0xec, 0x5f,
	0x8f, 0xb4, 0x8e, 0x45, 0x1a, 0xd2, 0x7d, 0x46, 0xda, 0xf0, 0x3a, 0xab, 0x2c, 0x27, 0xe7, 0x67,
	0x0d, 0x68, 0x83, 0x57, 0x0d, 0xd7, 0x95, 0xdb, 0x61, 0xb5, 0x92, 0x94, 0x49, 0xbe, 0xe4, 0x34,
	0x69, 0xbd, 0xe1, 0x56, 0x95, 0x7b, 0xc9, 0x5a, 0x3d, 0x4a, 0x47, 0x5d, 0x65, 0x2e, 0xe2, 0xe1,
	0x98, 0x4c, 0x2f, 0x8e, 0xd2, 0xbe, 0xc9, 0x14, 0xfd, 0xb0, 0x80, 0x1f, 0xb2, 0xaa, 0xfe, 0x64,
	0x1b, 0x7f, 0xda, 0xe0, 0xd5, 0xc2, 0x4d, 0xc3, 0x6d, 0xb1, 0x83, 0xaf, 0xae, 0x95, 0x49, 0x7e,
	0xfc, 0x02, 0xec, 0x7f, 0xb8, 0xb6, 0xed, 0xae, 0x64, 0x79, 0x97, 0xfd, 0x5d, 0x27, 0xe6, 0xfb,
	0x7e, 0xa9, 0xec, 0x6f, 0xfb, 0x36, 0xf7, 0x76, 0x8d, 0x64, 0x92, 0x7b, 0x70, 0x04, 0xfc, 0x96,
	0xd5, 0x77, 0x6f, 0xe5, 0xde, 0xd6, 0xb1, 0x6f, 0x7c, 0x9b, 0x9d, 0x5f, 0x90, 0x32, 0xc9, 0x4f,
	0x69, 0x32, 0x43, 0x67, 0x3a, 0x43, 0x67, 0x31, 0x43, 0x78, 0xb4, 0x08, 0xcf, 0x16, 0xe1, 0xd5,
	0x22, 0x4c, 0x2c, 0xc2, 0x9b, 0x45, 0x78, 0xb7, 0xe8, 0x2c, 0x2c, 0xc2, 0xd3, 0x1c, 0x9d, 0xc9,
	0x1c, 0x9d, 0xe9, 0x1c, 0x9d, 0xab, 0x20, 0x8a, 0xcd, 0x4d, 0x36, 0xf0, 0x87, 0xe2, 0x2e, 0x90,
	0x7d, 0x6d, 0x28, 0x49, 0xa9, 0xd0, 0x0f, 0x22, 0x51, 0xfc, 0x81, 0xe2, 0xc9, 0x83, 0x32, 0xc2,
	0xa0, 0x52, 0x34, 0x4e, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0x3d, 0xe9, 0x70, 0x27, 0x02,
	0x00, 0x00,
}

func (this *SessionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionRequest)
	if !ok {
		that2, ok := that.(SessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *SessionReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionReply)
	if !ok {
		that2, ok := that.(SessionReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessID != that1.SessID {
		return false
	}
	return true
}
func (this *SendArtTicketSignatureRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendArtTicketSignatureRequest)
	if !ok {
		that2, ok := that.(SendArtTicketSignatureRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *SendArtTicketSignatureReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendArtTicketSignatureReply)
	if !ok {
		that2, ok := that.(SendArtTicketSignatureReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SessionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&supernode.SessionRequest{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&supernode.SessionReply{")
	s = append(s, "SessID: "+fmt.Sprintf("%#v", this.SessID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendArtTicketSignatureRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&supernode.SendArtTicketSignatureRequest{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendArtTicketSignatureReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&supernode.SendArtTicketSignatureReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRegisterArtwork(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintRegisterArtwork(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessID) > 0 {
		i -= len(m.SessID)
		copy(dAtA[i:], m.SessID)
		i = encodeVarintRegisterArtwork(dAtA, i, uint64(len(m.SessID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendArtTicketSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendArtTicketSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendArtTicketSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRegisterArtwork(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintRegisterArtwork(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendArtTicketSignatureReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendArtTicketSignatureReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendArtTicketSignatureReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRegisterArtwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegisterArtwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovRegisterArtwork(uint64(l))
	}
	return n
}

func (m *SessionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessID)
	if l > 0 {
		n += 1 + l + sovRegisterArtwork(uint64(l))
	}
	return n
}

func (m *SendArtTicketSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovRegisterArtwork(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRegisterArtwork(uint64(l))
	}
	return n
}

func (m *SendArtTicketSignatureReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRegisterArtwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegisterArtwork(x uint64) (n int) {
	return sovRegisterArtwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionRequest{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionReply{`,
		`SessID:` + fmt.Sprintf("%v", this.SessID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendArtTicketSignatureRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendArtTicketSignatureRequest{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendArtTicketSignatureReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendArtTicketSignatureReply{`,
		`}`,
	}, "")
	return s
}
func valueToStringRegisterArtwork(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegisterArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegisterArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegisterArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegisterArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegisterArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegisterArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendArtTicketSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegisterArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendArtTicketSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendArtTicketSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegisterArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegisterArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegisterArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendArtTicketSignatureReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegisterArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendArtTicketSignatureReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendArtTicketSignatureReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegisterArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegisterArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegisterArtwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegisterArtwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegisterArtwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegisterArtwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegisterArtwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegisterArtwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegisterArtwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegisterArtwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegisterArtwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegisterArtwork = fmt.Errorf("proto: unexpected end of group")
)
