// Copyright (c) 2021-2021 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: storage_challenge.proto

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageChallenge_Session_FullMethodName                          = "/supernode.StorageChallenge/Session"
	StorageChallenge_ProcessStorageChallenge_FullMethodName          = "/supernode.StorageChallenge/ProcessStorageChallenge"
	StorageChallenge_VerifyStorageChallenge_FullMethodName           = "/supernode.StorageChallenge/VerifyStorageChallenge"
	StorageChallenge_VerifyEvaluationResult_FullMethodName           = "/supernode.StorageChallenge/VerifyEvaluationResult"
	StorageChallenge_BroadcastStorageChallengeResult_FullMethodName  = "/supernode.StorageChallenge/BroadcastStorageChallengeResult"
	StorageChallenge_BroadcastStorageChallengeMetrics_FullMethodName = "/supernode.StorageChallenge/BroadcastStorageChallengeMetrics"
)

// StorageChallengeClient is the client API for StorageChallenge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageChallengeClient interface {
	Session(ctx context.Context, opts ...grpc.CallOption) (StorageChallenge_SessionClient, error)
	ProcessStorageChallenge(ctx context.Context, in *ProcessStorageChallengeRequest, opts ...grpc.CallOption) (*ProcessStorageChallengeReply, error)
	VerifyStorageChallenge(ctx context.Context, in *VerifyStorageChallengeRequest, opts ...grpc.CallOption) (*VerifyStorageChallengeReply, error)
	VerifyEvaluationResult(ctx context.Context, in *VerifyEvaluationResultRequest, opts ...grpc.CallOption) (*VerifyEvaluationResultReply, error)
	BroadcastStorageChallengeResult(ctx context.Context, in *BroadcastStorageChallengeRequest, opts ...grpc.CallOption) (*BroadcastStorageChallengeResponse, error)
	BroadcastStorageChallengeMetrics(ctx context.Context, in *BroadcastStorageChallengeMetricsRequest, opts ...grpc.CallOption) (*BroadcastStorageChallengeMetricsReply, error)
}

type storageChallengeClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageChallengeClient(cc grpc.ClientConnInterface) StorageChallengeClient {
	return &storageChallengeClient{cc}
}

func (c *storageChallengeClient) Session(ctx context.Context, opts ...grpc.CallOption) (StorageChallenge_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageChallenge_ServiceDesc.Streams[0], StorageChallenge_Session_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageChallengeSessionClient{stream}
	return x, nil
}

type StorageChallenge_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type storageChallengeSessionClient struct {
	grpc.ClientStream
}

func (x *storageChallengeSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageChallengeSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageChallengeClient) ProcessStorageChallenge(ctx context.Context, in *ProcessStorageChallengeRequest, opts ...grpc.CallOption) (*ProcessStorageChallengeReply, error) {
	out := new(ProcessStorageChallengeReply)
	err := c.cc.Invoke(ctx, StorageChallenge_ProcessStorageChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) VerifyStorageChallenge(ctx context.Context, in *VerifyStorageChallengeRequest, opts ...grpc.CallOption) (*VerifyStorageChallengeReply, error) {
	out := new(VerifyStorageChallengeReply)
	err := c.cc.Invoke(ctx, StorageChallenge_VerifyStorageChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) VerifyEvaluationResult(ctx context.Context, in *VerifyEvaluationResultRequest, opts ...grpc.CallOption) (*VerifyEvaluationResultReply, error) {
	out := new(VerifyEvaluationResultReply)
	err := c.cc.Invoke(ctx, StorageChallenge_VerifyEvaluationResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) BroadcastStorageChallengeResult(ctx context.Context, in *BroadcastStorageChallengeRequest, opts ...grpc.CallOption) (*BroadcastStorageChallengeResponse, error) {
	out := new(BroadcastStorageChallengeResponse)
	err := c.cc.Invoke(ctx, StorageChallenge_BroadcastStorageChallengeResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) BroadcastStorageChallengeMetrics(ctx context.Context, in *BroadcastStorageChallengeMetricsRequest, opts ...grpc.CallOption) (*BroadcastStorageChallengeMetricsReply, error) {
	out := new(BroadcastStorageChallengeMetricsReply)
	err := c.cc.Invoke(ctx, StorageChallenge_BroadcastStorageChallengeMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageChallengeServer is the server API for StorageChallenge service.
// All implementations must embed UnimplementedStorageChallengeServer
// for forward compatibility
type StorageChallengeServer interface {
	Session(StorageChallenge_SessionServer) error
	ProcessStorageChallenge(context.Context, *ProcessStorageChallengeRequest) (*ProcessStorageChallengeReply, error)
	VerifyStorageChallenge(context.Context, *VerifyStorageChallengeRequest) (*VerifyStorageChallengeReply, error)
	VerifyEvaluationResult(context.Context, *VerifyEvaluationResultRequest) (*VerifyEvaluationResultReply, error)
	BroadcastStorageChallengeResult(context.Context, *BroadcastStorageChallengeRequest) (*BroadcastStorageChallengeResponse, error)
	BroadcastStorageChallengeMetrics(context.Context, *BroadcastStorageChallengeMetricsRequest) (*BroadcastStorageChallengeMetricsReply, error)
	mustEmbedUnimplementedStorageChallengeServer()
}

// UnimplementedStorageChallengeServer must be embedded to have forward compatible implementations.
type UnimplementedStorageChallengeServer struct {
}

func (UnimplementedStorageChallengeServer) Session(StorageChallenge_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedStorageChallengeServer) ProcessStorageChallenge(context.Context, *ProcessStorageChallengeRequest) (*ProcessStorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) VerifyStorageChallenge(context.Context, *VerifyStorageChallengeRequest) (*VerifyStorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) VerifyEvaluationResult(context.Context, *VerifyEvaluationResultRequest) (*VerifyEvaluationResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEvaluationResult not implemented")
}
func (UnimplementedStorageChallengeServer) BroadcastStorageChallengeResult(context.Context, *BroadcastStorageChallengeRequest) (*BroadcastStorageChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastStorageChallengeResult not implemented")
}
func (UnimplementedStorageChallengeServer) BroadcastStorageChallengeMetrics(context.Context, *BroadcastStorageChallengeMetricsRequest) (*BroadcastStorageChallengeMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastStorageChallengeMetrics not implemented")
}
func (UnimplementedStorageChallengeServer) mustEmbedUnimplementedStorageChallengeServer() {}

// UnsafeStorageChallengeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageChallengeServer will
// result in compilation errors.
type UnsafeStorageChallengeServer interface {
	mustEmbedUnimplementedStorageChallengeServer()
}

func RegisterStorageChallengeServer(s grpc.ServiceRegistrar, srv StorageChallengeServer) {
	s.RegisterService(&StorageChallenge_ServiceDesc, srv)
}

func _StorageChallenge_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageChallengeServer).Session(&storageChallengeSessionServer{stream})
}

type StorageChallenge_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type storageChallengeSessionServer struct {
	grpc.ServerStream
}

func (x *storageChallengeSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageChallengeSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageChallenge_ProcessStorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).ProcessStorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageChallenge_ProcessStorageChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).ProcessStorageChallenge(ctx, req.(*ProcessStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_VerifyStorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).VerifyStorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageChallenge_VerifyStorageChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).VerifyStorageChallenge(ctx, req.(*VerifyStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_VerifyEvaluationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEvaluationResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).VerifyEvaluationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageChallenge_VerifyEvaluationResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).VerifyEvaluationResult(ctx, req.(*VerifyEvaluationResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_BroadcastStorageChallengeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).BroadcastStorageChallengeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageChallenge_BroadcastStorageChallengeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).BroadcastStorageChallengeResult(ctx, req.(*BroadcastStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_BroadcastStorageChallengeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastStorageChallengeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).BroadcastStorageChallengeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageChallenge_BroadcastStorageChallengeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).BroadcastStorageChallengeMetrics(ctx, req.(*BroadcastStorageChallengeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageChallenge_ServiceDesc is the grpc.ServiceDesc for StorageChallenge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageChallenge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.StorageChallenge",
	HandlerType: (*StorageChallengeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessStorageChallenge",
			Handler:    _StorageChallenge_ProcessStorageChallenge_Handler,
		},
		{
			MethodName: "VerifyStorageChallenge",
			Handler:    _StorageChallenge_VerifyStorageChallenge_Handler,
		},
		{
			MethodName: "VerifyEvaluationResult",
			Handler:    _StorageChallenge_VerifyEvaluationResult_Handler,
		},
		{
			MethodName: "BroadcastStorageChallengeResult",
			Handler:    _StorageChallenge_BroadcastStorageChallengeResult_Handler,
		},
		{
			MethodName: "BroadcastStorageChallengeMetrics",
			Handler:    _StorageChallenge_BroadcastStorageChallengeMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _StorageChallenge_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "storage_challenge.proto",
}
