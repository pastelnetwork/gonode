syntax = "proto3";

option go_package =
    "github.com/pastelnetwork/gonode/proto/supernode";

package supernode;

service ProcessUserdata {
  // Session informs primary supernode about its `nodeID` and `sessID` it wants
  // to connect to. The stream is used by the parties to inform each other about
  // the cancellation of the task.
  rpc Session(stream MDLSessionRequest) returns(stream MDLSessionReply);

  // SendUserdataToPrimary send signed userdata from other supernodes to primary
  // supernode
  rpc SendUserdataToPrimary(SuperNodeRequest) returns(SuperNodeReply);

  // SendUserdataToLeader send final userdata to supernode contain rqlite leader
  rpc SendUserdataToLeader(UserdataRequest) returns(SuperNodeReply);

  // StoreMetric store the metric that follow database scheme into rqlite db
  rpc StoreMetric(Metric) returns(SuperNodeReply);
}

message MDLSessionRequest { string nodeID = 1; }
message MDLSessionReply { string sessID = 1; }

message SuperNodeRequest {
  // UserdataHash represents UserdataProcessRequest's hash value, to make sure
  // UserdataProcessRequest's integrity
  string userdata_hash = 1;
  // UserdataResultHash represents UserdataReply's hash value, to make sure
  // walletnode's UserdataReply integrity
  string userdata_result_hash = 2;
  // SuperNodeSignature is the digital signature created by supernode for the
  // [userdata_hash+userdata_result_hash]
  string hash_signature = 3;
  // Supernode's pastelID of this supernode generate this SuperNodeRequest
  string supernode_pastelID = 4;
  // Supernode's nodeID that init this SuperNodeRequest
  string nodeID = 5;
}

message SuperNodeReply {
  // Result of the request is success or not
  int32 response_code = 1;
  // The detail of why result is success/fail, depend on response_code
  string detail = 2;
}

message UserdataRequest {
  // Real name of the user
  string realname = 1;
  // Facebook link of the user
  string facebook_link = 2;
  // Twitter link of the user
  string twitter_link = 3;
  // Native currency of user in ISO 4217 Alphabetic Code
  string native_currency = 4;
  // Location of the user
  string location = 5;
  // Primary language of the user
  string primary_language = 6;
  // The categories of user's work
  string categories = 7;
  // Biography of the user
  string biography = 8;

  message UserImageUpload {
    bytes content = 1;
    string filename = 2;
  }
  // Avatar image of the user
  UserImageUpload avatar_image = 9;
  // Cover photo of the user
  UserImageUpload cover_photo = 10;
  // Artist's PastelID
  string artist_pastelID = 11;
  // Epoch Timestamp of the request
  int64 timestamp = 12;
  // Previous block hash in the chain
  string previous_block_hash = 13;
  // UserdataHash represents UserdataProcessRequest's hash value, to make sure
  // UserdataProcessRequest's integrity
  string userdata_hash = 14;
  // Signature of the userdata_hash
  string signature = 15;
  // Command is database operation that will apply to the data
	string command = 16;
	// Data is the walletnode metric that will set/get to/from Metadata Layer
	bytes data = 17;
}

message Metric {
  // Signature of the pastelid that sign this metric data
	string signature = 1;
	// PastelID of the actor that sign this data
	string pastelID = 2;
  // Command the the predefine database operation name 
  string command = 3;
  // Data is the general structure accept many kind of metric, send as byte stream in protobuf and will be marshal at receiver
  bytes data = 4;
}