// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: supernode/process_userdata_supernode.proto

package supernode

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SuperNodeRequest struct {
	// UserdataHash represents UserdataProcessRequest's hash value, to make sure
	// UserdataProcessRequest's integrity
	UserdataHash string `protobuf:"bytes,1,opt,name=userdata_hash,json=userdataHash,proto3" json:"userdata_hash,omitempty"`
	// UserdataResultHash represents UserdataReply's hash value, to make sure
	// walletnode's UserdataReply integrity
	UserdataResultHash string `protobuf:"bytes,2,opt,name=userdata_result_hash,json=userdataResultHash,proto3" json:"userdata_result_hash,omitempty"`
	// SuperNodeSignature is the digital signature created by supernode for the
	// [userdata_hash+userdata_result_hash]
	HashSignature string `protobuf:"bytes,3,opt,name=hash_signature,json=hashSignature,proto3" json:"hash_signature,omitempty"`
	// Supernode's pastelID of this supernode generate this SuperNodeRequest
	SupernodePastelID string `protobuf:"bytes,4,opt,name=supernode_pastelID,json=supernodePastelID,proto3" json:"supernode_pastelID,omitempty"`
	// Supernode's nodeID that init this SuperNodeRequest
	NodeID string `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *SuperNodeRequest) Reset()      { *m = SuperNodeRequest{} }
func (*SuperNodeRequest) ProtoMessage() {}
func (*SuperNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e777ee723cc4ed0, []int{0}
}
func (m *SuperNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperNodeRequest.Merge(m, src)
}
func (m *SuperNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuperNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuperNodeRequest proto.InternalMessageInfo

func (m *SuperNodeRequest) GetUserdataHash() string {
	if m != nil {
		return m.UserdataHash
	}
	return ""
}

func (m *SuperNodeRequest) GetUserdataResultHash() string {
	if m != nil {
		return m.UserdataResultHash
	}
	return ""
}

func (m *SuperNodeRequest) GetHashSignature() string {
	if m != nil {
		return m.HashSignature
	}
	return ""
}

func (m *SuperNodeRequest) GetSupernodePastelID() string {
	if m != nil {
		return m.SupernodePastelID
	}
	return ""
}

func (m *SuperNodeRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type SuperNodeReply struct {
	// Result of the request is success or not
	ResponseCode int32 `protobuf:"varint,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *SuperNodeReply) Reset()      { *m = SuperNodeReply{} }
func (*SuperNodeReply) ProtoMessage() {}
func (*SuperNodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e777ee723cc4ed0, []int{1}
}
func (m *SuperNodeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperNodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperNodeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperNodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperNodeReply.Merge(m, src)
}
func (m *SuperNodeReply) XXX_Size() int {
	return m.Size()
}
func (m *SuperNodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperNodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SuperNodeReply proto.InternalMessageInfo

func (m *SuperNodeReply) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *SuperNodeReply) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type UserdataRequest struct {
	// Real name of the user
	RealName string `protobuf:"bytes,1,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	// Facebook link of the user
	FacebookLink string `protobuf:"bytes,2,opt,name=facebook_link,json=facebookLink,proto3" json:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink string `protobuf:"bytes,3,opt,name=twitter_link,json=twitterLink,proto3" json:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency string `protobuf:"bytes,4,opt,name=native_currency,json=nativeCurrency,proto3" json:"native_currency,omitempty"`
	// Location of the user
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// Primary language of the user
	PrimaryLanguage string `protobuf:"bytes,6,opt,name=primary_language,json=primaryLanguage,proto3" json:"primary_language,omitempty"`
	// The categories of user's work
	Categories string `protobuf:"bytes,7,opt,name=categories,proto3" json:"categories,omitempty"`
	// Biography of the user
	Biography string `protobuf:"bytes,8,opt,name=biography,proto3" json:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserdataRequest_UserImageUpload `protobuf:"bytes,9,opt,name=avatar_image,json=avatarImage,proto3" json:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserdataRequest_UserImageUpload `protobuf:"bytes,10,opt,name=cover_photo,json=coverPhoto,proto3" json:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `protobuf:"bytes,11,opt,name=artist_pastelID,json=artistPastelID,proto3" json:"artist_pastelID,omitempty"`
	// Epoch Timestamp of the request
	Timestamp int64 `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Previous block hash in the chain
	PreviousBlockHash string `protobuf:"bytes,13,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	// UserdataHash represents UserdataProcessRequest's hash value, to make sure
	// UserdataProcessRequest's integrity
	UserdataHash string `protobuf:"bytes,14,opt,name=userdata_hash,json=userdataHash,proto3" json:"userdata_hash,omitempty"`
	// Signature of the userdata_hash
	Signature string `protobuf:"bytes,15,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *UserdataRequest) Reset()      { *m = UserdataRequest{} }
func (*UserdataRequest) ProtoMessage() {}
func (*UserdataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e777ee723cc4ed0, []int{2}
}
func (m *UserdataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserdataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserdataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserdataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserdataRequest.Merge(m, src)
}
func (m *UserdataRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserdataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserdataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserdataRequest proto.InternalMessageInfo

func (m *UserdataRequest) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *UserdataRequest) GetFacebookLink() string {
	if m != nil {
		return m.FacebookLink
	}
	return ""
}

func (m *UserdataRequest) GetTwitterLink() string {
	if m != nil {
		return m.TwitterLink
	}
	return ""
}

func (m *UserdataRequest) GetNativeCurrency() string {
	if m != nil {
		return m.NativeCurrency
	}
	return ""
}

func (m *UserdataRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *UserdataRequest) GetPrimaryLanguage() string {
	if m != nil {
		return m.PrimaryLanguage
	}
	return ""
}

func (m *UserdataRequest) GetCategories() string {
	if m != nil {
		return m.Categories
	}
	return ""
}

func (m *UserdataRequest) GetBiography() string {
	if m != nil {
		return m.Biography
	}
	return ""
}

func (m *UserdataRequest) GetAvatarImage() *UserdataRequest_UserImageUpload {
	if m != nil {
		return m.AvatarImage
	}
	return nil
}

func (m *UserdataRequest) GetCoverPhoto() *UserdataRequest_UserImageUpload {
	if m != nil {
		return m.CoverPhoto
	}
	return nil
}

func (m *UserdataRequest) GetArtistPastelID() string {
	if m != nil {
		return m.ArtistPastelID
	}
	return ""
}

func (m *UserdataRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UserdataRequest) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *UserdataRequest) GetUserdataHash() string {
	if m != nil {
		return m.UserdataHash
	}
	return ""
}

func (m *UserdataRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type UserdataRequest_UserImageUpload struct {
	Content  []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (m *UserdataRequest_UserImageUpload) Reset()      { *m = UserdataRequest_UserImageUpload{} }
func (*UserdataRequest_UserImageUpload) ProtoMessage() {}
func (*UserdataRequest_UserImageUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e777ee723cc4ed0, []int{2, 0}
}
func (m *UserdataRequest_UserImageUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserdataRequest_UserImageUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserdataRequest_UserImageUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserdataRequest_UserImageUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserdataRequest_UserImageUpload.Merge(m, src)
}
func (m *UserdataRequest_UserImageUpload) XXX_Size() int {
	return m.Size()
}
func (m *UserdataRequest_UserImageUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_UserdataRequest_UserImageUpload.DiscardUnknown(m)
}

var xxx_messageInfo_UserdataRequest_UserImageUpload proto.InternalMessageInfo

func (m *UserdataRequest_UserImageUpload) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UserdataRequest_UserImageUpload) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func init() {
	proto.RegisterType((*SuperNodeRequest)(nil), "supernode.SuperNodeRequest")
	proto.RegisterType((*SuperNodeReply)(nil), "supernode.SuperNodeReply")
	proto.RegisterType((*UserdataRequest)(nil), "supernode.UserdataRequest")
	proto.RegisterType((*UserdataRequest_UserImageUpload)(nil), "supernode.UserdataRequest.UserImageUpload")
}

func init() {
	proto.RegisterFile("supernode/process_userdata_supernode.proto", fileDescriptor_3e777ee723cc4ed0)
}

var fileDescriptor_3e777ee723cc4ed0 = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xbf, 0x7e, 0xfd, 0xc9, 0x24, 0x4d, 0xca, 0x50, 0xc0, 0x4d, 0x2b, 0x2b, 0x14, 0x21,
	0x42, 0x25, 0x92, 0xaa, 0x3c, 0x01, 0x6d, 0x25, 0xa8, 0x68, 0x4b, 0x94, 0xd0, 0x0d, 0x1b, 0x6b,
	0x62, 0xdf, 0x3a, 0xa3, 0x38, 0x1e, 0x33, 0x33, 0x4e, 0x95, 0x1d, 0x8f, 0xc0, 0x63, 0xf0, 0x1e,
	0x6c, 0x58, 0x76, 0x47, 0x97, 0x34, 0xdd, 0xb0, 0xec, 0x82, 0x07, 0x40, 0x33, 0x63, 0x3b, 0xa1,
	0x14, 0x24, 0x96, 0xf7, 0x9c, 0x73, 0xef, 0xf8, 0x1e, 0x9f, 0x19, 0xb4, 0x25, 0x92, 0x18, 0x78,
	0xc4, 0x7c, 0x68, 0xc5, 0x9c, 0x79, 0x20, 0x84, 0x9b, 0x08, 0xe0, 0x3e, 0x91, 0xc4, 0xcd, 0xa9,
	0x66, 0xcc, 0x99, 0x64, 0xb8, 0x98, 0x03, 0xb5, 0xfa, 0xb4, 0x8d, 0x43, 0x40, 0x85, 0x04, 0xee,
	0x12, 0x2e, 0xcf, 0x18, 0x1f, 0x18, 0xf1, 0xe6, 0x57, 0x0b, 0xad, 0x74, 0x95, 0xe8, 0x98, 0xf9,
	0xd0, 0x81, 0xf7, 0x09, 0x08, 0x89, 0x1f, 0xa1, 0xe5, 0x7c, 0x7a, 0x9f, 0x88, 0xbe, 0x6d, 0xd5,
	0xad, 0x46, 0xb1, 0x53, 0xce, 0xc0, 0x57, 0x44, 0xf4, 0xf1, 0x36, 0x5a, 0xcd, 0x45, 0x1c, 0x44,
	0x12, 0x4a, 0xa3, 0xfd, 0x4f, 0x6b, 0x71, 0xc6, 0x75, 0x34, 0xa5, 0x3b, 0x1e, 0xa3, 0x8a, 0x52,
	0xb8, 0x82, 0x06, 0x11, 0x91, 0x09, 0x07, 0x7b, 0x4e, 0x6b, 0x97, 0x15, 0xda, 0xcd, 0x40, 0xfc,
	0x0c, 0xe1, 0xfc, 0xb3, 0xdd, 0x98, 0x08, 0x09, 0xe1, 0xc1, 0xbe, 0xfd, 0xbf, 0x96, 0xde, 0xc9,
	0x99, 0x76, 0x4a, 0xe0, 0xfb, 0x68, 0x41, 0xd5, 0x07, 0xfb, 0xf6, 0xbc, 0x96, 0xa4, 0xd5, 0xe6,
	0x11, 0xaa, 0xcc, 0x2c, 0x16, 0x87, 0x63, 0xb5, 0x16, 0x07, 0x11, 0xb3, 0x48, 0x80, 0xeb, 0x31,
	0x1f, 0xf4, 0x5a, 0xf3, 0x9d, 0x72, 0x06, 0xee, 0x31, 0x1f, 0xd4, 0x38, 0x1f, 0x24, 0xa1, 0x61,
	0xba, 0x48, 0x5a, 0x6d, 0x7e, 0x9e, 0x47, 0xd5, 0x93, 0x7c, 0x27, 0xe3, 0xd3, 0x3a, 0x2a, 0x72,
	0x20, 0xa1, 0x1b, 0x91, 0x21, 0xa4, 0x1e, 0x2d, 0x29, 0xe0, 0x98, 0x0c, 0x41, 0x9d, 0x76, 0x4a,
	0x3c, 0xe8, 0x31, 0x36, 0x70, 0x43, 0x1a, 0x0d, 0xd2, 0x79, 0xe5, 0x0c, 0x3c, 0xa4, 0xd1, 0x00,
	0x3f, 0x44, 0x65, 0x79, 0x46, 0xa5, 0xfa, 0x2f, 0x5a, 0x63, 0x0c, 0x29, 0xa5, 0x98, 0x96, 0x3c,
	0x41, 0xd5, 0x88, 0x48, 0x3a, 0x02, 0xd7, 0x4b, 0x38, 0x87, 0xc8, 0x1b, 0xa7, 0x5e, 0x54, 0x0c,
	0xbc, 0x97, 0xa2, 0xb8, 0x86, 0x96, 0x42, 0xe6, 0x11, 0x49, 0x59, 0x94, 0x5a, 0x91, 0xd7, 0xf8,
	0x29, 0x5a, 0x89, 0x39, 0x1d, 0x12, 0x3e, 0x76, 0x43, 0x12, 0x05, 0x09, 0x09, 0xc0, 0x5e, 0xd0,
	0x9a, 0x6a, 0x8a, 0x1f, 0xa6, 0x30, 0x76, 0x10, 0xf2, 0x88, 0x84, 0x80, 0x71, 0x0a, 0xc2, 0x5e,
	0xd4, 0xa2, 0x19, 0x04, 0x6f, 0xa0, 0x62, 0x8f, 0xb2, 0x80, 0x93, 0xb8, 0x3f, 0xb6, 0x97, 0x34,
	0x3d, 0x05, 0xf0, 0x11, 0x2a, 0x93, 0x11, 0x91, 0x84, 0xbb, 0x74, 0xa8, 0x0e, 0x29, 0xd6, 0xad,
	0x46, 0x69, 0x67, 0xab, 0x39, 0x0d, 0xe9, 0x0d, 0x13, 0x75, 0x7d, 0xa0, 0xb4, 0x27, 0x71, 0xc8,
	0x88, 0xdf, 0x29, 0x99, 0x7e, 0x0d, 0xe1, 0xd7, 0xa8, 0xe4, 0xb1, 0x11, 0x70, 0x37, 0xee, 0x33,
	0xc9, 0x6c, 0xf4, 0xcf, 0xd3, 0x90, 0x6e, 0x6f, 0xab, 0x6e, 0xe5, 0x24, 0xe1, 0x92, 0x0a, 0x39,
	0x4d, 0x55, 0xc9, 0x38, 0x69, 0xe0, 0x3c, 0x52, 0x1b, 0xa8, 0x28, 0xe9, 0x10, 0x84, 0x24, 0xc3,
	0xd8, 0x2e, 0xd7, 0xad, 0xc6, 0x5c, 0x67, 0x0a, 0xe0, 0x26, 0xba, 0x1b, 0x73, 0x18, 0x51, 0x96,
	0x08, 0xb7, 0x17, 0x32, 0x6f, 0x60, 0x72, 0xbf, 0x6c, 0x02, 0x9a, 0x51, 0xbb, 0x8a, 0xd1, 0xb1,
	0xff, 0xed, 0x36, 0x55, 0x6e, 0xb9, 0x4d, 0x1b, 0xa8, 0x38, 0xbd, 0x16, 0x55, 0xe3, 0x6a, 0x0e,
	0xd4, 0x5e, 0x9a, 0xec, 0xcd, 0x2c, 0x86, 0x6d, 0xb4, 0xe8, 0xb1, 0x48, 0x42, 0x24, 0x75, 0xf2,
	0xca, 0x9d, 0xac, 0x54, 0x39, 0x38, 0xa5, 0x21, 0xe8, 0x50, 0x9a, 0xcc, 0xe5, 0xf5, 0xce, 0x0f,
	0x0b, 0x55, 0xdb, 0xe6, 0x01, 0xc9, 0x9c, 0xc3, 0x2f, 0xd0, 0x62, 0x17, 0x84, 0x50, 0x31, 0x59,
	0x9b, 0x71, 0x36, 0xc5, 0x52, 0x63, 0x6b, 0x0f, 0x6e, 0xa3, 0xe2, 0x70, 0xdc, 0xb0, 0xb6, 0x2d,
	0xfc, 0x06, 0xdd, 0xeb, 0x42, 0xe4, 0x67, 0x23, 0xdf, 0xb2, 0xb6, 0x09, 0x15, 0x5e, 0x9f, 0xed,
	0xba, 0xf1, 0xcc, 0xd4, 0xd6, 0x6e, 0x27, 0xd5, 0x55, 0x3d, 0x42, 0xab, 0xbf, 0x0e, 0x3c, 0x04,
	0xe2, 0x03, 0xc7, 0xb5, 0x3f, 0xff, 0xfa, 0xbf, 0x8c, 0xdb, 0x85, 0xf3, 0x4b, 0xa7, 0x70, 0x71,
	0xe9, 0x14, 0xae, 0x2f, 0x1d, 0xeb, 0xc3, 0xc4, 0xb1, 0x3e, 0x4d, 0x1c, 0xeb, 0xcb, 0xc4, 0xb1,
	0xce, 0x27, 0x8e, 0xf5, 0x6d, 0xe2, 0x58, 0xdf, 0x27, 0x4e, 0xe1, 0x7a, 0xe2, 0x58, 0x1f, 0xaf,
	0x9c, 0xc2, 0xf9, 0x95, 0x53, 0xb8, 0xb8, 0x72, 0x0a, 0xef, 0x5a, 0x01, 0x95, 0xfd, 0xa4, 0xd7,
	0xf4, 0xd8, 0xb0, 0x65, 0x12, 0x13, 0x81, 0x7e, 0x3b, 0x5b, 0x01, 0xcb, 0x9e, 0x62, 0xc9, 0x5a,
	0xf9, 0xa9, 0xbd, 0x05, 0x0d, 0x3c, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xd0, 0x35, 0x83,
	0xae, 0x05, 0x00, 0x00,
}

func (this *SuperNodeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperNodeRequest)
	if !ok {
		that2, ok := that.(SuperNodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserdataHash != that1.UserdataHash {
		return false
	}
	if this.UserdataResultHash != that1.UserdataResultHash {
		return false
	}
	if this.HashSignature != that1.HashSignature {
		return false
	}
	if this.SupernodePastelID != that1.SupernodePastelID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *SuperNodeReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperNodeReply)
	if !ok {
		that2, ok := that.(SuperNodeReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResponseCode != that1.ResponseCode {
		return false
	}
	if this.Detail != that1.Detail {
		return false
	}
	return true
}
func (this *UserdataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserdataRequest)
	if !ok {
		that2, ok := that.(UserdataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RealName != that1.RealName {
		return false
	}
	if this.FacebookLink != that1.FacebookLink {
		return false
	}
	if this.TwitterLink != that1.TwitterLink {
		return false
	}
	if this.NativeCurrency != that1.NativeCurrency {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if this.PrimaryLanguage != that1.PrimaryLanguage {
		return false
	}
	if this.Categories != that1.Categories {
		return false
	}
	if this.Biography != that1.Biography {
		return false
	}
	if !this.AvatarImage.Equal(that1.AvatarImage) {
		return false
	}
	if !this.CoverPhoto.Equal(that1.CoverPhoto) {
		return false
	}
	if this.ArtistPastelID != that1.ArtistPastelID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.PreviousBlockHash != that1.PreviousBlockHash {
		return false
	}
	if this.UserdataHash != that1.UserdataHash {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	return true
}
func (this *UserdataRequest_UserImageUpload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserdataRequest_UserImageUpload)
	if !ok {
		that2, ok := that.(UserdataRequest_UserImageUpload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	if this.Filename != that1.Filename {
		return false
	}
	return true
}
func (this *SuperNodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&supernode.SuperNodeRequest{")
	s = append(s, "UserdataHash: "+fmt.Sprintf("%#v", this.UserdataHash)+",\n")
	s = append(s, "UserdataResultHash: "+fmt.Sprintf("%#v", this.UserdataResultHash)+",\n")
	s = append(s, "HashSignature: "+fmt.Sprintf("%#v", this.HashSignature)+",\n")
	s = append(s, "SupernodePastelID: "+fmt.Sprintf("%#v", this.SupernodePastelID)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuperNodeReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&supernode.SuperNodeReply{")
	s = append(s, "ResponseCode: "+fmt.Sprintf("%#v", this.ResponseCode)+",\n")
	s = append(s, "Detail: "+fmt.Sprintf("%#v", this.Detail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserdataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&supernode.UserdataRequest{")
	s = append(s, "RealName: "+fmt.Sprintf("%#v", this.RealName)+",\n")
	s = append(s, "FacebookLink: "+fmt.Sprintf("%#v", this.FacebookLink)+",\n")
	s = append(s, "TwitterLink: "+fmt.Sprintf("%#v", this.TwitterLink)+",\n")
	s = append(s, "NativeCurrency: "+fmt.Sprintf("%#v", this.NativeCurrency)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "PrimaryLanguage: "+fmt.Sprintf("%#v", this.PrimaryLanguage)+",\n")
	s = append(s, "Categories: "+fmt.Sprintf("%#v", this.Categories)+",\n")
	s = append(s, "Biography: "+fmt.Sprintf("%#v", this.Biography)+",\n")
	if this.AvatarImage != nil {
		s = append(s, "AvatarImage: "+fmt.Sprintf("%#v", this.AvatarImage)+",\n")
	}
	if this.CoverPhoto != nil {
		s = append(s, "CoverPhoto: "+fmt.Sprintf("%#v", this.CoverPhoto)+",\n")
	}
	s = append(s, "ArtistPastelID: "+fmt.Sprintf("%#v", this.ArtistPastelID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "PreviousBlockHash: "+fmt.Sprintf("%#v", this.PreviousBlockHash)+",\n")
	s = append(s, "UserdataHash: "+fmt.Sprintf("%#v", this.UserdataHash)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserdataRequest_UserImageUpload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&supernode.UserdataRequest_UserImageUpload{")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProcessUserdataSupernode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SuperNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SupernodePastelID) > 0 {
		i -= len(m.SupernodePastelID)
		copy(dAtA[i:], m.SupernodePastelID)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.SupernodePastelID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HashSignature) > 0 {
		i -= len(m.HashSignature)
		copy(dAtA[i:], m.HashSignature)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.HashSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserdataResultHash) > 0 {
		i -= len(m.UserdataResultHash)
		copy(dAtA[i:], m.UserdataResultHash)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.UserdataResultHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserdataHash) > 0 {
		i -= len(m.UserdataHash)
		copy(dAtA[i:], m.UserdataHash)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.UserdataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperNodeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperNodeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperNodeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResponseCode != 0 {
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(m.ResponseCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserdataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserdataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserdataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.UserdataHash) > 0 {
		i -= len(m.UserdataHash)
		copy(dAtA[i:], m.UserdataHash)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.UserdataHash)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PreviousBlockHash) > 0 {
		i -= len(m.PreviousBlockHash)
		copy(dAtA[i:], m.PreviousBlockHash)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.PreviousBlockHash)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Timestamp != 0 {
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ArtistPastelID) > 0 {
		i -= len(m.ArtistPastelID)
		copy(dAtA[i:], m.ArtistPastelID)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.ArtistPastelID)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CoverPhoto != nil {
		{
			size, err := m.CoverPhoto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.AvatarImage != nil {
		{
			size, err := m.AvatarImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Biography) > 0 {
		i -= len(m.Biography)
		copy(dAtA[i:], m.Biography)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Biography)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Categories) > 0 {
		i -= len(m.Categories)
		copy(dAtA[i:], m.Categories)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Categories)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrimaryLanguage) > 0 {
		i -= len(m.PrimaryLanguage)
		copy(dAtA[i:], m.PrimaryLanguage)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.PrimaryLanguage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NativeCurrency) > 0 {
		i -= len(m.NativeCurrency)
		copy(dAtA[i:], m.NativeCurrency)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.NativeCurrency)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TwitterLink) > 0 {
		i -= len(m.TwitterLink)
		copy(dAtA[i:], m.TwitterLink)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.TwitterLink)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FacebookLink) > 0 {
		i -= len(m.FacebookLink)
		copy(dAtA[i:], m.FacebookLink)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.FacebookLink)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RealName) > 0 {
		i -= len(m.RealName)
		copy(dAtA[i:], m.RealName)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.RealName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserdataRequest_UserImageUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserdataRequest_UserImageUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserdataRequest_UserImageUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintProcessUserdataSupernode(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcessUserdataSupernode(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcessUserdataSupernode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuperNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserdataHash)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.UserdataResultHash)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.HashSignature)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.SupernodePastelID)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	return n
}

func (m *SuperNodeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseCode != 0 {
		n += 1 + sovProcessUserdataSupernode(uint64(m.ResponseCode))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	return n
}

func (m *UserdataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RealName)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.FacebookLink)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.TwitterLink)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.NativeCurrency)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.PrimaryLanguage)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.Categories)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.Biography)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	if m.AvatarImage != nil {
		l = m.AvatarImage.Size()
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	if m.CoverPhoto != nil {
		l = m.CoverPhoto.Size()
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.ArtistPastelID)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovProcessUserdataSupernode(uint64(m.Timestamp))
	}
	l = len(m.PreviousBlockHash)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.UserdataHash)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	return n
}

func (m *UserdataRequest_UserImageUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovProcessUserdataSupernode(uint64(l))
	}
	return n
}

func sovProcessUserdataSupernode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcessUserdataSupernode(x uint64) (n int) {
	return sovProcessUserdataSupernode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SuperNodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperNodeRequest{`,
		`UserdataHash:` + fmt.Sprintf("%v", this.UserdataHash) + `,`,
		`UserdataResultHash:` + fmt.Sprintf("%v", this.UserdataResultHash) + `,`,
		`HashSignature:` + fmt.Sprintf("%v", this.HashSignature) + `,`,
		`SupernodePastelID:` + fmt.Sprintf("%v", this.SupernodePastelID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuperNodeReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuperNodeReply{`,
		`ResponseCode:` + fmt.Sprintf("%v", this.ResponseCode) + `,`,
		`Detail:` + fmt.Sprintf("%v", this.Detail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserdataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserdataRequest{`,
		`RealName:` + fmt.Sprintf("%v", this.RealName) + `,`,
		`FacebookLink:` + fmt.Sprintf("%v", this.FacebookLink) + `,`,
		`TwitterLink:` + fmt.Sprintf("%v", this.TwitterLink) + `,`,
		`NativeCurrency:` + fmt.Sprintf("%v", this.NativeCurrency) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`PrimaryLanguage:` + fmt.Sprintf("%v", this.PrimaryLanguage) + `,`,
		`Categories:` + fmt.Sprintf("%v", this.Categories) + `,`,
		`Biography:` + fmt.Sprintf("%v", this.Biography) + `,`,
		`AvatarImage:` + strings.Replace(fmt.Sprintf("%v", this.AvatarImage), "UserdataRequest_UserImageUpload", "UserdataRequest_UserImageUpload", 1) + `,`,
		`CoverPhoto:` + strings.Replace(fmt.Sprintf("%v", this.CoverPhoto), "UserdataRequest_UserImageUpload", "UserdataRequest_UserImageUpload", 1) + `,`,
		`ArtistPastelID:` + fmt.Sprintf("%v", this.ArtistPastelID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`PreviousBlockHash:` + fmt.Sprintf("%v", this.PreviousBlockHash) + `,`,
		`UserdataHash:` + fmt.Sprintf("%v", this.UserdataHash) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserdataRequest_UserImageUpload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserdataRequest_UserImageUpload{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Filename:` + fmt.Sprintf("%v", this.Filename) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProcessUserdataSupernode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SuperNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessUserdataSupernode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserdataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserdataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserdataResultHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserdataResultHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupernodePastelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupernodePastelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessUserdataSupernode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperNodeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessUserdataSupernode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperNodeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperNodeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			m.ResponseCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessUserdataSupernode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserdataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessUserdataSupernode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserdataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserdataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FacebookLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FacebookLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitterLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwitterLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryLanguage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biography", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biography = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarImage == nil {
				m.AvatarImage = &UserdataRequest_UserImageUpload{}
			}
			if err := m.AvatarImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverPhoto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoverPhoto == nil {
				m.CoverPhoto = &UserdataRequest_UserImageUpload{}
			}
			if err := m.CoverPhoto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtistPastelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtistPastelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserdataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserdataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessUserdataSupernode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserdataRequest_UserImageUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcessUserdataSupernode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserImageUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserImageUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcessUserdataSupernode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcessUserdataSupernode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcessUserdataSupernode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcessUserdataSupernode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcessUserdataSupernode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcessUserdataSupernode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcessUserdataSupernode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcessUserdataSupernode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcessUserdataSupernode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcessUserdataSupernode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcessUserdataSupernode = fmt.Errorf("proto: unexpected end of group")
)
