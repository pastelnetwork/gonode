// Copyright (c) 2021-2021 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: healthcheck_challenge.proto

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HealthCheckChallenge_Session_FullMethodName                              = "/supernode.HealthCheckChallenge/Session"
	HealthCheckChallenge_ProcessHealthCheckChallenge_FullMethodName          = "/supernode.HealthCheckChallenge/ProcessHealthCheckChallenge"
	HealthCheckChallenge_VerifyHealthCheckChallenge_FullMethodName           = "/supernode.HealthCheckChallenge/VerifyHealthCheckChallenge"
	HealthCheckChallenge_VerifyHealthCheckEvaluationResult_FullMethodName    = "/supernode.HealthCheckChallenge/VerifyHealthCheckEvaluationResult"
	HealthCheckChallenge_BroadcastHealthCheckChallengeResult_FullMethodName  = "/supernode.HealthCheckChallenge/BroadcastHealthCheckChallengeResult"
	HealthCheckChallenge_BroadcastHealthCheckChallengeMetrics_FullMethodName = "/supernode.HealthCheckChallenge/BroadcastHealthCheckChallengeMetrics"
)

// HealthCheckChallengeClient is the client API for HealthCheckChallenge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckChallengeClient interface {
	Session(ctx context.Context, opts ...grpc.CallOption) (HealthCheckChallenge_SessionClient, error)
	ProcessHealthCheckChallenge(ctx context.Context, in *ProcessHealthCheckChallengeRequest, opts ...grpc.CallOption) (*ProcessHealthCheckChallengeReply, error)
	VerifyHealthCheckChallenge(ctx context.Context, in *VerifyHealthCheckChallengeRequest, opts ...grpc.CallOption) (*VerifyHealthCheckChallengeReply, error)
	VerifyHealthCheckEvaluationResult(ctx context.Context, in *VerifyHealthCheckEvaluationResultRequest, opts ...grpc.CallOption) (*VerifyHealthCheckEvaluationResultReply, error)
	BroadcastHealthCheckChallengeResult(ctx context.Context, in *BroadcastHealthCheckChallengeRequest, opts ...grpc.CallOption) (*BroadcastHealthCheckChallengeResponse, error)
	BroadcastHealthCheckChallengeMetrics(ctx context.Context, in *BroadcastHealthCheckChallengeMetricsRequest, opts ...grpc.CallOption) (*BroadcastHealthCheckChallengeMetricsReply, error)
}

type healthCheckChallengeClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckChallengeClient(cc grpc.ClientConnInterface) HealthCheckChallengeClient {
	return &healthCheckChallengeClient{cc}
}

func (c *healthCheckChallengeClient) Session(ctx context.Context, opts ...grpc.CallOption) (HealthCheckChallenge_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheckChallenge_ServiceDesc.Streams[0], HealthCheckChallenge_Session_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckChallengeSessionClient{stream}
	return x, nil
}

type HealthCheckChallenge_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type healthCheckChallengeSessionClient struct {
	grpc.ClientStream
}

func (x *healthCheckChallengeSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckChallengeSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckChallengeClient) ProcessHealthCheckChallenge(ctx context.Context, in *ProcessHealthCheckChallengeRequest, opts ...grpc.CallOption) (*ProcessHealthCheckChallengeReply, error) {
	out := new(ProcessHealthCheckChallengeReply)
	err := c.cc.Invoke(ctx, HealthCheckChallenge_ProcessHealthCheckChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckChallengeClient) VerifyHealthCheckChallenge(ctx context.Context, in *VerifyHealthCheckChallengeRequest, opts ...grpc.CallOption) (*VerifyHealthCheckChallengeReply, error) {
	out := new(VerifyHealthCheckChallengeReply)
	err := c.cc.Invoke(ctx, HealthCheckChallenge_VerifyHealthCheckChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckChallengeClient) VerifyHealthCheckEvaluationResult(ctx context.Context, in *VerifyHealthCheckEvaluationResultRequest, opts ...grpc.CallOption) (*VerifyHealthCheckEvaluationResultReply, error) {
	out := new(VerifyHealthCheckEvaluationResultReply)
	err := c.cc.Invoke(ctx, HealthCheckChallenge_VerifyHealthCheckEvaluationResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckChallengeClient) BroadcastHealthCheckChallengeResult(ctx context.Context, in *BroadcastHealthCheckChallengeRequest, opts ...grpc.CallOption) (*BroadcastHealthCheckChallengeResponse, error) {
	out := new(BroadcastHealthCheckChallengeResponse)
	err := c.cc.Invoke(ctx, HealthCheckChallenge_BroadcastHealthCheckChallengeResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckChallengeClient) BroadcastHealthCheckChallengeMetrics(ctx context.Context, in *BroadcastHealthCheckChallengeMetricsRequest, opts ...grpc.CallOption) (*BroadcastHealthCheckChallengeMetricsReply, error) {
	out := new(BroadcastHealthCheckChallengeMetricsReply)
	err := c.cc.Invoke(ctx, HealthCheckChallenge_BroadcastHealthCheckChallengeMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckChallengeServer is the server API for HealthCheckChallenge service.
// All implementations must embed UnimplementedHealthCheckChallengeServer
// for forward compatibility
type HealthCheckChallengeServer interface {
	Session(HealthCheckChallenge_SessionServer) error
	ProcessHealthCheckChallenge(context.Context, *ProcessHealthCheckChallengeRequest) (*ProcessHealthCheckChallengeReply, error)
	VerifyHealthCheckChallenge(context.Context, *VerifyHealthCheckChallengeRequest) (*VerifyHealthCheckChallengeReply, error)
	VerifyHealthCheckEvaluationResult(context.Context, *VerifyHealthCheckEvaluationResultRequest) (*VerifyHealthCheckEvaluationResultReply, error)
	BroadcastHealthCheckChallengeResult(context.Context, *BroadcastHealthCheckChallengeRequest) (*BroadcastHealthCheckChallengeResponse, error)
	BroadcastHealthCheckChallengeMetrics(context.Context, *BroadcastHealthCheckChallengeMetricsRequest) (*BroadcastHealthCheckChallengeMetricsReply, error)
	mustEmbedUnimplementedHealthCheckChallengeServer()
}

// UnimplementedHealthCheckChallengeServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckChallengeServer struct {
}

func (UnimplementedHealthCheckChallengeServer) Session(HealthCheckChallenge_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedHealthCheckChallengeServer) ProcessHealthCheckChallenge(context.Context, *ProcessHealthCheckChallengeRequest) (*ProcessHealthCheckChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessHealthCheckChallenge not implemented")
}
func (UnimplementedHealthCheckChallengeServer) VerifyHealthCheckChallenge(context.Context, *VerifyHealthCheckChallengeRequest) (*VerifyHealthCheckChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyHealthCheckChallenge not implemented")
}
func (UnimplementedHealthCheckChallengeServer) VerifyHealthCheckEvaluationResult(context.Context, *VerifyHealthCheckEvaluationResultRequest) (*VerifyHealthCheckEvaluationResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyHealthCheckEvaluationResult not implemented")
}
func (UnimplementedHealthCheckChallengeServer) BroadcastHealthCheckChallengeResult(context.Context, *BroadcastHealthCheckChallengeRequest) (*BroadcastHealthCheckChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastHealthCheckChallengeResult not implemented")
}
func (UnimplementedHealthCheckChallengeServer) BroadcastHealthCheckChallengeMetrics(context.Context, *BroadcastHealthCheckChallengeMetricsRequest) (*BroadcastHealthCheckChallengeMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastHealthCheckChallengeMetrics not implemented")
}
func (UnimplementedHealthCheckChallengeServer) mustEmbedUnimplementedHealthCheckChallengeServer() {}

// UnsafeHealthCheckChallengeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckChallengeServer will
// result in compilation errors.
type UnsafeHealthCheckChallengeServer interface {
	mustEmbedUnimplementedHealthCheckChallengeServer()
}

func RegisterHealthCheckChallengeServer(s grpc.ServiceRegistrar, srv HealthCheckChallengeServer) {
	s.RegisterService(&HealthCheckChallenge_ServiceDesc, srv)
}

func _HealthCheckChallenge_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckChallengeServer).Session(&healthCheckChallengeSessionServer{stream})
}

type HealthCheckChallenge_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type healthCheckChallengeSessionServer struct {
	grpc.ServerStream
}

func (x *healthCheckChallengeSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckChallengeSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HealthCheckChallenge_ProcessHealthCheckChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessHealthCheckChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckChallengeServer).ProcessHealthCheckChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckChallenge_ProcessHealthCheckChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckChallengeServer).ProcessHealthCheckChallenge(ctx, req.(*ProcessHealthCheckChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckChallenge_VerifyHealthCheckChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyHealthCheckChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckChallengeServer).VerifyHealthCheckChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckChallenge_VerifyHealthCheckChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckChallengeServer).VerifyHealthCheckChallenge(ctx, req.(*VerifyHealthCheckChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckChallenge_VerifyHealthCheckEvaluationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyHealthCheckEvaluationResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckChallengeServer).VerifyHealthCheckEvaluationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckChallenge_VerifyHealthCheckEvaluationResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckChallengeServer).VerifyHealthCheckEvaluationResult(ctx, req.(*VerifyHealthCheckEvaluationResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckChallenge_BroadcastHealthCheckChallengeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastHealthCheckChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckChallengeServer).BroadcastHealthCheckChallengeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckChallenge_BroadcastHealthCheckChallengeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckChallengeServer).BroadcastHealthCheckChallengeResult(ctx, req.(*BroadcastHealthCheckChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckChallenge_BroadcastHealthCheckChallengeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastHealthCheckChallengeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckChallengeServer).BroadcastHealthCheckChallengeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckChallenge_BroadcastHealthCheckChallengeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckChallengeServer).BroadcastHealthCheckChallengeMetrics(ctx, req.(*BroadcastHealthCheckChallengeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheckChallenge_ServiceDesc is the grpc.ServiceDesc for HealthCheckChallenge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheckChallenge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.HealthCheckChallenge",
	HandlerType: (*HealthCheckChallengeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessHealthCheckChallenge",
			Handler:    _HealthCheckChallenge_ProcessHealthCheckChallenge_Handler,
		},
		{
			MethodName: "VerifyHealthCheckChallenge",
			Handler:    _HealthCheckChallenge_VerifyHealthCheckChallenge_Handler,
		},
		{
			MethodName: "VerifyHealthCheckEvaluationResult",
			Handler:    _HealthCheckChallenge_VerifyHealthCheckEvaluationResult_Handler,
		},
		{
			MethodName: "BroadcastHealthCheckChallengeResult",
			Handler:    _HealthCheckChallenge_BroadcastHealthCheckChallengeResult_Handler,
		},
		{
			MethodName: "BroadcastHealthCheckChallengeMetrics",
			Handler:    _HealthCheckChallenge_BroadcastHealthCheckChallengeMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _HealthCheckChallenge_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "healthcheck_challenge.proto",
}
