// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: hermes_p2p.proto

package hermes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HermesP2P_Retrieve_FullMethodName = "/hermes.HermesP2P/Retrieve"
	HermesP2P_Delete_FullMethodName   = "/hermes.HermesP2P/Delete"
)

// HermesP2PClient is the client API for HermesP2P service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HermesP2PClient interface {
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
}

type hermesP2PClient struct {
	cc grpc.ClientConnInterface
}

func NewHermesP2PClient(cc grpc.ClientConnInterface) HermesP2PClient {
	return &hermesP2PClient{cc}
}

func (c *hermesP2PClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error) {
	out := new(RetrieveReply)
	err := c.cc.Invoke(ctx, HermesP2P_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesP2PClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, HermesP2P_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HermesP2PServer is the server API for HermesP2P service.
// All implementations must embed UnimplementedHermesP2PServer
// for forward compatibility
type HermesP2PServer interface {
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	mustEmbedUnimplementedHermesP2PServer()
}

// UnimplementedHermesP2PServer must be embedded to have forward compatible implementations.
type UnimplementedHermesP2PServer struct {
}

func (UnimplementedHermesP2PServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedHermesP2PServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHermesP2PServer) mustEmbedUnimplementedHermesP2PServer() {}

// UnsafeHermesP2PServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HermesP2PServer will
// result in compilation errors.
type UnsafeHermesP2PServer interface {
	mustEmbedUnimplementedHermesP2PServer()
}

func RegisterHermesP2PServer(s grpc.ServiceRegistrar, srv HermesP2PServer) {
	s.RegisterService(&HermesP2P_ServiceDesc, srv)
}

func _HermesP2P_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesP2PServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesP2P_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesP2PServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermesP2P_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesP2PServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesP2P_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesP2PServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HermesP2P_ServiceDesc is the grpc.ServiceDesc for HermesP2P service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HermesP2P_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hermes.HermesP2P",
	HandlerType: (*HermesP2PServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrieve",
			Handler:    _HermesP2P_Retrieve_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HermesP2P_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hermes_p2p.proto",
}
