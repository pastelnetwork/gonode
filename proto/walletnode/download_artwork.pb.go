// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: walletnode/download_artwork.proto

package walletnode

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DownloadRequest struct {
	Txid      string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Ttxid     string `protobuf:"bytes,4,opt,name=ttxid,proto3" json:"ttxid,omitempty"`
}

func (m *DownloadRequest) Reset()      { *m = DownloadRequest{} }
func (*DownloadRequest) ProtoMessage() {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f450212de6ead528, []int{0}
}
func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *DownloadRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *DownloadRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *DownloadRequest) GetTtxid() string {
	if m != nil {
		return m.Ttxid
	}
	return ""
}

type DownloadReply struct {
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *DownloadReply) Reset()      { *m = DownloadReply{} }
func (*DownloadReply) ProtoMessage() {}
func (*DownloadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f450212de6ead528, []int{1}
}
func (m *DownloadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadReply.Merge(m, src)
}
func (m *DownloadReply) XXX_Size() int {
	return m.Size()
}
func (m *DownloadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadReply.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadReply proto.InternalMessageInfo

func (m *DownloadReply) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type DownloadThumbnailRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DownloadThumbnailRequest) Reset()      { *m = DownloadThumbnailRequest{} }
func (*DownloadThumbnailRequest) ProtoMessage() {}
func (*DownloadThumbnailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f450212de6ead528, []int{2}
}
func (m *DownloadThumbnailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadThumbnailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadThumbnailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadThumbnailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadThumbnailRequest.Merge(m, src)
}
func (m *DownloadThumbnailRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownloadThumbnailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadThumbnailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadThumbnailRequest proto.InternalMessageInfo

func (m *DownloadThumbnailRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DownloadThumbnailReply struct {
	Thumbnail []byte `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (m *DownloadThumbnailReply) Reset()      { *m = DownloadThumbnailReply{} }
func (*DownloadThumbnailReply) ProtoMessage() {}
func (*DownloadThumbnailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f450212de6ead528, []int{3}
}
func (m *DownloadThumbnailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadThumbnailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadThumbnailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadThumbnailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadThumbnailReply.Merge(m, src)
}
func (m *DownloadThumbnailReply) XXX_Size() int {
	return m.Size()
}
func (m *DownloadThumbnailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadThumbnailReply.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadThumbnailReply proto.InternalMessageInfo

func (m *DownloadThumbnailReply) GetThumbnail() []byte {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

func init() {
	proto.RegisterType((*DownloadRequest)(nil), "walletnode.DownloadRequest")
	proto.RegisterType((*DownloadReply)(nil), "walletnode.DownloadReply")
	proto.RegisterType((*DownloadThumbnailRequest)(nil), "walletnode.DownloadThumbnailRequest")
	proto.RegisterType((*DownloadThumbnailReply)(nil), "walletnode.DownloadThumbnailReply")
}

func init() { proto.RegisterFile("walletnode/download_artwork.proto", fileDescriptor_f450212de6ead528) }

var fileDescriptor_f450212de6ead528 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0xcd, 0xbc, 0xf6, 0x89, 0x1d, 0x14, 0x75, 0x10, 0x89, 0x55, 0x2e, 0x1a, 0x5d, 0xb8, 0x90,
	0xa4, 0x28, 0xb8, 0x57, 0xfa, 0x05, 0xc5, 0x95, 0x20, 0x32, 0x35, 0xd3, 0x36, 0x74, 0x92, 0x89,
	0xc9, 0x84, 0x98, 0x9d, 0x9f, 0xe0, 0x67, 0xf8, 0x05, 0x7e, 0x83, 0xcb, 0x2e, 0xbb, 0xb4, 0xd3,
	0x8d, 0xcb, 0x7e, 0x82, 0x64, 0xda, 0x38, 0x50, 0x0b, 0xee, 0xee, 0x9c, 0x73, 0xe6, 0x9e, 0x7b,
	0x0f, 0x17, 0x1f, 0xe7, 0x94, 0x73, 0x26, 0x23, 0xe1, 0x33, 0xcf, 0x17, 0x79, 0xc4, 0x05, 0xf5,
	0x1f, 0x68, 0x22, 0x73, 0x91, 0x0c, 0xdd, 0x38, 0x11, 0x52, 0x10, 0x6c, 0x24, 0x4e, 0x8e, 0xb7,
	0xda, 0x0b, 0x55, 0x87, 0x3d, 0x65, 0x2c, 0x95, 0x84, 0xe0, 0xba, 0x7c, 0x0e, 0x7c, 0x1b, 0x1d,
	0xa1, 0xb3, 0x46, 0x47, 0xd7, 0xe4, 0x10, 0x37, 0x64, 0x10, 0xb2, 0x54, 0xd2, 0x30, 0xb6, 0xff,
	0x69, 0xc2, 0x00, 0x25, 0x9b, 0x06, 0xfd, 0x88, 0xca, 0x2c, 0x61, 0x76, 0x6d, 0xce, 0xfe, 0x00,
	0x64, 0x17, 0xff, 0x97, 0xba, 0x61, 0x5d, 0x33, 0xf3, 0x87, 0x73, 0x82, 0x37, 0x8d, 0x71, 0xcc,
	0x8b, 0xd2, 0xb6, 0x17, 0x70, 0xa6, 0x6d, 0x37, 0x3a, 0xba, 0x76, 0xce, 0xb1, 0x5d, 0x89, 0x6e,
	0x07, 0x59, 0xd8, 0x8d, 0x68, 0xc0, 0xab, 0x31, 0xb7, 0x71, 0x6d, 0xc8, 0x8a, 0x85, 0xbc, 0x2c,
	0x9d, 0x2b, 0xbc, 0xb7, 0x42, 0x5d, 0xf6, 0x2e, 0xc7, 0xaf, 0x90, 0xc5, 0x0f, 0x03, 0x5c, 0xbc,
	0x23, 0x13, 0xc2, 0xf5, 0x3c, 0x29, 0xd2, 0xc6, 0xeb, 0x15, 0x44, 0x0e, 0x5c, 0x13, 0x98, 0xbb,
	0x94, 0x56, 0x73, 0x7f, 0x35, 0x19, 0xf3, 0xa2, 0x85, 0xc8, 0x3d, 0xde, 0xf9, 0x35, 0x11, 0x39,
	0x5d, 0xf5, 0x63, 0x79, 0xbd, 0xa6, 0xf3, 0x87, 0x2a, 0xe6, 0xc5, 0x4d, 0x6f, 0x34, 0x01, 0x6b,
	0x3c, 0x01, 0x6b, 0x36, 0x01, 0xf4, 0xa2, 0x00, 0xbd, 0x29, 0x40, 0x1f, 0x0a, 0xd0, 0x48, 0x01,
	0xfa, 0x54, 0x80, 0xbe, 0x14, 0x58, 0x33, 0x05, 0xe8, 0x75, 0x0a, 0xd6, 0x68, 0x0a, 0xd6, 0x78,
	0x0a, 0xd6, 0x5d, 0xab, 0x1f, 0xc8, 0x41, 0xd6, 0x75, 0x1f, 0x45, 0xe8, 0xc5, 0x34, 0x95, 0x8c,
	0x47, 0x4c, 0x2f, 0xed, 0xf5, 0x85, 0x3e, 0x1b, 0x7d, 0x25, 0x9e, 0xb1, 0xef, 0xae, 0x69, 0xe4,
	0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x27, 0x79, 0x4d, 0x5c, 0x02, 0x00, 0x00,
}

func (this *DownloadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadRequest)
	if !ok {
		that2, ok := that.(DownloadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txid != that1.Txid {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	if this.Ttxid != that1.Ttxid {
		return false
	}
	return true
}
func (this *DownloadReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadReply)
	if !ok {
		that2, ok := that.(DownloadReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.File, that1.File) {
		return false
	}
	return true
}
func (this *DownloadThumbnailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadThumbnailRequest)
	if !ok {
		that2, ok := that.(DownloadThumbnailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *DownloadThumbnailReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadThumbnailReply)
	if !ok {
		that2, ok := that.(DownloadThumbnailReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Thumbnail, that1.Thumbnail) {
		return false
	}
	return true
}
func (this *DownloadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&walletnode.DownloadRequest{")
	s = append(s, "Txid: "+fmt.Sprintf("%#v", this.Txid)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "Ttxid: "+fmt.Sprintf("%#v", this.Ttxid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownloadReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&walletnode.DownloadReply{")
	s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownloadThumbnailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&walletnode.DownloadThumbnailRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownloadThumbnailReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&walletnode.DownloadThumbnailReply{")
	s = append(s, "Thumbnail: "+fmt.Sprintf("%#v", this.Thumbnail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDownloadArtwork(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ttxid) > 0 {
		i -= len(m.Ttxid)
		copy(dAtA[i:], m.Ttxid)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.Ttxid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadThumbnailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadThumbnailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadThumbnailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadThumbnailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadThumbnailReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadThumbnailReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintDownloadArtwork(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDownloadArtwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovDownloadArtwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DownloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	l = len(m.Ttxid)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	return n
}

func (m *DownloadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	return n
}

func (m *DownloadThumbnailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	return n
}

func (m *DownloadThumbnailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovDownloadArtwork(uint64(l))
	}
	return n
}

func sovDownloadArtwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDownloadArtwork(x uint64) (n int) {
	return sovDownloadArtwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DownloadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadRequest{`,
		`Txid:` + fmt.Sprintf("%v", this.Txid) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Ttxid:` + fmt.Sprintf("%v", this.Ttxid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownloadReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadReply{`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownloadThumbnailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadThumbnailRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownloadThumbnailReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadThumbnailReply{`,
		`Thumbnail:` + fmt.Sprintf("%v", this.Thumbnail) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDownloadArtwork(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownloadArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ttxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownloadArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownloadArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownloadArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadThumbnailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownloadArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadThumbnailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadThumbnailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownloadArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadThumbnailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownloadArtwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadThumbnailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadThumbnailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = append(m.Thumbnail[:0], dAtA[iNdEx:postIndex]...)
			if m.Thumbnail == nil {
				m.Thumbnail = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownloadArtwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownloadArtwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDownloadArtwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDownloadArtwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownloadArtwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDownloadArtwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDownloadArtwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDownloadArtwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDownloadArtwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDownloadArtwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDownloadArtwork = fmt.Errorf("proto: unexpected end of group")
)
