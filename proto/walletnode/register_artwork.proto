syntax = "proto3";

option go_package = "github.com/pastelnetwork/gonode/proto/walletnode";

package walletnode;

service RegisterArtwork {
    // Session informs the supernode its position (primary/secondary).
    // Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
    // The stream is used by the parties to inform each other about the cancellation of the task.
    rpc Session(stream SessionRequest) returns (stream SessionReply);

    // AcceptedNodes returns peers of the secondary supernodes connected to it.
    rpc AcceptedNodes(AcceptedNodesRequest) returns (AcceptedNodesReply);

    // ConnectTo requests to connect to the primary supernode.
    rpc ConnectTo(ConnectToRequest) returns (ConnectToReply);

    // ProbeImage uploads the resampled image compute and return a fingerpirnt.
    rpc ProbeImage(stream ProbeImageRequest) returns (ProbeImageReply);

    // SendArtTicket sends a signed art-ticket to the supernode.
    rpc SendSignedNFTTicket(SendSignedNFTTicketRequest) returns (SendSignedNFTTicketReply);

    // SendPreBurntFeeTxid sends tx_id of 10% burnt transaction fee to the supernode.
    rpc SendPreBurntFeeTxid(SendPreBurntFeeTxidRequest) returns (SendPreBurntFeeTxidReply);

    // SendTicket sends a ticket to the supernode.
    rpc SendTicket(SendTicketRequest) returns (SendTicketReply);

    // Upload the image after pq signature is appended along with its thumbnail coordinates
    rpc UploadImage(stream UploadImageRequest) returns (UploadImageReply);
}

message SessionRequest {
    bool is_primary = 1;
}
message SessionReply {
    string sessID = 1;
}

message AcceptedNodesRequest {
}
message AcceptedNodesReply {
    message Peer {
        string nodeID = 1;
    }
    repeated Peer peers = 1;
}

message ConnectToRequest {
    string sessID = 1;
    string nodeID = 2;
}
message ConnectToReply {
}

message ProbeImageRequest {
    bytes payload = 1;
}
message ProbeImageReply {
    message AlternativeNSFWScore {
      double drawing = 1;
      double hentai = 2;
      double neutral = 3;
      double porn = 4;
      double sexy = 5;
    }
    message ImageHashes {
      string perceptual_hash = 1;
      string average_hash = 2;
      string difference_hash = 3;
      string pdq_hash = 4;
    }
    // version of dupde detection system
    string dupe_detection_version = 1;
    // hexstring of hash of candidate image
    string hash_of_candidate_img = 2;
    double average_rareness_score = 3;
    int32 is_rare_on_internet = 4;
    int32 matches_found_on_first_page = 5;
    int32 number_of_pages_of_results = 6;
    string url_of_first_match_in_page = 7;
    double open_nsfw_score = 8;
    bytes zstd_compressed_fingerprint = 9;
    AlternativeNSFWScore alternative_nsfw_score = 10;
    ImageHashes image_hashes = 11;
}

message EncoderParameters {
  bytes oti = 1;   //12 bytes
}

message SendSignedNFTTicketRequest {
    bytes nft_ticket = 1;
    bytes creator_signature = 2;
    string key1 = 3;
    string key2 = 4;
    EncoderParameters encode_parameters = 5;
    map<string, bytes> encode_files = 6;
}
message SendSignedNFTTicketReply {
    int64 registration_fee = 1;
}

message SendPreBurntFeeTxidRequest {
    string txid = 1;
}
message SendPreBurntFeeTxidReply {
    string NFT_reg_txid = 1;
}

message SendTicketRequest {
    bytes ticket = 1;
    string ticket_signature = 2;
    string fgpt= 3;
    string fgpt_signature = 4;
    string fee_txid = 5;
    bytes thumbnail = 6;
}
message SendTicketReply {
    string ticket_txid = 1;
}

message UploadImageRequest {
    message Coordinate {
      int64 top_left_x = 1;
      int64 top_left_y = 2;
      int64 bottom_right_x = 3;
      int64 bottom_right_y = 4;
    }
    message MetaData {
      // size of the image
      int64 size = 1;
      // valid image format such as jpeg, png ...
      string format = 2;
      // sha3-256 hash of the image
      bytes hash = 3;
      // thumbnail of the image
      Coordinate thumbnail = 4;
    }
    oneof payload {
      bytes image_piece = 1;
      // Should be included in the last piece of image only
      MetaData meta_data = 2;
    }
}

message UploadImageReply {
   bytes preview_thumbnail_hash = 1;
   bytes medium_thumbnail_hash = 2;
   bytes small_thumbnail_hash = 3;
}
