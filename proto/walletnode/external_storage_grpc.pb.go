// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package walletnode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalStorageClient is the client API for ExternalStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalStorageClient interface {
	// Session informs the supernode its position (primary/secondary).
	// Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(ctx context.Context, opts ...grpc.CallOption) (ExternalStorage_SessionClient, error)
	// AcceptedNodes returns peers of the secondary supernodes connected to it.
	AcceptedNodes(ctx context.Context, in *AcceptedNodesRequest, opts ...grpc.CallOption) (*AcceptedNodesReply, error)
	// ConnectTo requests to connect to the primary supernode.
	ConnectTo(ctx context.Context, in *ConnectToRequest, opts ...grpc.CallOption) (*ConnectToReply, error)
	// SendSignedExternalStorageTicket sends a signed art-ticket to the supernode.
	SendSignedExternalStorageTicket(ctx context.Context, in *SendSignedExternalStorageTicketRequest, opts ...grpc.CallOption) (*SendSignedExternalStorageTicketReply, error)
	// SendPreBurnedFeeExternalStorageTxID sends tx_id of 10% burnt transaction fee to the supernode.
	SendPreBurnedFeeExternalStorageTxID(ctx context.Context, in *SendPreBurnedFeeExternalStorageTxIDRequest, opts ...grpc.CallOption) (*SendPreBurnedFeeExternalStorageTxIDReply, error)
	// SendTicket sends a ticket to the supernode.
	SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error)
	// Upload the image after pq signature is appended along with its thumbnail coordinates
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ExternalStorage_UploadImageClient, error)
}

type externalStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalStorageClient(cc grpc.ClientConnInterface) ExternalStorageClient {
	return &externalStorageClient{cc}
}

func (c *externalStorageClient) Session(ctx context.Context, opts ...grpc.CallOption) (ExternalStorage_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExternalStorage_ServiceDesc.Streams[0], "/walletnode.ExternalStorage/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalStorageSessionClient{stream}
	return x, nil
}

type ExternalStorage_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type externalStorageSessionClient struct {
	grpc.ClientStream
}

func (x *externalStorageSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *externalStorageSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *externalStorageClient) AcceptedNodes(ctx context.Context, in *AcceptedNodesRequest, opts ...grpc.CallOption) (*AcceptedNodesReply, error) {
	out := new(AcceptedNodesReply)
	err := c.cc.Invoke(ctx, "/walletnode.ExternalStorage/AcceptedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalStorageClient) ConnectTo(ctx context.Context, in *ConnectToRequest, opts ...grpc.CallOption) (*ConnectToReply, error) {
	out := new(ConnectToReply)
	err := c.cc.Invoke(ctx, "/walletnode.ExternalStorage/ConnectTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalStorageClient) SendSignedExternalStorageTicket(ctx context.Context, in *SendSignedExternalStorageTicketRequest, opts ...grpc.CallOption) (*SendSignedExternalStorageTicketReply, error) {
	out := new(SendSignedExternalStorageTicketReply)
	err := c.cc.Invoke(ctx, "/walletnode.ExternalStorage/SendSignedExternalStorageTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalStorageClient) SendPreBurnedFeeExternalStorageTxID(ctx context.Context, in *SendPreBurnedFeeExternalStorageTxIDRequest, opts ...grpc.CallOption) (*SendPreBurnedFeeExternalStorageTxIDReply, error) {
	out := new(SendPreBurnedFeeExternalStorageTxIDReply)
	err := c.cc.Invoke(ctx, "/walletnode.ExternalStorage/SendPreBurnedFeeExternalStorageTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalStorageClient) SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error) {
	out := new(SendTicketReply)
	err := c.cc.Invoke(ctx, "/walletnode.ExternalStorage/SendTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalStorageClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ExternalStorage_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExternalStorage_ServiceDesc.Streams[1], "/walletnode.ExternalStorage/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &externalStorageUploadImageClient{stream}
	return x, nil
}

type ExternalStorage_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageReply, error)
	grpc.ClientStream
}

type externalStorageUploadImageClient struct {
	grpc.ClientStream
}

func (x *externalStorageUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *externalStorageUploadImageClient) CloseAndRecv() (*UploadImageReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExternalStorageServer is the server API for ExternalStorage service.
// All implementations must embed UnimplementedExternalStorageServer
// for forward compatibility
type ExternalStorageServer interface {
	// Session informs the supernode its position (primary/secondary).
	// Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(ExternalStorage_SessionServer) error
	// AcceptedNodes returns peers of the secondary supernodes connected to it.
	AcceptedNodes(context.Context, *AcceptedNodesRequest) (*AcceptedNodesReply, error)
	// ConnectTo requests to connect to the primary supernode.
	ConnectTo(context.Context, *ConnectToRequest) (*ConnectToReply, error)
	// SendSignedExternalStorageTicket sends a signed art-ticket to the supernode.
	SendSignedExternalStorageTicket(context.Context, *SendSignedExternalStorageTicketRequest) (*SendSignedExternalStorageTicketReply, error)
	// SendPreBurnedFeeExternalStorageTxID sends tx_id of 10% burnt transaction fee to the supernode.
	SendPreBurnedFeeExternalStorageTxID(context.Context, *SendPreBurnedFeeExternalStorageTxIDRequest) (*SendPreBurnedFeeExternalStorageTxIDReply, error)
	// SendTicket sends a ticket to the supernode.
	SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error)
	// Upload the image after pq signature is appended along with its thumbnail coordinates
	UploadImage(ExternalStorage_UploadImageServer) error
	mustEmbedUnimplementedExternalStorageServer()
}

// UnimplementedExternalStorageServer must be embedded to have forward compatible implementations.
type UnimplementedExternalStorageServer struct {
}

func (UnimplementedExternalStorageServer) Session(ExternalStorage_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedExternalStorageServer) AcceptedNodes(context.Context, *AcceptedNodesRequest) (*AcceptedNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedNodes not implemented")
}
func (UnimplementedExternalStorageServer) ConnectTo(context.Context, *ConnectToRequest) (*ConnectToReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTo not implemented")
}
func (UnimplementedExternalStorageServer) SendSignedExternalStorageTicket(context.Context, *SendSignedExternalStorageTicketRequest) (*SendSignedExternalStorageTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedExternalStorageTicket not implemented")
}
func (UnimplementedExternalStorageServer) SendPreBurnedFeeExternalStorageTxID(context.Context, *SendPreBurnedFeeExternalStorageTxIDRequest) (*SendPreBurnedFeeExternalStorageTxIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPreBurnedFeeExternalStorageTxID not implemented")
}
func (UnimplementedExternalStorageServer) SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}
func (UnimplementedExternalStorageServer) UploadImage(ExternalStorage_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedExternalStorageServer) mustEmbedUnimplementedExternalStorageServer() {}

// UnsafeExternalStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalStorageServer will
// result in compilation errors.
type UnsafeExternalStorageServer interface {
	mustEmbedUnimplementedExternalStorageServer()
}

func RegisterExternalStorageServer(s grpc.ServiceRegistrar, srv ExternalStorageServer) {
	s.RegisterService(&ExternalStorage_ServiceDesc, srv)
}

func _ExternalStorage_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalStorageServer).Session(&externalStorageSessionServer{stream})
}

type ExternalStorage_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type externalStorageSessionServer struct {
	grpc.ServerStream
}

func (x *externalStorageSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *externalStorageSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExternalStorage_AcceptedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalStorageServer).AcceptedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.ExternalStorage/AcceptedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalStorageServer).AcceptedNodes(ctx, req.(*AcceptedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalStorage_ConnectTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalStorageServer).ConnectTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.ExternalStorage/ConnectTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalStorageServer).ConnectTo(ctx, req.(*ConnectToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalStorage_SendSignedExternalStorageTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSignedExternalStorageTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalStorageServer).SendSignedExternalStorageTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.ExternalStorage/SendSignedExternalStorageTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalStorageServer).SendSignedExternalStorageTicket(ctx, req.(*SendSignedExternalStorageTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalStorage_SendPreBurnedFeeExternalStorageTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPreBurnedFeeExternalStorageTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalStorageServer).SendPreBurnedFeeExternalStorageTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.ExternalStorage/SendPreBurnedFeeExternalStorageTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalStorageServer).SendPreBurnedFeeExternalStorageTxID(ctx, req.(*SendPreBurnedFeeExternalStorageTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalStorage_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalStorageServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.ExternalStorage/SendTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalStorageServer).SendTicket(ctx, req.(*SendTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalStorage_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalStorageServer).UploadImage(&externalStorageUploadImageServer{stream})
}

type ExternalStorage_UploadImageServer interface {
	SendAndClose(*UploadImageReply) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type externalStorageUploadImageServer struct {
	grpc.ServerStream
}

func (x *externalStorageUploadImageServer) SendAndClose(m *UploadImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *externalStorageUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExternalStorage_ServiceDesc is the grpc.ServiceDesc for ExternalStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "walletnode.ExternalStorage",
	HandlerType: (*ExternalStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptedNodes",
			Handler:    _ExternalStorage_AcceptedNodes_Handler,
		},
		{
			MethodName: "ConnectTo",
			Handler:    _ExternalStorage_ConnectTo_Handler,
		},
		{
			MethodName: "SendSignedExternalStorageTicket",
			Handler:    _ExternalStorage_SendSignedExternalStorageTicket_Handler,
		},
		{
			MethodName: "SendPreBurnedFeeExternalStorageTxID",
			Handler:    _ExternalStorage_SendPreBurnedFeeExternalStorageTxID_Handler,
		},
		{
			MethodName: "SendTicket",
			Handler:    _ExternalStorage_SendTicket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _ExternalStorage_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _ExternalStorage_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "external_storage.proto",
}
