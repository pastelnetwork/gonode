// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: register_nft_wn.proto

package walletnode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisterNft_Session_FullMethodName             = "/walletnode.RegisterNft/Session"
	RegisterNft_AcceptedNodes_FullMethodName       = "/walletnode.RegisterNft/AcceptedNodes"
	RegisterNft_ConnectTo_FullMethodName           = "/walletnode.RegisterNft/ConnectTo"
	RegisterNft_MeshNodes_FullMethodName           = "/walletnode.RegisterNft/MeshNodes"
	RegisterNft_SendRegMetadata_FullMethodName     = "/walletnode.RegisterNft/SendRegMetadata"
	RegisterNft_ProbeImage_FullMethodName          = "/walletnode.RegisterNft/ProbeImage"
	RegisterNft_SendSignedNFTTicket_FullMethodName = "/walletnode.RegisterNft/SendSignedNFTTicket"
	RegisterNft_SendPreBurntFeeTxid_FullMethodName = "/walletnode.RegisterNft/SendPreBurntFeeTxid"
	RegisterNft_SendTicket_FullMethodName          = "/walletnode.RegisterNft/SendTicket"
	RegisterNft_UploadImage_FullMethodName         = "/walletnode.RegisterNft/UploadImage"
	RegisterNft_GetDDDatabaseHash_FullMethodName   = "/walletnode.RegisterNft/GetDDDatabaseHash"
	RegisterNft_GetDDServerStats_FullMethodName    = "/walletnode.RegisterNft/GetDDServerStats"
	RegisterNft_GetTopMNs_FullMethodName           = "/walletnode.RegisterNft/GetTopMNs"
)

// RegisterNftClient is the client API for RegisterNft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterNftClient interface {
	// Session informs the supernode its position (primary/secondary).
	// Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(ctx context.Context, opts ...grpc.CallOption) (RegisterNft_SessionClient, error)
	// AcceptedNodes returns peers of the secondary supernodes connected to it.
	AcceptedNodes(ctx context.Context, in *AcceptedNodesRequest, opts ...grpc.CallOption) (*AcceptedNodesReply, error)
	// ConnectTo requests to connect to the primary supernode.
	ConnectTo(ctx context.Context, in *ConnectToRequest, opts ...grpc.CallOption) (*ConnectToReply, error)
	// MeshNodes informs to SNs other SNs on same meshNodes created for this registration request
	MeshNodes(ctx context.Context, in *MeshNodesRequest, opts ...grpc.CallOption) (*MeshNodesReply, error)
	// SendRegMetadata informs to SNs metadata required for registration request like current block hash, creator,..
	SendRegMetadata(ctx context.Context, in *SendRegMetadataRequest, opts ...grpc.CallOption) (*SendRegMetadataReply, error)
	// ProbeImage uploads the resampled image compute and return a fingerprints
	ProbeImage(ctx context.Context, opts ...grpc.CallOption) (RegisterNft_ProbeImageClient, error)
	// SendArtTicket sends a signed art-ticket to the supernode.
	SendSignedNFTTicket(ctx context.Context, in *SendSignedNFTTicketRequest, opts ...grpc.CallOption) (*SendSignedNFTTicketReply, error)
	// SendPreBurntFeeTxid sends tx_id of 10% burnt transaction fee to the supernode.
	SendPreBurntFeeTxid(ctx context.Context, in *SendPreBurntFeeTxidRequest, opts ...grpc.CallOption) (*SendPreBurntFeeTxidReply, error)
	// SendTicket sends a ticket to the supernode.
	SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error)
	// Upload the image after pq signature is appended along with its thumbnail coordinates
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (RegisterNft_UploadImageClient, error)
	// GetDDDatabaseHash returns hash of dupe detection database hash
	GetDDDatabaseHash(ctx context.Context, in *GetDBHashRequest, opts ...grpc.CallOption) (*DBHashReply, error)
	// GetDDServerStats returns stats of dupe detection server
	GetDDServerStats(ctx context.Context, in *DDServerStatsRequest, opts ...grpc.CallOption) (*DDServerStatsReply, error)
	// GetTopMNs return top MNs list from the SN
	GetTopMNs(ctx context.Context, in *GetTopMNsRequest, opts ...grpc.CallOption) (*GetTopMNsReply, error)
}

type registerNftClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterNftClient(cc grpc.ClientConnInterface) RegisterNftClient {
	return &registerNftClient{cc}
}

func (c *registerNftClient) Session(ctx context.Context, opts ...grpc.CallOption) (RegisterNft_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterNft_ServiceDesc.Streams[0], RegisterNft_Session_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &registerNftSessionClient{stream}
	return x, nil
}

type RegisterNft_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type registerNftSessionClient struct {
	grpc.ClientStream
}

func (x *registerNftSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerNftSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerNftClient) AcceptedNodes(ctx context.Context, in *AcceptedNodesRequest, opts ...grpc.CallOption) (*AcceptedNodesReply, error) {
	out := new(AcceptedNodesReply)
	err := c.cc.Invoke(ctx, RegisterNft_AcceptedNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) ConnectTo(ctx context.Context, in *ConnectToRequest, opts ...grpc.CallOption) (*ConnectToReply, error) {
	out := new(ConnectToReply)
	err := c.cc.Invoke(ctx, RegisterNft_ConnectTo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) MeshNodes(ctx context.Context, in *MeshNodesRequest, opts ...grpc.CallOption) (*MeshNodesReply, error) {
	out := new(MeshNodesReply)
	err := c.cc.Invoke(ctx, RegisterNft_MeshNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) SendRegMetadata(ctx context.Context, in *SendRegMetadataRequest, opts ...grpc.CallOption) (*SendRegMetadataReply, error) {
	out := new(SendRegMetadataReply)
	err := c.cc.Invoke(ctx, RegisterNft_SendRegMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) ProbeImage(ctx context.Context, opts ...grpc.CallOption) (RegisterNft_ProbeImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterNft_ServiceDesc.Streams[1], RegisterNft_ProbeImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &registerNftProbeImageClient{stream}
	return x, nil
}

type RegisterNft_ProbeImageClient interface {
	Send(*ProbeImageRequest) error
	CloseAndRecv() (*ProbeImageReply, error)
	grpc.ClientStream
}

type registerNftProbeImageClient struct {
	grpc.ClientStream
}

func (x *registerNftProbeImageClient) Send(m *ProbeImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerNftProbeImageClient) CloseAndRecv() (*ProbeImageReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProbeImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerNftClient) SendSignedNFTTicket(ctx context.Context, in *SendSignedNFTTicketRequest, opts ...grpc.CallOption) (*SendSignedNFTTicketReply, error) {
	out := new(SendSignedNFTTicketReply)
	err := c.cc.Invoke(ctx, RegisterNft_SendSignedNFTTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) SendPreBurntFeeTxid(ctx context.Context, in *SendPreBurntFeeTxidRequest, opts ...grpc.CallOption) (*SendPreBurntFeeTxidReply, error) {
	out := new(SendPreBurntFeeTxidReply)
	err := c.cc.Invoke(ctx, RegisterNft_SendPreBurntFeeTxid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error) {
	out := new(SendTicketReply)
	err := c.cc.Invoke(ctx, RegisterNft_SendTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (RegisterNft_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterNft_ServiceDesc.Streams[2], RegisterNft_UploadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &registerNftUploadImageClient{stream}
	return x, nil
}

type RegisterNft_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageReply, error)
	grpc.ClientStream
}

type registerNftUploadImageClient struct {
	grpc.ClientStream
}

func (x *registerNftUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerNftUploadImageClient) CloseAndRecv() (*UploadImageReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerNftClient) GetDDDatabaseHash(ctx context.Context, in *GetDBHashRequest, opts ...grpc.CallOption) (*DBHashReply, error) {
	out := new(DBHashReply)
	err := c.cc.Invoke(ctx, RegisterNft_GetDDDatabaseHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) GetDDServerStats(ctx context.Context, in *DDServerStatsRequest, opts ...grpc.CallOption) (*DDServerStatsReply, error) {
	out := new(DDServerStatsReply)
	err := c.cc.Invoke(ctx, RegisterNft_GetDDServerStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerNftClient) GetTopMNs(ctx context.Context, in *GetTopMNsRequest, opts ...grpc.CallOption) (*GetTopMNsReply, error) {
	out := new(GetTopMNsReply)
	err := c.cc.Invoke(ctx, RegisterNft_GetTopMNs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterNftServer is the server API for RegisterNft service.
// All implementations must embed UnimplementedRegisterNftServer
// for forward compatibility
type RegisterNftServer interface {
	// Session informs the supernode its position (primary/secondary).
	// Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(RegisterNft_SessionServer) error
	// AcceptedNodes returns peers of the secondary supernodes connected to it.
	AcceptedNodes(context.Context, *AcceptedNodesRequest) (*AcceptedNodesReply, error)
	// ConnectTo requests to connect to the primary supernode.
	ConnectTo(context.Context, *ConnectToRequest) (*ConnectToReply, error)
	// MeshNodes informs to SNs other SNs on same meshNodes created for this registration request
	MeshNodes(context.Context, *MeshNodesRequest) (*MeshNodesReply, error)
	// SendRegMetadata informs to SNs metadata required for registration request like current block hash, creator,..
	SendRegMetadata(context.Context, *SendRegMetadataRequest) (*SendRegMetadataReply, error)
	// ProbeImage uploads the resampled image compute and return a fingerprints
	ProbeImage(RegisterNft_ProbeImageServer) error
	// SendArtTicket sends a signed art-ticket to the supernode.
	SendSignedNFTTicket(context.Context, *SendSignedNFTTicketRequest) (*SendSignedNFTTicketReply, error)
	// SendPreBurntFeeTxid sends tx_id of 10% burnt transaction fee to the supernode.
	SendPreBurntFeeTxid(context.Context, *SendPreBurntFeeTxidRequest) (*SendPreBurntFeeTxidReply, error)
	// SendTicket sends a ticket to the supernode.
	SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error)
	// Upload the image after pq signature is appended along with its thumbnail coordinates
	UploadImage(RegisterNft_UploadImageServer) error
	// GetDDDatabaseHash returns hash of dupe detection database hash
	GetDDDatabaseHash(context.Context, *GetDBHashRequest) (*DBHashReply, error)
	// GetDDServerStats returns stats of dupe detection server
	GetDDServerStats(context.Context, *DDServerStatsRequest) (*DDServerStatsReply, error)
	// GetTopMNs return top MNs list from the SN
	GetTopMNs(context.Context, *GetTopMNsRequest) (*GetTopMNsReply, error)
	mustEmbedUnimplementedRegisterNftServer()
}

// UnimplementedRegisterNftServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterNftServer struct {
}

func (UnimplementedRegisterNftServer) Session(RegisterNft_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedRegisterNftServer) AcceptedNodes(context.Context, *AcceptedNodesRequest) (*AcceptedNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedNodes not implemented")
}
func (UnimplementedRegisterNftServer) ConnectTo(context.Context, *ConnectToRequest) (*ConnectToReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTo not implemented")
}
func (UnimplementedRegisterNftServer) MeshNodes(context.Context, *MeshNodesRequest) (*MeshNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeshNodes not implemented")
}
func (UnimplementedRegisterNftServer) SendRegMetadata(context.Context, *SendRegMetadataRequest) (*SendRegMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegMetadata not implemented")
}
func (UnimplementedRegisterNftServer) ProbeImage(RegisterNft_ProbeImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ProbeImage not implemented")
}
func (UnimplementedRegisterNftServer) SendSignedNFTTicket(context.Context, *SendSignedNFTTicketRequest) (*SendSignedNFTTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedNFTTicket not implemented")
}
func (UnimplementedRegisterNftServer) SendPreBurntFeeTxid(context.Context, *SendPreBurntFeeTxidRequest) (*SendPreBurntFeeTxidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPreBurntFeeTxid not implemented")
}
func (UnimplementedRegisterNftServer) SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}
func (UnimplementedRegisterNftServer) UploadImage(RegisterNft_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedRegisterNftServer) GetDDDatabaseHash(context.Context, *GetDBHashRequest) (*DBHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDDDatabaseHash not implemented")
}
func (UnimplementedRegisterNftServer) GetDDServerStats(context.Context, *DDServerStatsRequest) (*DDServerStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDDServerStats not implemented")
}
func (UnimplementedRegisterNftServer) GetTopMNs(context.Context, *GetTopMNsRequest) (*GetTopMNsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMNs not implemented")
}
func (UnimplementedRegisterNftServer) mustEmbedUnimplementedRegisterNftServer() {}

// UnsafeRegisterNftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterNftServer will
// result in compilation errors.
type UnsafeRegisterNftServer interface {
	mustEmbedUnimplementedRegisterNftServer()
}

func RegisterRegisterNftServer(s grpc.ServiceRegistrar, srv RegisterNftServer) {
	s.RegisterService(&RegisterNft_ServiceDesc, srv)
}

func _RegisterNft_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterNftServer).Session(&registerNftSessionServer{stream})
}

type RegisterNft_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type registerNftSessionServer struct {
	grpc.ServerStream
}

func (x *registerNftSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerNftSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterNft_AcceptedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).AcceptedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_AcceptedNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).AcceptedNodes(ctx, req.(*AcceptedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_ConnectTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).ConnectTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_ConnectTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).ConnectTo(ctx, req.(*ConnectToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_MeshNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeshNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).MeshNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_MeshNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).MeshNodes(ctx, req.(*MeshNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_SendRegMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).SendRegMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_SendRegMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).SendRegMetadata(ctx, req.(*SendRegMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_ProbeImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterNftServer).ProbeImage(&registerNftProbeImageServer{stream})
}

type RegisterNft_ProbeImageServer interface {
	SendAndClose(*ProbeImageReply) error
	Recv() (*ProbeImageRequest, error)
	grpc.ServerStream
}

type registerNftProbeImageServer struct {
	grpc.ServerStream
}

func (x *registerNftProbeImageServer) SendAndClose(m *ProbeImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerNftProbeImageServer) Recv() (*ProbeImageRequest, error) {
	m := new(ProbeImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterNft_SendSignedNFTTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSignedNFTTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).SendSignedNFTTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_SendSignedNFTTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).SendSignedNFTTicket(ctx, req.(*SendSignedNFTTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_SendPreBurntFeeTxid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPreBurntFeeTxidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).SendPreBurntFeeTxid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_SendPreBurntFeeTxid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).SendPreBurntFeeTxid(ctx, req.(*SendPreBurntFeeTxidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_SendTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).SendTicket(ctx, req.(*SendTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterNftServer).UploadImage(&registerNftUploadImageServer{stream})
}

type RegisterNft_UploadImageServer interface {
	SendAndClose(*UploadImageReply) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type registerNftUploadImageServer struct {
	grpc.ServerStream
}

func (x *registerNftUploadImageServer) SendAndClose(m *UploadImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerNftUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterNft_GetDDDatabaseHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).GetDDDatabaseHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_GetDDDatabaseHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).GetDDDatabaseHash(ctx, req.(*GetDBHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_GetDDServerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DDServerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).GetDDServerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_GetDDServerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).GetDDServerStats(ctx, req.(*DDServerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterNft_GetTopMNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterNftServer).GetTopMNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterNft_GetTopMNs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterNftServer).GetTopMNs(ctx, req.(*GetTopMNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterNft_ServiceDesc is the grpc.ServiceDesc for RegisterNft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterNft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "walletnode.RegisterNft",
	HandlerType: (*RegisterNftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptedNodes",
			Handler:    _RegisterNft_AcceptedNodes_Handler,
		},
		{
			MethodName: "ConnectTo",
			Handler:    _RegisterNft_ConnectTo_Handler,
		},
		{
			MethodName: "MeshNodes",
			Handler:    _RegisterNft_MeshNodes_Handler,
		},
		{
			MethodName: "SendRegMetadata",
			Handler:    _RegisterNft_SendRegMetadata_Handler,
		},
		{
			MethodName: "SendSignedNFTTicket",
			Handler:    _RegisterNft_SendSignedNFTTicket_Handler,
		},
		{
			MethodName: "SendPreBurntFeeTxid",
			Handler:    _RegisterNft_SendPreBurntFeeTxid_Handler,
		},
		{
			MethodName: "SendTicket",
			Handler:    _RegisterNft_SendTicket_Handler,
		},
		{
			MethodName: "GetDDDatabaseHash",
			Handler:    _RegisterNft_GetDDDatabaseHash_Handler,
		},
		{
			MethodName: "GetDDServerStats",
			Handler:    _RegisterNft_GetDDServerStats_Handler,
		},
		{
			MethodName: "GetTopMNs",
			Handler:    _RegisterNft_GetTopMNs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _RegisterNft_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProbeImage",
			Handler:       _RegisterNft_ProbeImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _RegisterNft_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "register_nft_wn.proto",
}
