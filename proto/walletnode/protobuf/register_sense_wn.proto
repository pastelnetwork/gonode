syntax = "proto3";

option go_package = "github.com/pastelnetwork/gonode/proto/walletnode";

package walletnode;
import "common_wn.proto";

service RegisterSense {
    // Session informs the supernode its position (primary/secondary).
    // Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
    // The stream is used by the parties to inform each other about the cancellation of the task.
    rpc Session(stream SessionRequest) returns (stream SessionReply);

    // AcceptedNodes returns peers of the secondary supernodes connected to it.
    rpc AcceptedNodes(AcceptedNodesRequest) returns (AcceptedNodesReply);

    // ConnectTo requests to connect to the primary supernode.
    rpc ConnectTo(ConnectToRequest) returns (ConnectToReply);

    // MeshNodes informs to SNs other SNs on same meshNodes created for this registration request
    rpc MeshNodes(MeshNodesRequest) returns (MeshNodesReply);

    // SendRegMetadata informs to SNs metadata required for registration request like current block hash, creator,..
    rpc SendRegMetadata(SendRegMetadataRequest) returns (SendRegMetadataReply);

    // ProbeImage uploads the resampled image compute/burn txid and return a fingerpirnt and MN signature.
    rpc ProbeImage(stream ProbeImageRequest) returns (ProbeImageReply);

    // SendArtTicket sends a signed art-ticket to the supernode.
    rpc SendSignedActionTicket(SendSignedActionTicketRequest) returns (SendSignedActionTicketReply);

    // SendActionAc informs to SN that walletnode activated action_reg
    rpc SendActionAct(SendActionActRequest) returns (SendActionActReply);
}

message SendSignedActionTicketRequest {
    bytes action_ticket = 1;
    bytes creator_signature = 2;
    bytes dd_fp_files = 3;
}

message SendSignedActionTicketReply {
    string action_reg_txid = 1;
}

message SendActionActRequest {
    string action_reg_txid = 1;
}

message SendActionActReply {
}