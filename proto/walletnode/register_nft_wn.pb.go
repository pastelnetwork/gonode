// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: register_nft_wn.proto

package walletnode

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendSignedNFTTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftTicket        []byte             `protobuf:"bytes,1,opt,name=nft_ticket,json=nftTicket,proto3" json:"nft_ticket,omitempty"`
	CreatorSignature []byte             `protobuf:"bytes,2,opt,name=creator_signature,json=creatorSignature,proto3" json:"creator_signature,omitempty"`
	Label            string             `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	EncodeParameters *EncoderParameters `protobuf:"bytes,5,opt,name=encode_parameters,json=encodeParameters,proto3" json:"encode_parameters,omitempty"`
	DdFpFiles        []byte             `protobuf:"bytes,6,opt,name=dd_fp_files,json=ddFpFiles,proto3" json:"dd_fp_files,omitempty"`
	RqFiles          []byte             `protobuf:"bytes,7,opt,name=rq_files,json=rqFiles,proto3" json:"rq_files,omitempty"`
}

func (x *SendSignedNFTTicketRequest) Reset() {
	*x = SendSignedNFTTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSignedNFTTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignedNFTTicketRequest) ProtoMessage() {}

func (x *SendSignedNFTTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignedNFTTicketRequest.ProtoReflect.Descriptor instead.
func (*SendSignedNFTTicketRequest) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{0}
}

func (x *SendSignedNFTTicketRequest) GetNftTicket() []byte {
	if x != nil {
		return x.NftTicket
	}
	return nil
}

func (x *SendSignedNFTTicketRequest) GetCreatorSignature() []byte {
	if x != nil {
		return x.CreatorSignature
	}
	return nil
}

func (x *SendSignedNFTTicketRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SendSignedNFTTicketRequest) GetEncodeParameters() *EncoderParameters {
	if x != nil {
		return x.EncodeParameters
	}
	return nil
}

func (x *SendSignedNFTTicketRequest) GetDdFpFiles() []byte {
	if x != nil {
		return x.DdFpFiles
	}
	return nil
}

func (x *SendSignedNFTTicketRequest) GetRqFiles() []byte {
	if x != nil {
		return x.RqFiles
	}
	return nil
}

type SendSignedNFTTicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationFee int64 `protobuf:"varint,1,opt,name=registration_fee,json=registrationFee,proto3" json:"registration_fee,omitempty"`
}

func (x *SendSignedNFTTicketReply) Reset() {
	*x = SendSignedNFTTicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSignedNFTTicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSignedNFTTicketReply) ProtoMessage() {}

func (x *SendSignedNFTTicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSignedNFTTicketReply.ProtoReflect.Descriptor instead.
func (*SendSignedNFTTicketReply) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{1}
}

func (x *SendSignedNFTTicketReply) GetRegistrationFee() int64 {
	if x != nil {
		return x.RegistrationFee
	}
	return 0
}

type SendPreBurntFeeTxidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *SendPreBurntFeeTxidRequest) Reset() {
	*x = SendPreBurntFeeTxidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPreBurntFeeTxidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPreBurntFeeTxidRequest) ProtoMessage() {}

func (x *SendPreBurntFeeTxidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPreBurntFeeTxidRequest.ProtoReflect.Descriptor instead.
func (*SendPreBurntFeeTxidRequest) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{2}
}

func (x *SendPreBurntFeeTxidRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type SendPreBurntFeeTxidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NFTRegTxid string `protobuf:"bytes,1,opt,name=NFT_reg_txid,json=NFTRegTxid,proto3" json:"NFT_reg_txid,omitempty"`
}

func (x *SendPreBurntFeeTxidReply) Reset() {
	*x = SendPreBurntFeeTxidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPreBurntFeeTxidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPreBurntFeeTxidReply) ProtoMessage() {}

func (x *SendPreBurntFeeTxidReply) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPreBurntFeeTxidReply.ProtoReflect.Descriptor instead.
func (*SendPreBurntFeeTxidReply) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{3}
}

func (x *SendPreBurntFeeTxidReply) GetNFTRegTxid() string {
	if x != nil {
		return x.NFTRegTxid
	}
	return ""
}

type SendTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket          []byte `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	TicketSignature string `protobuf:"bytes,2,opt,name=ticket_signature,json=ticketSignature,proto3" json:"ticket_signature,omitempty"`
	Fgpt            string `protobuf:"bytes,3,opt,name=fgpt,proto3" json:"fgpt,omitempty"`
	FgptSignature   string `protobuf:"bytes,4,opt,name=fgpt_signature,json=fgptSignature,proto3" json:"fgpt_signature,omitempty"`
	FeeTxid         string `protobuf:"bytes,5,opt,name=fee_txid,json=feeTxid,proto3" json:"fee_txid,omitempty"`
	Thumbnail       []byte `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *SendTicketRequest) Reset() {
	*x = SendTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTicketRequest) ProtoMessage() {}

func (x *SendTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTicketRequest.ProtoReflect.Descriptor instead.
func (*SendTicketRequest) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{4}
}

func (x *SendTicketRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *SendTicketRequest) GetTicketSignature() string {
	if x != nil {
		return x.TicketSignature
	}
	return ""
}

func (x *SendTicketRequest) GetFgpt() string {
	if x != nil {
		return x.Fgpt
	}
	return ""
}

func (x *SendTicketRequest) GetFgptSignature() string {
	if x != nil {
		return x.FgptSignature
	}
	return ""
}

func (x *SendTicketRequest) GetFeeTxid() string {
	if x != nil {
		return x.FeeTxid
	}
	return ""
}

func (x *SendTicketRequest) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type SendTicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketTxid string `protobuf:"bytes,1,opt,name=ticket_txid,json=ticketTxid,proto3" json:"ticket_txid,omitempty"`
}

func (x *SendTicketReply) Reset() {
	*x = SendTicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTicketReply) ProtoMessage() {}

func (x *SendTicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTicketReply.ProtoReflect.Descriptor instead.
func (*SendTicketReply) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{5}
}

func (x *SendTicketReply) GetTicketTxid() string {
	if x != nil {
		return x.TicketTxid
	}
	return ""
}

type UploadImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*UploadImageRequest_ImagePiece
	//	*UploadImageRequest_MetaData_
	Payload isUploadImageRequest_Payload `protobuf_oneof:"payload"`
}

func (x *UploadImageRequest) Reset() {
	*x = UploadImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest) ProtoMessage() {}

func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{6}
}

func (m *UploadImageRequest) GetPayload() isUploadImageRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *UploadImageRequest) GetImagePiece() []byte {
	if x, ok := x.GetPayload().(*UploadImageRequest_ImagePiece); ok {
		return x.ImagePiece
	}
	return nil
}

func (x *UploadImageRequest) GetMetaData() *UploadImageRequest_MetaData {
	if x, ok := x.GetPayload().(*UploadImageRequest_MetaData_); ok {
		return x.MetaData
	}
	return nil
}

type isUploadImageRequest_Payload interface {
	isUploadImageRequest_Payload()
}

type UploadImageRequest_ImagePiece struct {
	ImagePiece []byte `protobuf:"bytes,1,opt,name=image_piece,json=imagePiece,proto3,oneof"`
}

type UploadImageRequest_MetaData_ struct {
	// Should be included in the last piece of image only
	MetaData *UploadImageRequest_MetaData `protobuf:"bytes,2,opt,name=meta_data,json=metaData,proto3,oneof"`
}

func (*UploadImageRequest_ImagePiece) isUploadImageRequest_Payload() {}

func (*UploadImageRequest_MetaData_) isUploadImageRequest_Payload() {}

type UploadImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviewThumbnailHash []byte `protobuf:"bytes,1,opt,name=preview_thumbnail_hash,json=previewThumbnailHash,proto3" json:"preview_thumbnail_hash,omitempty"`
	MediumThumbnailHash  []byte `protobuf:"bytes,2,opt,name=medium_thumbnail_hash,json=mediumThumbnailHash,proto3" json:"medium_thumbnail_hash,omitempty"`
	SmallThumbnailHash   []byte `protobuf:"bytes,3,opt,name=small_thumbnail_hash,json=smallThumbnailHash,proto3" json:"small_thumbnail_hash,omitempty"`
}

func (x *UploadImageReply) Reset() {
	*x = UploadImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageReply) ProtoMessage() {}

func (x *UploadImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageReply.ProtoReflect.Descriptor instead.
func (*UploadImageReply) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{7}
}

func (x *UploadImageReply) GetPreviewThumbnailHash() []byte {
	if x != nil {
		return x.PreviewThumbnailHash
	}
	return nil
}

func (x *UploadImageReply) GetMediumThumbnailHash() []byte {
	if x != nil {
		return x.MediumThumbnailHash
	}
	return nil
}

func (x *UploadImageReply) GetSmallThumbnailHash() []byte {
	if x != nil {
		return x.SmallThumbnailHash
	}
	return nil
}

type UploadImageRequest_Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftX     int64 `protobuf:"varint,1,opt,name=top_left_x,json=topLeftX,proto3" json:"top_left_x,omitempty"`
	TopLeftY     int64 `protobuf:"varint,2,opt,name=top_left_y,json=topLeftY,proto3" json:"top_left_y,omitempty"`
	BottomRightX int64 `protobuf:"varint,3,opt,name=bottom_right_x,json=bottomRightX,proto3" json:"bottom_right_x,omitempty"`
	BottomRightY int64 `protobuf:"varint,4,opt,name=bottom_right_y,json=bottomRightY,proto3" json:"bottom_right_y,omitempty"`
}

func (x *UploadImageRequest_Coordinate) Reset() {
	*x = UploadImageRequest_Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageRequest_Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest_Coordinate) ProtoMessage() {}

func (x *UploadImageRequest_Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest_Coordinate.ProtoReflect.Descriptor instead.
func (*UploadImageRequest_Coordinate) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UploadImageRequest_Coordinate) GetTopLeftX() int64 {
	if x != nil {
		return x.TopLeftX
	}
	return 0
}

func (x *UploadImageRequest_Coordinate) GetTopLeftY() int64 {
	if x != nil {
		return x.TopLeftY
	}
	return 0
}

func (x *UploadImageRequest_Coordinate) GetBottomRightX() int64 {
	if x != nil {
		return x.BottomRightX
	}
	return 0
}

func (x *UploadImageRequest_Coordinate) GetBottomRightY() int64 {
	if x != nil {
		return x.BottomRightY
	}
	return 0
}

type UploadImageRequest_MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// size of the image
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// valid image format such as jpeg, png ...
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// sha3-256 hash of the image
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// thumbnail of the image
	Thumbnail *UploadImageRequest_Coordinate `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *UploadImageRequest_MetaData) Reset() {
	*x = UploadImageRequest_MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_nft_wn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageRequest_MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest_MetaData) ProtoMessage() {}

func (x *UploadImageRequest_MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_register_nft_wn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest_MetaData.ProtoReflect.Descriptor instead.
func (*UploadImageRequest_MetaData) Descriptor() ([]byte, []int) {
	return file_register_nft_wn_proto_rawDescGZIP(), []int{6, 1}
}

func (x *UploadImageRequest_MetaData) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UploadImageRequest_MetaData) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *UploadImageRequest_MetaData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *UploadImageRequest_MetaData) GetThumbnail() *UploadImageRequest_Coordinate {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

var File_register_nft_wn_proto protoreflect.FileDescriptor

var file_register_nft_wn_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x77,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e,
	0x6f, 0x64, 0x65, 0x1a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x77, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x66, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x64, 0x5f, 0x66, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x64, 0x46, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x18,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x42, 0x75,
	0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65,
	0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x4e, 0x46, 0x54, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x67, 0x54,
	0x78, 0x69, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x67, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x67, 0x70, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x67, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x67, 0x70, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x78,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x22, 0x32, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x78, 0x69, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x46,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65,
	0x66, 0x74, 0x58, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74,
	0x59, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x58, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x59, 0x1a, 0x93, 0x01,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xae,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x32,
	0xa4, 0x08, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x12,
	0x43, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45,
	0x0a, 0x09, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x12, 0x63, 0x0a, 0x13, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x63, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x46,
	0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x12, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74,
	0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d,
	0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x12, 0x4a, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x44, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x42, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x42,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x44, 0x44, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x44, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x44, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x45, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x4e, 0x73, 0x12, 0x1c, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x4d, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x4e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_register_nft_wn_proto_rawDescOnce sync.Once
	file_register_nft_wn_proto_rawDescData = file_register_nft_wn_proto_rawDesc
)

func file_register_nft_wn_proto_rawDescGZIP() []byte {
	file_register_nft_wn_proto_rawDescOnce.Do(func() {
		file_register_nft_wn_proto_rawDescData = protoimpl.X.CompressGZIP(file_register_nft_wn_proto_rawDescData)
	})
	return file_register_nft_wn_proto_rawDescData
}

var file_register_nft_wn_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_register_nft_wn_proto_goTypes = []interface{}{
	(*SendSignedNFTTicketRequest)(nil),    // 0: walletnode.SendSignedNFTTicketRequest
	(*SendSignedNFTTicketReply)(nil),      // 1: walletnode.SendSignedNFTTicketReply
	(*SendPreBurntFeeTxidRequest)(nil),    // 2: walletnode.SendPreBurntFeeTxidRequest
	(*SendPreBurntFeeTxidReply)(nil),      // 3: walletnode.SendPreBurntFeeTxidReply
	(*SendTicketRequest)(nil),             // 4: walletnode.SendTicketRequest
	(*SendTicketReply)(nil),               // 5: walletnode.SendTicketReply
	(*UploadImageRequest)(nil),            // 6: walletnode.UploadImageRequest
	(*UploadImageReply)(nil),              // 7: walletnode.UploadImageReply
	(*UploadImageRequest_Coordinate)(nil), // 8: walletnode.UploadImageRequest.Coordinate
	(*UploadImageRequest_MetaData)(nil),   // 9: walletnode.UploadImageRequest.MetaData
	(*EncoderParameters)(nil),             // 10: walletnode.EncoderParameters
	(*SessionRequest)(nil),                // 11: walletnode.SessionRequest
	(*AcceptedNodesRequest)(nil),          // 12: walletnode.AcceptedNodesRequest
	(*ConnectToRequest)(nil),              // 13: walletnode.ConnectToRequest
	(*MeshNodesRequest)(nil),              // 14: walletnode.MeshNodesRequest
	(*SendRegMetadataRequest)(nil),        // 15: walletnode.SendRegMetadataRequest
	(*ProbeImageRequest)(nil),             // 16: walletnode.ProbeImageRequest
	(*GetDBHashRequest)(nil),              // 17: walletnode.GetDBHashRequest
	(*DDServerStatsRequest)(nil),          // 18: walletnode.DDServerStatsRequest
	(*GetTopMNsRequest)(nil),              // 19: walletnode.GetTopMNsRequest
	(*SessionReply)(nil),                  // 20: walletnode.SessionReply
	(*AcceptedNodesReply)(nil),            // 21: walletnode.AcceptedNodesReply
	(*ConnectToReply)(nil),                // 22: walletnode.ConnectToReply
	(*MeshNodesReply)(nil),                // 23: walletnode.MeshNodesReply
	(*SendRegMetadataReply)(nil),          // 24: walletnode.SendRegMetadataReply
	(*ProbeImageReply)(nil),               // 25: walletnode.ProbeImageReply
	(*DBHashReply)(nil),                   // 26: walletnode.DBHashReply
	(*DDServerStatsReply)(nil),            // 27: walletnode.DDServerStatsReply
	(*GetTopMNsReply)(nil),                // 28: walletnode.GetTopMNsReply
}
var file_register_nft_wn_proto_depIdxs = []int32{
	10, // 0: walletnode.SendSignedNFTTicketRequest.encode_parameters:type_name -> walletnode.EncoderParameters
	9,  // 1: walletnode.UploadImageRequest.meta_data:type_name -> walletnode.UploadImageRequest.MetaData
	8,  // 2: walletnode.UploadImageRequest.MetaData.thumbnail:type_name -> walletnode.UploadImageRequest.Coordinate
	11, // 3: walletnode.RegisterNft.Session:input_type -> walletnode.SessionRequest
	12, // 4: walletnode.RegisterNft.AcceptedNodes:input_type -> walletnode.AcceptedNodesRequest
	13, // 5: walletnode.RegisterNft.ConnectTo:input_type -> walletnode.ConnectToRequest
	14, // 6: walletnode.RegisterNft.MeshNodes:input_type -> walletnode.MeshNodesRequest
	15, // 7: walletnode.RegisterNft.SendRegMetadata:input_type -> walletnode.SendRegMetadataRequest
	16, // 8: walletnode.RegisterNft.ProbeImage:input_type -> walletnode.ProbeImageRequest
	0,  // 9: walletnode.RegisterNft.SendSignedNFTTicket:input_type -> walletnode.SendSignedNFTTicketRequest
	2,  // 10: walletnode.RegisterNft.SendPreBurntFeeTxid:input_type -> walletnode.SendPreBurntFeeTxidRequest
	4,  // 11: walletnode.RegisterNft.SendTicket:input_type -> walletnode.SendTicketRequest
	6,  // 12: walletnode.RegisterNft.UploadImage:input_type -> walletnode.UploadImageRequest
	17, // 13: walletnode.RegisterNft.GetDDDatabaseHash:input_type -> walletnode.GetDBHashRequest
	18, // 14: walletnode.RegisterNft.GetDDServerStats:input_type -> walletnode.DDServerStatsRequest
	19, // 15: walletnode.RegisterNft.GetTopMNs:input_type -> walletnode.GetTopMNsRequest
	20, // 16: walletnode.RegisterNft.Session:output_type -> walletnode.SessionReply
	21, // 17: walletnode.RegisterNft.AcceptedNodes:output_type -> walletnode.AcceptedNodesReply
	22, // 18: walletnode.RegisterNft.ConnectTo:output_type -> walletnode.ConnectToReply
	23, // 19: walletnode.RegisterNft.MeshNodes:output_type -> walletnode.MeshNodesReply
	24, // 20: walletnode.RegisterNft.SendRegMetadata:output_type -> walletnode.SendRegMetadataReply
	25, // 21: walletnode.RegisterNft.ProbeImage:output_type -> walletnode.ProbeImageReply
	1,  // 22: walletnode.RegisterNft.SendSignedNFTTicket:output_type -> walletnode.SendSignedNFTTicketReply
	3,  // 23: walletnode.RegisterNft.SendPreBurntFeeTxid:output_type -> walletnode.SendPreBurntFeeTxidReply
	5,  // 24: walletnode.RegisterNft.SendTicket:output_type -> walletnode.SendTicketReply
	7,  // 25: walletnode.RegisterNft.UploadImage:output_type -> walletnode.UploadImageReply
	26, // 26: walletnode.RegisterNft.GetDDDatabaseHash:output_type -> walletnode.DBHashReply
	27, // 27: walletnode.RegisterNft.GetDDServerStats:output_type -> walletnode.DDServerStatsReply
	28, // 28: walletnode.RegisterNft.GetTopMNs:output_type -> walletnode.GetTopMNsReply
	16, // [16:29] is the sub-list for method output_type
	3,  // [3:16] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_register_nft_wn_proto_init() }
func file_register_nft_wn_proto_init() {
	if File_register_nft_wn_proto != nil {
		return
	}
	file_common_wn_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_register_nft_wn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSignedNFTTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSignedNFTTicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPreBurntFeeTxidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPreBurntFeeTxidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageRequest_Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_nft_wn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageRequest_MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_register_nft_wn_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*UploadImageRequest_ImagePiece)(nil),
		(*UploadImageRequest_MetaData_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_register_nft_wn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_register_nft_wn_proto_goTypes,
		DependencyIndexes: file_register_nft_wn_proto_depIdxs,
		MessageInfos:      file_register_nft_wn_proto_msgTypes,
	}.Build()
	File_register_nft_wn_proto = out.File
	file_register_nft_wn_proto_rawDesc = nil
	file_register_nft_wn_proto_goTypes = nil
	file_register_nft_wn_proto_depIdxs = nil
}
