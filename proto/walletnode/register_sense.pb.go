// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: walletnode/register_sense.proto

package walletnode

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SenseSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrimary bool `protobuf:"varint,1,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
}

func (x *SenseSessionRequest) Reset() {
	*x = SenseSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSessionRequest) ProtoMessage() {}

func (x *SenseSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSessionRequest.ProtoReflect.Descriptor instead.
func (*SenseSessionRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{0}
}

func (x *SenseSessionRequest) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

type SenseSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessID string `protobuf:"bytes,1,opt,name=sessID,proto3" json:"sessID,omitempty"`
}

func (x *SenseSessionReply) Reset() {
	*x = SenseSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSessionReply) ProtoMessage() {}

func (x *SenseSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSessionReply.ProtoReflect.Descriptor instead.
func (*SenseSessionReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{1}
}

func (x *SenseSessionReply) GetSessID() string {
	if x != nil {
		return x.SessID
	}
	return ""
}

type SenseAcceptedNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SenseAcceptedNodesRequest) Reset() {
	*x = SenseAcceptedNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseAcceptedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseAcceptedNodesRequest) ProtoMessage() {}

func (x *SenseAcceptedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseAcceptedNodesRequest.ProtoReflect.Descriptor instead.
func (*SenseAcceptedNodesRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{2}
}

type SenseAcceptedNodesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*SenseAcceptedNodesReply_Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *SenseAcceptedNodesReply) Reset() {
	*x = SenseAcceptedNodesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseAcceptedNodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseAcceptedNodesReply) ProtoMessage() {}

func (x *SenseAcceptedNodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseAcceptedNodesReply.ProtoReflect.Descriptor instead.
func (*SenseAcceptedNodesReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{3}
}

func (x *SenseAcceptedNodesReply) GetPeers() []*SenseAcceptedNodesReply_Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type SenseConnectToRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessID string `protobuf:"bytes,1,opt,name=sessID,proto3" json:"sessID,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *SenseConnectToRequest) Reset() {
	*x = SenseConnectToRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseConnectToRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseConnectToRequest) ProtoMessage() {}

func (x *SenseConnectToRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseConnectToRequest.ProtoReflect.Descriptor instead.
func (*SenseConnectToRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{4}
}

func (x *SenseConnectToRequest) GetSessID() string {
	if x != nil {
		return x.SessID
	}
	return ""
}

func (x *SenseConnectToRequest) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

type SenseConnectToReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SenseConnectToReply) Reset() {
	*x = SenseConnectToReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseConnectToReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseConnectToReply) ProtoMessage() {}

func (x *SenseConnectToReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseConnectToReply.ProtoReflect.Descriptor instead.
func (*SenseConnectToReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{5}
}

type SenseMeshNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*SenseMeshNodesRequest_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *SenseMeshNodesRequest) Reset() {
	*x = SenseMeshNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseMeshNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseMeshNodesRequest) ProtoMessage() {}

func (x *SenseMeshNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseMeshNodesRequest.ProtoReflect.Descriptor instead.
func (*SenseMeshNodesRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{6}
}

func (x *SenseMeshNodesRequest) GetNodes() []*SenseMeshNodesRequest_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type SenseMeshNodesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SenseMeshNodesReply) Reset() {
	*x = SenseMeshNodesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseMeshNodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseMeshNodesReply) ProtoMessage() {}

func (x *SenseMeshNodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseMeshNodesReply.ProtoReflect.Descriptor instead.
func (*SenseMeshNodesReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{7}
}

type SenseSendRegMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorPastelID string `protobuf:"bytes,1,opt,name=creatorPastelID,proto3" json:"creatorPastelID,omitempty"`
	BlockHash       string `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (x *SenseSendRegMetadataRequest) Reset() {
	*x = SenseSendRegMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendRegMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendRegMetadataRequest) ProtoMessage() {}

func (x *SenseSendRegMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendRegMetadataRequest.ProtoReflect.Descriptor instead.
func (*SenseSendRegMetadataRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{8}
}

func (x *SenseSendRegMetadataRequest) GetCreatorPastelID() string {
	if x != nil {
		return x.CreatorPastelID
	}
	return ""
}

func (x *SenseSendRegMetadataRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type SenseSendRegMetadataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SenseSendRegMetadataReply) Reset() {
	*x = SenseSendRegMetadataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendRegMetadataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendRegMetadataReply) ProtoMessage() {}

func (x *SenseSendRegMetadataReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendRegMetadataReply.ProtoReflect.Descriptor instead.
func (*SenseSendRegMetadataReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{9}
}

type SenseProbeImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SenseProbeImageRequest) Reset() {
	*x = SenseProbeImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseProbeImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseProbeImageRequest) ProtoMessage() {}

func (x *SenseProbeImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseProbeImageRequest.ProtoReflect.Descriptor instead.
func (*SenseProbeImageRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{10}
}

func (x *SenseProbeImageRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SenseProbeImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressedSignedDDAndFingerprints []byte `protobuf:"bytes,1,opt,name=compressedSignedDDAndFingerprints,proto3" json:"compressedSignedDDAndFingerprints,omitempty"`
}

func (x *SenseProbeImageReply) Reset() {
	*x = SenseProbeImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseProbeImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseProbeImageReply) ProtoMessage() {}

func (x *SenseProbeImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseProbeImageReply.ProtoReflect.Descriptor instead.
func (*SenseProbeImageReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{11}
}

func (x *SenseProbeImageReply) GetCompressedSignedDDAndFingerprints() []byte {
	if x != nil {
		return x.CompressedSignedDDAndFingerprints
	}
	return nil
}

type SenseEncoderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oti []byte `protobuf:"bytes,1,opt,name=oti,proto3" json:"oti,omitempty"` //12 bytes
}

func (x *SenseEncoderParameters) Reset() {
	*x = SenseEncoderParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseEncoderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseEncoderParameters) ProtoMessage() {}

func (x *SenseEncoderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseEncoderParameters.ProtoReflect.Descriptor instead.
func (*SenseEncoderParameters) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{12}
}

func (x *SenseEncoderParameters) GetOti() []byte {
	if x != nil {
		return x.Oti
	}
	return nil
}

type SenseSendSignedNFTTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftTicket        []byte                  `protobuf:"bytes,1,opt,name=nft_ticket,json=nftTicket,proto3" json:"nft_ticket,omitempty"`
	CreatorSignature []byte                  `protobuf:"bytes,2,opt,name=creator_signature,json=creatorSignature,proto3" json:"creator_signature,omitempty"`
	Key1             string                  `protobuf:"bytes,3,opt,name=key1,proto3" json:"key1,omitempty"`
	Key2             string                  `protobuf:"bytes,4,opt,name=key2,proto3" json:"key2,omitempty"`
	EncodeParameters *SenseEncoderParameters `protobuf:"bytes,5,opt,name=encode_parameters,json=encodeParameters,proto3" json:"encode_parameters,omitempty"`
	DdFpFiles        []byte                  `protobuf:"bytes,7,opt,name=dd_fp_files,json=ddFpFiles,proto3" json:"dd_fp_files,omitempty"`
	RqFiles          []byte                  `protobuf:"bytes,8,opt,name=rq_files,json=rqFiles,proto3" json:"rq_files,omitempty"`
}

func (x *SenseSendSignedNFTTicketRequest) Reset() {
	*x = SenseSendSignedNFTTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendSignedNFTTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendSignedNFTTicketRequest) ProtoMessage() {}

func (x *SenseSendSignedNFTTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendSignedNFTTicketRequest.ProtoReflect.Descriptor instead.
func (*SenseSendSignedNFTTicketRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{13}
}

func (x *SenseSendSignedNFTTicketRequest) GetNftTicket() []byte {
	if x != nil {
		return x.NftTicket
	}
	return nil
}

func (x *SenseSendSignedNFTTicketRequest) GetCreatorSignature() []byte {
	if x != nil {
		return x.CreatorSignature
	}
	return nil
}

func (x *SenseSendSignedNFTTicketRequest) GetKey1() string {
	if x != nil {
		return x.Key1
	}
	return ""
}

func (x *SenseSendSignedNFTTicketRequest) GetKey2() string {
	if x != nil {
		return x.Key2
	}
	return ""
}

func (x *SenseSendSignedNFTTicketRequest) GetEncodeParameters() *SenseEncoderParameters {
	if x != nil {
		return x.EncodeParameters
	}
	return nil
}

func (x *SenseSendSignedNFTTicketRequest) GetDdFpFiles() []byte {
	if x != nil {
		return x.DdFpFiles
	}
	return nil
}

func (x *SenseSendSignedNFTTicketRequest) GetRqFiles() []byte {
	if x != nil {
		return x.RqFiles
	}
	return nil
}

type SenseSendSignedNFTTicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationFee int64 `protobuf:"varint,1,opt,name=registration_fee,json=registrationFee,proto3" json:"registration_fee,omitempty"`
}

func (x *SenseSendSignedNFTTicketReply) Reset() {
	*x = SenseSendSignedNFTTicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendSignedNFTTicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendSignedNFTTicketReply) ProtoMessage() {}

func (x *SenseSendSignedNFTTicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendSignedNFTTicketReply.ProtoReflect.Descriptor instead.
func (*SenseSendSignedNFTTicketReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{14}
}

func (x *SenseSendSignedNFTTicketReply) GetRegistrationFee() int64 {
	if x != nil {
		return x.RegistrationFee
	}
	return 0
}

type SenseSendPreBurntFeeTxidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *SenseSendPreBurntFeeTxidRequest) Reset() {
	*x = SenseSendPreBurntFeeTxidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendPreBurntFeeTxidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendPreBurntFeeTxidRequest) ProtoMessage() {}

func (x *SenseSendPreBurntFeeTxidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendPreBurntFeeTxidRequest.ProtoReflect.Descriptor instead.
func (*SenseSendPreBurntFeeTxidRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{15}
}

func (x *SenseSendPreBurntFeeTxidRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type SenseSendPreBurntFeeTxidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NFTRegTxid string `protobuf:"bytes,1,opt,name=NFT_reg_txid,json=NFTRegTxid,proto3" json:"NFT_reg_txid,omitempty"`
}

func (x *SenseSendPreBurntFeeTxidReply) Reset() {
	*x = SenseSendPreBurntFeeTxidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendPreBurntFeeTxidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendPreBurntFeeTxidReply) ProtoMessage() {}

func (x *SenseSendPreBurntFeeTxidReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendPreBurntFeeTxidReply.ProtoReflect.Descriptor instead.
func (*SenseSendPreBurntFeeTxidReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{16}
}

func (x *SenseSendPreBurntFeeTxidReply) GetNFTRegTxid() string {
	if x != nil {
		return x.NFTRegTxid
	}
	return ""
}

type SenseSendTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket          []byte `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	TicketSignature string `protobuf:"bytes,2,opt,name=ticket_signature,json=ticketSignature,proto3" json:"ticket_signature,omitempty"`
	Fgpt            string `protobuf:"bytes,3,opt,name=fgpt,proto3" json:"fgpt,omitempty"`
	FgptSignature   string `protobuf:"bytes,4,opt,name=fgpt_signature,json=fgptSignature,proto3" json:"fgpt_signature,omitempty"`
	FeeTxid         string `protobuf:"bytes,5,opt,name=fee_txid,json=feeTxid,proto3" json:"fee_txid,omitempty"`
	Thumbnail       []byte `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *SenseSendTicketRequest) Reset() {
	*x = SenseSendTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendTicketRequest) ProtoMessage() {}

func (x *SenseSendTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendTicketRequest.ProtoReflect.Descriptor instead.
func (*SenseSendTicketRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{17}
}

func (x *SenseSendTicketRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *SenseSendTicketRequest) GetTicketSignature() string {
	if x != nil {
		return x.TicketSignature
	}
	return ""
}

func (x *SenseSendTicketRequest) GetFgpt() string {
	if x != nil {
		return x.Fgpt
	}
	return ""
}

func (x *SenseSendTicketRequest) GetFgptSignature() string {
	if x != nil {
		return x.FgptSignature
	}
	return ""
}

func (x *SenseSendTicketRequest) GetFeeTxid() string {
	if x != nil {
		return x.FeeTxid
	}
	return ""
}

func (x *SenseSendTicketRequest) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type SenseSendTicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketTxid string `protobuf:"bytes,1,opt,name=ticket_txid,json=ticketTxid,proto3" json:"ticket_txid,omitempty"`
}

func (x *SenseSendTicketReply) Reset() {
	*x = SenseSendTicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseSendTicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseSendTicketReply) ProtoMessage() {}

func (x *SenseSendTicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseSendTicketReply.ProtoReflect.Descriptor instead.
func (*SenseSendTicketReply) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{18}
}

func (x *SenseSendTicketReply) GetTicketTxid() string {
	if x != nil {
		return x.TicketTxid
	}
	return ""
}

type SenseAcceptedNodesReply_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *SenseAcceptedNodesReply_Peer) Reset() {
	*x = SenseAcceptedNodesReply_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseAcceptedNodesReply_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseAcceptedNodesReply_Peer) ProtoMessage() {}

func (x *SenseAcceptedNodesReply_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseAcceptedNodesReply_Peer.ProtoReflect.Descriptor instead.
func (*SenseAcceptedNodesReply_Peer) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SenseAcceptedNodesReply_Peer) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

type SenseMeshNodesRequest_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessID string `protobuf:"bytes,1,opt,name=sessID,proto3" json:"sessID,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *SenseMeshNodesRequest_Node) Reset() {
	*x = SenseMeshNodesRequest_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_register_sense_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenseMeshNodesRequest_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenseMeshNodesRequest_Node) ProtoMessage() {}

func (x *SenseMeshNodesRequest_Node) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_register_sense_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenseMeshNodesRequest_Node.ProtoReflect.Descriptor instead.
func (*SenseMeshNodesRequest_Node) Descriptor() ([]byte, []int) {
	return file_walletnode_register_sense_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SenseMeshNodesRequest_Node) GetSessID() string {
	if x != nil {
		return x.SessID
	}
	return ""
}

func (x *SenseMeshNodesRequest_Node) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

var File_walletnode_register_sense_proto protoreflect.FileDescriptor

var file_walletnode_register_sense_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a,
	0x13, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a,
	0x17, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x1e, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x1a, 0x36, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x65, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x64, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4c, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x44, 0x44, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x44, 0x41, 0x6e,
	0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2a, 0x0a,
	0x16, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x74, 0x69, 0x22, 0xa1, 0x02, 0x0a, 0x1f, 0x53, 0x65,
	0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x6e, 0x66, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x31, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x32, 0x12, 0x4f, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x10, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x64, 0x5f, 0x66, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x64, 0x46, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x4a, 0x0a,
	0x1d, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x53, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x22, 0x41, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65,
	0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x4e, 0x46, 0x54, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x67, 0x54,
	0x78, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x67, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x67, 0x70, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x67, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x37, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x78, 0x69, 0x64, 0x32, 0xc8,
	0x06, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x5b, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x25, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a,
	0x09, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x61,
	0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x54, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x12, 0x6d, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x46, 0x54, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x12, 0x2b, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54,
	0x78, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_walletnode_register_sense_proto_rawDescOnce sync.Once
	file_walletnode_register_sense_proto_rawDescData = file_walletnode_register_sense_proto_rawDesc
)

func file_walletnode_register_sense_proto_rawDescGZIP() []byte {
	file_walletnode_register_sense_proto_rawDescOnce.Do(func() {
		file_walletnode_register_sense_proto_rawDescData = protoimpl.X.CompressGZIP(file_walletnode_register_sense_proto_rawDescData)
	})
	return file_walletnode_register_sense_proto_rawDescData
}

var file_walletnode_register_sense_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_walletnode_register_sense_proto_goTypes = []interface{}{
	(*SenseSessionRequest)(nil),             // 0: walletnode.SenseSessionRequest
	(*SenseSessionReply)(nil),               // 1: walletnode.SenseSessionReply
	(*SenseAcceptedNodesRequest)(nil),       // 2: walletnode.SenseAcceptedNodesRequest
	(*SenseAcceptedNodesReply)(nil),         // 3: walletnode.SenseAcceptedNodesReply
	(*SenseConnectToRequest)(nil),           // 4: walletnode.SenseConnectToRequest
	(*SenseConnectToReply)(nil),             // 5: walletnode.SenseConnectToReply
	(*SenseMeshNodesRequest)(nil),           // 6: walletnode.SenseMeshNodesRequest
	(*SenseMeshNodesReply)(nil),             // 7: walletnode.SenseMeshNodesReply
	(*SenseSendRegMetadataRequest)(nil),     // 8: walletnode.SenseSendRegMetadataRequest
	(*SenseSendRegMetadataReply)(nil),       // 9: walletnode.SenseSendRegMetadataReply
	(*SenseProbeImageRequest)(nil),          // 10: walletnode.SenseProbeImageRequest
	(*SenseProbeImageReply)(nil),            // 11: walletnode.SenseProbeImageReply
	(*SenseEncoderParameters)(nil),          // 12: walletnode.SenseEncoderParameters
	(*SenseSendSignedNFTTicketRequest)(nil), // 13: walletnode.SenseSendSignedNFTTicketRequest
	(*SenseSendSignedNFTTicketReply)(nil),   // 14: walletnode.SenseSendSignedNFTTicketReply
	(*SenseSendPreBurntFeeTxidRequest)(nil), // 15: walletnode.SenseSendPreBurntFeeTxidRequest
	(*SenseSendPreBurntFeeTxidReply)(nil),   // 16: walletnode.SenseSendPreBurntFeeTxidReply
	(*SenseSendTicketRequest)(nil),          // 17: walletnode.SenseSendTicketRequest
	(*SenseSendTicketReply)(nil),            // 18: walletnode.SenseSendTicketReply
	(*SenseAcceptedNodesReply_Peer)(nil),    // 19: walletnode.SenseAcceptedNodesReply.Peer
	(*SenseMeshNodesRequest_Node)(nil),      // 20: walletnode.SenseMeshNodesRequest.Node
}
var file_walletnode_register_sense_proto_depIdxs = []int32{
	19, // 0: walletnode.SenseAcceptedNodesReply.peers:type_name -> walletnode.SenseAcceptedNodesReply.Peer
	20, // 1: walletnode.SenseMeshNodesRequest.nodes:type_name -> walletnode.SenseMeshNodesRequest.Node
	12, // 2: walletnode.SenseSendSignedNFTTicketRequest.encode_parameters:type_name -> walletnode.SenseEncoderParameters
	0,  // 3: walletnode.RegisterSense.Session:input_type -> walletnode.SenseSessionRequest
	2,  // 4: walletnode.RegisterSense.AcceptedNodes:input_type -> walletnode.SenseAcceptedNodesRequest
	4,  // 5: walletnode.RegisterSense.ConnectTo:input_type -> walletnode.SenseConnectToRequest
	6,  // 6: walletnode.RegisterSense.MeshNodes:input_type -> walletnode.SenseMeshNodesRequest
	8,  // 7: walletnode.RegisterSense.SendRegMetadata:input_type -> walletnode.SenseSendRegMetadataRequest
	10, // 8: walletnode.RegisterSense.ProbeImage:input_type -> walletnode.SenseProbeImageRequest
	13, // 9: walletnode.RegisterSense.SendSignedNFTTicket:input_type -> walletnode.SenseSendSignedNFTTicketRequest
	15, // 10: walletnode.RegisterSense.SendPreBurntFeeTxid:input_type -> walletnode.SenseSendPreBurntFeeTxidRequest
	17, // 11: walletnode.RegisterSense.SendTicket:input_type -> walletnode.SenseSendTicketRequest
	1,  // 12: walletnode.RegisterSense.Session:output_type -> walletnode.SenseSessionReply
	3,  // 13: walletnode.RegisterSense.AcceptedNodes:output_type -> walletnode.SenseAcceptedNodesReply
	5,  // 14: walletnode.RegisterSense.ConnectTo:output_type -> walletnode.SenseConnectToReply
	7,  // 15: walletnode.RegisterSense.MeshNodes:output_type -> walletnode.SenseMeshNodesReply
	9,  // 16: walletnode.RegisterSense.SendRegMetadata:output_type -> walletnode.SenseSendRegMetadataReply
	11, // 17: walletnode.RegisterSense.ProbeImage:output_type -> walletnode.SenseProbeImageReply
	14, // 18: walletnode.RegisterSense.SendSignedNFTTicket:output_type -> walletnode.SenseSendSignedNFTTicketReply
	16, // 19: walletnode.RegisterSense.SendPreBurntFeeTxid:output_type -> walletnode.SenseSendPreBurntFeeTxidReply
	18, // 20: walletnode.RegisterSense.SendTicket:output_type -> walletnode.SenseSendTicketReply
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_walletnode_register_sense_proto_init() }
func file_walletnode_register_sense_proto_init() {
	if File_walletnode_register_sense_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_walletnode_register_sense_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseAcceptedNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseAcceptedNodesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseConnectToRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseConnectToReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseMeshNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseMeshNodesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendRegMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendRegMetadataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseProbeImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseProbeImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseEncoderParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendSignedNFTTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendSignedNFTTicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendPreBurntFeeTxidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendPreBurntFeeTxidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseSendTicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseAcceptedNodesReply_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_register_sense_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenseMeshNodesRequest_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_walletnode_register_sense_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_walletnode_register_sense_proto_goTypes,
		DependencyIndexes: file_walletnode_register_sense_proto_depIdxs,
		MessageInfos:      file_walletnode_register_sense_proto_msgTypes,
	}.Build()
	File_walletnode_register_sense_proto = out.File
	file_walletnode_register_sense_proto_rawDesc = nil
	file_walletnode_register_sense_proto_goTypes = nil
	file_walletnode_register_sense_proto_depIdxs = nil
}
