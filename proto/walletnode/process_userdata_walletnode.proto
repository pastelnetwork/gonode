syntax = "proto3";

option go_package =
    "github.com/pastelnetwork/gonode/proto/walletnode";

package walletnode;

service ProcessUserdata {
  // Session informs the supernode its position (primary/secondary).
  // Returns `SessID` that are used by all other rpc methods to identify the
  // task on the supernode. By sending `sessID` in the Metadata. The stream is
  // used by the parties to inform each other about the cancellation of the
  // task.
  rpc Session(stream MDLSessionRequest) returns(stream MDLSessionReply);

  // AcceptedNodes returns peers of the secondary supernodes connected to it.
  rpc AcceptedNodes(MDLAcceptedNodesRequest) returns(MDLAcceptedNodesReply);

  // ConnectTo requests to connect to the primary supernode.
  rpc ConnectTo(MDLConnectToRequest) returns(MDLConnectToReply);

  // SendUserdata send the user info and return the operation is success or
  // detail on error.
  rpc SendUserdata(UserdataRequest) returns(UserdataReply);

  // ReceiveUserdata receive the user info and return the operation is success
  // or detail on error.
  rpc ReceiveUserdata(RetrieveRequest) returns(UserdataRequest);
}

message MDLSessionRequest { bool is_primary = 1; }
message MDLSessionReply { string sessID = 1; }

message MDLAcceptedNodesRequest {}
message MDLAcceptedNodesReply {
  message Peer { string nodeID = 1; }
  repeated Peer peers = 1;
}

message MDLConnectToRequest {
  string sessID = 1;
  string nodeID = 2;
}
message MDLConnectToReply {}

message UserdataRequest {
  // Real name of the user
  string realname = 1;
  // Facebook link of the user
  string facebook_link = 2;
  // Twitter link of the user
  string twitter_link = 3;
  // Native currency of user in ISO 4217 Alphabetic Code
  string native_currency = 4;
  // Location of the user
  string location = 5;
  // Primary language of the user
  string primary_language = 6;
  // The categories of user's work
  string categories = 7;
  // Biography of the user
  string biography = 8;

  message UserImageUpload {
    bytes content = 1;
    string filename = 2;
  }
  // Avatar image of the user
  UserImageUpload avatar_image = 9;
  // Cover photo of the user
  UserImageUpload cover_photo = 10;
  // Artist's PastelID
  string artist_pastelID = 11;
  // Epoch Timestamp of the request
  int64 timestamp = 12;
  // Previous block hash in the chain
  string previous_block_hash = 13;
  // UserdataHash represents UserdataProcessRequest's hash value, to make sure
  // UserdataProcessRequest's integrity
  string userdata_hash = 14;
  // Signature of the userdata_hash
  string signature = 15;
  // Command is database operation that will apply to the data
	string command = 16;
	// Data is the walletnode metric that will set/get to/from Metadata Layer
	bytes data = 17;
}

message UserdataReply {
  // Result of the request is success or not
  int32 response_code = 1;
  // The detail of why result is success/fail, depend on response_code
  string detail = 2;
  // Error detail on realname
  string realname = 3;
  // Error detail on facebook_link
  string facebook_link = 4;
  // Error detail on twitter_link
  string twitter_link = 5;
  // Error detail on native_currency
  string native_currency = 6;
  // Error detail on location
  string location = 7;
  // Error detail on primary_language
  string primary_language = 8;
  // Error detail on categories
  string categories = 9;
  // Error detail on biography
  string biography = 10;
  // Error detail on avatar
  string avatar_image = 11;
  // Error detail on cover photo
  string cover_photo = 12;
}

message RetrieveRequest {
  // User pastelid
  string userpastelid = 1;
}