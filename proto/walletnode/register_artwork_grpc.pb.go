// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package walletnode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterArtworkClient is the client API for RegisterArtwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterArtworkClient interface {
	// Session informs the supernode its position (primary/secondary).
	// Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(ctx context.Context, opts ...grpc.CallOption) (RegisterArtwork_SessionClient, error)
	// AcceptedNodes returns peers of the secondary supernodes connected to it.
	AcceptedNodes(ctx context.Context, in *AcceptedNodesRequest, opts ...grpc.CallOption) (*AcceptedNodesReply, error)
	// ConnectTo requests to connect to the primary supernode.
	ConnectTo(ctx context.Context, in *ConnectToRequest, opts ...grpc.CallOption) (*ConnectToReply, error)
	// ProbeImage uploads the resampled image compute and return a fingerpirnt.
	ProbeImage(ctx context.Context, opts ...grpc.CallOption) (RegisterArtwork_ProbeImageClient, error)
	// SendTicket sends a ticket to the supernode.
	SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error)
}

type registerArtworkClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterArtworkClient(cc grpc.ClientConnInterface) RegisterArtworkClient {
	return &registerArtworkClient{cc}
}

func (c *registerArtworkClient) Session(ctx context.Context, opts ...grpc.CallOption) (RegisterArtwork_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterArtwork_ServiceDesc.Streams[0], "/walletnode.RegisterArtwork/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerArtworkSessionClient{stream}
	return x, nil
}

type RegisterArtwork_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type registerArtworkSessionClient struct {
	grpc.ClientStream
}

func (x *registerArtworkSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerArtworkSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerArtworkClient) AcceptedNodes(ctx context.Context, in *AcceptedNodesRequest, opts ...grpc.CallOption) (*AcceptedNodesReply, error) {
	out := new(AcceptedNodesReply)
	err := c.cc.Invoke(ctx, "/walletnode.RegisterArtwork/AcceptedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerArtworkClient) ConnectTo(ctx context.Context, in *ConnectToRequest, opts ...grpc.CallOption) (*ConnectToReply, error) {
	out := new(ConnectToReply)
	err := c.cc.Invoke(ctx, "/walletnode.RegisterArtwork/ConnectTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerArtworkClient) ProbeImage(ctx context.Context, opts ...grpc.CallOption) (RegisterArtwork_ProbeImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterArtwork_ServiceDesc.Streams[1], "/walletnode.RegisterArtwork/ProbeImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerArtworkProbeImageClient{stream}
	return x, nil
}

type RegisterArtwork_ProbeImageClient interface {
	Send(*ProbeImageRequest) error
	CloseAndRecv() (*ProbeImageReply, error)
	grpc.ClientStream
}

type registerArtworkProbeImageClient struct {
	grpc.ClientStream
}

func (x *registerArtworkProbeImageClient) Send(m *ProbeImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerArtworkProbeImageClient) CloseAndRecv() (*ProbeImageReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProbeImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerArtworkClient) SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error) {
	out := new(SendTicketReply)
	err := c.cc.Invoke(ctx, "/walletnode.RegisterArtwork/SendTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterArtworkServer is the server API for RegisterArtwork service.
// All implementations must embed UnimplementedRegisterArtworkServer
// for forward compatibility
type RegisterArtworkServer interface {
	// Session informs the supernode its position (primary/secondary).
	// Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(RegisterArtwork_SessionServer) error
	// AcceptedNodes returns peers of the secondary supernodes connected to it.
	AcceptedNodes(context.Context, *AcceptedNodesRequest) (*AcceptedNodesReply, error)
	// ConnectTo requests to connect to the primary supernode.
	ConnectTo(context.Context, *ConnectToRequest) (*ConnectToReply, error)
	// ProbeImage uploads the resampled image compute and return a fingerpirnt.
	ProbeImage(RegisterArtwork_ProbeImageServer) error
	// SendTicket sends a ticket to the supernode.
	SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error)
	mustEmbedUnimplementedRegisterArtworkServer()
}

// UnimplementedRegisterArtworkServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterArtworkServer struct {
}

func (UnimplementedRegisterArtworkServer) Session(RegisterArtwork_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedRegisterArtworkServer) AcceptedNodes(context.Context, *AcceptedNodesRequest) (*AcceptedNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedNodes not implemented")
}
func (UnimplementedRegisterArtworkServer) ConnectTo(context.Context, *ConnectToRequest) (*ConnectToReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTo not implemented")
}
func (UnimplementedRegisterArtworkServer) ProbeImage(RegisterArtwork_ProbeImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ProbeImage not implemented")
}
func (UnimplementedRegisterArtworkServer) SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}
func (UnimplementedRegisterArtworkServer) mustEmbedUnimplementedRegisterArtworkServer() {}

// UnsafeRegisterArtworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterArtworkServer will
// result in compilation errors.
type UnsafeRegisterArtworkServer interface {
	mustEmbedUnimplementedRegisterArtworkServer()
}

func RegisterRegisterArtworkServer(s grpc.ServiceRegistrar, srv RegisterArtworkServer) {
	s.RegisterService(&RegisterArtwork_ServiceDesc, srv)
}

func _RegisterArtwork_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterArtworkServer).Session(&registerArtworkSessionServer{stream})
}

type RegisterArtwork_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type registerArtworkSessionServer struct {
	grpc.ServerStream
}

func (x *registerArtworkSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerArtworkSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterArtwork_AcceptedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).AcceptedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.RegisterArtwork/AcceptedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).AcceptedNodes(ctx, req.(*AcceptedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterArtwork_ConnectTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).ConnectTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.RegisterArtwork/ConnectTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).ConnectTo(ctx, req.(*ConnectToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterArtwork_ProbeImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterArtworkServer).ProbeImage(&registerArtworkProbeImageServer{stream})
}

type RegisterArtwork_ProbeImageServer interface {
	SendAndClose(*ProbeImageReply) error
	Recv() (*ProbeImageRequest, error)
	grpc.ServerStream
}

type registerArtworkProbeImageServer struct {
	grpc.ServerStream
}

func (x *registerArtworkProbeImageServer) SendAndClose(m *ProbeImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerArtworkProbeImageServer) Recv() (*ProbeImageRequest, error) {
	m := new(ProbeImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterArtwork_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletnode.RegisterArtwork/SendTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).SendTicket(ctx, req.(*SendTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterArtwork_ServiceDesc is the grpc.ServiceDesc for RegisterArtwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterArtwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "walletnode.RegisterArtwork",
	HandlerType: (*RegisterArtworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptedNodes",
			Handler:    _RegisterArtwork_AcceptedNodes_Handler,
		},
		{
			MethodName: "ConnectTo",
			Handler:    _RegisterArtwork_ConnectTo_Handler,
		},
		{
			MethodName: "SendTicket",
			Handler:    _RegisterArtwork_SendTicket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _RegisterArtwork_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProbeImage",
			Handler:       _RegisterArtwork_ProbeImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "walletnode/register_artwork.proto",
}
