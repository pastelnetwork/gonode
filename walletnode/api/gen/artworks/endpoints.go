// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks endpoints
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package artworks

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "artworks" service endpoints.
type Endpoints struct {
	Register          goa.Endpoint
	RegisterTaskState goa.Endpoint
	RegisterTask      goa.Endpoint
	RegisterTasks     goa.Endpoint
	UploadImage       goa.Endpoint
	ArtSearch         goa.Endpoint
}

// RegisterTaskStateEndpointInput holds both the payload and the server stream
// of the "registerTaskState" method.
type RegisterTaskStateEndpointInput struct {
	// Payload is the method payload.
	Payload *RegisterTaskStatePayload
	// Stream is the server stream used by the "registerTaskState" method to send
	// data.
	Stream RegisterTaskStateServerStream
}

// ArtSearchEndpointInput holds both the payload and the server stream of the
// "artSearch" method.
type ArtSearchEndpointInput struct {
	// Payload is the method payload.
	Payload *ArtSearchPayload
	// Stream is the server stream used by the "artSearch" method to send data.
	Stream ArtSearchServerStream
}

// NewEndpoints wraps the methods of the "artworks" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Register:          NewRegisterEndpoint(s),
		RegisterTaskState: NewRegisterTaskStateEndpoint(s),
		RegisterTask:      NewRegisterTaskEndpoint(s),
		RegisterTasks:     NewRegisterTasksEndpoint(s),
		UploadImage:       NewUploadImageEndpoint(s),
		ArtSearch:         NewArtSearchEndpoint(s),
	}
}

// Use applies the given middleware to all the "artworks" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
	e.RegisterTaskState = m(e.RegisterTaskState)
	e.RegisterTask = m(e.RegisterTask)
	e.RegisterTasks = m(e.RegisterTasks)
	e.UploadImage = m(e.UploadImage)
	e.ArtSearch = m(e.ArtSearch)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "artworks".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterPayload)
		res, err := s.Register(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedRegisterResult(res, "default")
		return vres, nil
	}
}

// NewRegisterTaskStateEndpoint returns an endpoint function that calls the
// method "registerTaskState" of service "artworks".
func NewRegisterTaskStateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*RegisterTaskStateEndpointInput)
		return nil, s.RegisterTaskState(ctx, ep.Payload, ep.Stream)
	}
}

// NewRegisterTaskEndpoint returns an endpoint function that calls the method
// "registerTask" of service "artworks".
func NewRegisterTaskEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterTaskPayload)
		res, err := s.RegisterTask(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTask(res, "default")
		return vres, nil
	}
}

// NewRegisterTasksEndpoint returns an endpoint function that calls the method
// "registerTasks" of service "artworks".
func NewRegisterTasksEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.RegisterTasks(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTaskCollection(res, "tiny")
		return vres, nil
	}
}

// NewUploadImageEndpoint returns an endpoint function that calls the method
// "uploadImage" of service "artworks".
func NewUploadImageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UploadImagePayload)
		res, err := s.UploadImage(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedImage(res, "default")
		return vres, nil
	}
}

// NewArtSearchEndpoint returns an endpoint function that calls the method
// "artSearch" of service "artworks".
func NewArtSearchEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*ArtSearchEndpointInput)
		return nil, s.ArtSearch(ctx, ep.Payload, ep.Stream)
	}
}
