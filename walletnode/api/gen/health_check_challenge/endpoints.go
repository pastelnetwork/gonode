// Code generated by goa v3.15.0, DO NOT EDIT.
//
// HealthCheckChallenge endpoints
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package healthcheckchallenge

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "HealthCheckChallenge" service endpoints.
type Endpoints struct {
	GetSummaryStats goa.Endpoint
}

// NewEndpoints wraps the methods of the "HealthCheckChallenge" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetSummaryStats: NewGetSummaryStatsEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "HealthCheckChallenge" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetSummaryStats = m(e.GetSummaryStats)
}

// NewGetSummaryStatsEndpoint returns an endpoint function that calls the
// method "getSummaryStats" of service "HealthCheckChallenge".
func NewGetSummaryStatsEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetSummaryStatsPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "api_key",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.GetSummaryStats(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedHcSummaryStatsResult(res, "default")
		return vres, nil
	}
}
