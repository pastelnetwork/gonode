// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package metrics

import (
	"context"

	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Metrics service for fetching data over a specified time range
type Service interface {
	// Fetches metrics data over a specified time range
	GetMetrics(context.Context, *GetMetricsPayload) (res *MetricsResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "metrics"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getMetrics"}

// GetMetricsPayload is the payload type of the metrics service getMetrics
// method.
type GetMetricsPayload struct {
	// Start time for the metrics data range
	From *string
	// End time for the metrics data range
	To *string
	// PastelID of the user to fetch metrics for
	Pid string
	// Passphrase of the owner's PastelID
	Key string
}

// MetricsResult is the result type of the metrics service getMetrics method.
type MetricsResult struct {
	// SCMetrics represents serialized metrics data
	ScMetrics []byte
	// Self-healing trigger metrics
	ShTriggerMetrics []*SHTriggerMetric
	// Self-healing execution metrics
	ShExecutionMetrics *SHExecutionMetrics
}

// Self-healing execution metrics
type SHExecutionMetrics struct {
	// Total number of challenges issued
	TotalChallengesIssued int
	// Total number of challenges rejected
	TotalChallengesRejected int
	// Total number of challenges accepted
	TotalChallengesAccepted int
	// Total number of challenges failed
	TotalChallengesFailed int
	// Total number of challenges successful
	TotalChallengesSuccessful int
	// Total number of files healed
	TotalFilesHealed int
	// Total number of file healings that failed
	TotalFileHealingFailed int
}

// Self-healing trigger metric
type SHTriggerMetric struct {
	// Unique identifier for the trigger
	TriggerID string
	// Number of nodes offline
	NodesOffline int
	// Comma-separated list of offline nodes
	ListOfNodes string
	// Total number of files identified for self-healing
	TotalFilesIdentified int
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified int
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalServerError", false, false, false)
}

// NewMetricsResult initializes result type MetricsResult from viewed result
// type MetricsResult.
func NewMetricsResult(vres *metricsviews.MetricsResult) *MetricsResult {
	return newMetricsResult(vres.Projected)
}

// NewViewedMetricsResult initializes viewed result type MetricsResult from
// result type MetricsResult using the given view.
func NewViewedMetricsResult(res *MetricsResult, view string) *metricsviews.MetricsResult {
	p := newMetricsResultView(res)
	return &metricsviews.MetricsResult{Projected: p, View: "default"}
}

// newMetricsResult converts projected type MetricsResult to service type
// MetricsResult.
func newMetricsResult(vres *metricsviews.MetricsResultView) *MetricsResult {
	res := &MetricsResult{
		ScMetrics: vres.ScMetrics,
	}
	if vres.ShTriggerMetrics != nil {
		res.ShTriggerMetrics = make([]*SHTriggerMetric, len(vres.ShTriggerMetrics))
		for i, val := range vres.ShTriggerMetrics {
			res.ShTriggerMetrics[i] = transformMetricsviewsSHTriggerMetricViewToSHTriggerMetric(val)
		}
	}
	if vres.ShExecutionMetrics != nil {
		res.ShExecutionMetrics = transformMetricsviewsSHExecutionMetricsViewToSHExecutionMetrics(vres.ShExecutionMetrics)
	}
	return res
}

// newMetricsResultView projects result type MetricsResult to projected type
// MetricsResultView using the "default" view.
func newMetricsResultView(res *MetricsResult) *metricsviews.MetricsResultView {
	vres := &metricsviews.MetricsResultView{
		ScMetrics: res.ScMetrics,
	}
	if res.ShTriggerMetrics != nil {
		vres.ShTriggerMetrics = make([]*metricsviews.SHTriggerMetricView, len(res.ShTriggerMetrics))
		for i, val := range res.ShTriggerMetrics {
			vres.ShTriggerMetrics[i] = transformSHTriggerMetricToMetricsviewsSHTriggerMetricView(val)
		}
	} else {
		vres.ShTriggerMetrics = []*metricsviews.SHTriggerMetricView{}
	}
	if res.ShExecutionMetrics != nil {
		vres.ShExecutionMetrics = transformSHExecutionMetricsToMetricsviewsSHExecutionMetricsView(res.ShExecutionMetrics)
	}
	return vres
}

// transformMetricsviewsSHTriggerMetricViewToSHTriggerMetric builds a value of
// type *SHTriggerMetric from a value of type *metricsviews.SHTriggerMetricView.
func transformMetricsviewsSHTriggerMetricViewToSHTriggerMetric(v *metricsviews.SHTriggerMetricView) *SHTriggerMetric {
	if v == nil {
		return nil
	}
	res := &SHTriggerMetric{
		TriggerID:              *v.TriggerID,
		NodesOffline:           *v.NodesOffline,
		ListOfNodes:            *v.ListOfNodes,
		TotalFilesIdentified:   *v.TotalFilesIdentified,
		TotalTicketsIdentified: *v.TotalTicketsIdentified,
	}

	return res
}

// transformMetricsviewsSHExecutionMetricsViewToSHExecutionMetrics builds a
// value of type *SHExecutionMetrics from a value of type
// *metricsviews.SHExecutionMetricsView.
func transformMetricsviewsSHExecutionMetricsViewToSHExecutionMetrics(v *metricsviews.SHExecutionMetricsView) *SHExecutionMetrics {
	if v == nil {
		return nil
	}
	res := &SHExecutionMetrics{
		TotalChallengesIssued:     *v.TotalChallengesIssued,
		TotalChallengesRejected:   *v.TotalChallengesRejected,
		TotalChallengesAccepted:   *v.TotalChallengesAccepted,
		TotalChallengesFailed:     *v.TotalChallengesFailed,
		TotalChallengesSuccessful: *v.TotalChallengesSuccessful,
		TotalFilesHealed:          *v.TotalFilesHealed,
		TotalFileHealingFailed:    *v.TotalFileHealingFailed,
	}

	return res
}

// transformSHTriggerMetricToMetricsviewsSHTriggerMetricView builds a value of
// type *metricsviews.SHTriggerMetricView from a value of type *SHTriggerMetric.
func transformSHTriggerMetricToMetricsviewsSHTriggerMetricView(v *SHTriggerMetric) *metricsviews.SHTriggerMetricView {
	res := &metricsviews.SHTriggerMetricView{
		TriggerID:              &v.TriggerID,
		NodesOffline:           &v.NodesOffline,
		ListOfNodes:            &v.ListOfNodes,
		TotalFilesIdentified:   &v.TotalFilesIdentified,
		TotalTicketsIdentified: &v.TotalTicketsIdentified,
	}

	return res
}

// transformSHExecutionMetricsToMetricsviewsSHExecutionMetricsView builds a
// value of type *metricsviews.SHExecutionMetricsView from a value of type
// *SHExecutionMetrics.
func transformSHExecutionMetricsToMetricsviewsSHExecutionMetricsView(v *SHExecutionMetrics) *metricsviews.SHExecutionMetricsView {
	res := &metricsviews.SHExecutionMetricsView{
		TotalChallengesIssued:     &v.TotalChallengesIssued,
		TotalChallengesRejected:   &v.TotalChallengesRejected,
		TotalChallengesAccepted:   &v.TotalChallengesAccepted,
		TotalChallengesFailed:     &v.TotalChallengesFailed,
		TotalChallengesSuccessful: &v.TotalChallengesSuccessful,
		TotalFilesHealed:          &v.TotalFilesHealed,
		TotalFileHealingFailed:    &v.TotalFileHealingFailed,
	}

	return res
}
