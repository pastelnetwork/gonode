// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package metrics

import (
	"context"

	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// OpenAPI Metrics service
type Service interface {
	// returns the self-healing metrics
	SelfHealing(context.Context, *MetricsPayload) (res *SelfHealingMetrics, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "metrics"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"selfHealing"}

// MetricsPayload is the payload type of the metrics service selfHealing method.
type MetricsPayload struct {
	// Owner's PastelID
	Pid string
	// Passphrase of the owner's PastelID
	Key string
}

// SelfHealingMetrics is the result type of the metrics service selfHealing
// method.
type SelfHealingMetrics struct {
	// Tickets send for self-healing
	TotalTicketsSendForSelfHealing *int
	// Total estimated missing keys
	EstimatedMissingKeys *int
	// Tickets required self healing
	TicketsRequiredSelfHealing *int
	// Tickets self-healed successfully
	TicketsSelfHealedSuccessfully *int
	// Tickets verified successfully
	TicketsVerifiedSuccessfully *int
}

// MakeUnAuthorized builds a goa.ServiceError from an error.
func MakeUnAuthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "UnAuthorized", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalServerError", false, false, false)
}

// NewSelfHealingMetrics initializes result type SelfHealingMetrics from viewed
// result type SelfHealingMetrics.
func NewSelfHealingMetrics(vres *metricsviews.SelfHealingMetrics) *SelfHealingMetrics {
	return newSelfHealingMetrics(vres.Projected)
}

// NewViewedSelfHealingMetrics initializes viewed result type
// SelfHealingMetrics from result type SelfHealingMetrics using the given view.
func NewViewedSelfHealingMetrics(res *SelfHealingMetrics, view string) *metricsviews.SelfHealingMetrics {
	p := newSelfHealingMetricsView(res)
	return &metricsviews.SelfHealingMetrics{Projected: p, View: "default"}
}

// newSelfHealingMetrics converts projected type SelfHealingMetrics to service
// type SelfHealingMetrics.
func newSelfHealingMetrics(vres *metricsviews.SelfHealingMetricsView) *SelfHealingMetrics {
	res := &SelfHealingMetrics{
		TotalTicketsSendForSelfHealing: vres.TotalTicketsSendForSelfHealing,
		EstimatedMissingKeys:           vres.EstimatedMissingKeys,
		TicketsRequiredSelfHealing:     vres.TicketsRequiredSelfHealing,
		TicketsSelfHealedSuccessfully:  vres.TicketsSelfHealedSuccessfully,
		TicketsVerifiedSuccessfully:    vres.TicketsVerifiedSuccessfully,
	}
	return res
}

// newSelfHealingMetricsView projects result type SelfHealingMetrics to
// projected type SelfHealingMetricsView using the "default" view.
func newSelfHealingMetricsView(res *SelfHealingMetrics) *metricsviews.SelfHealingMetricsView {
	vres := &metricsviews.SelfHealingMetricsView{
		TotalTicketsSendForSelfHealing: res.TotalTicketsSendForSelfHealing,
		EstimatedMissingKeys:           res.EstimatedMissingKeys,
		TicketsRequiredSelfHealing:     res.TicketsRequiredSelfHealing,
		TicketsSelfHealedSuccessfully:  res.TicketsSelfHealedSuccessfully,
		TicketsVerifiedSuccessfully:    res.TicketsVerifiedSuccessfully,
	}
	return vres
}
