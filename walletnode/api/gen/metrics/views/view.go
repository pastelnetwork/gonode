// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics views
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// MetricsResult is the viewed result type that is projected based on a view.
type MetricsResult struct {
	// Type to project
	Projected *MetricsResultView
	// View to render
	View string
}

// MetricsResultView is a type that runs validations on a projected type.
type MetricsResultView struct {
	// SCMetrics represents serialized metrics data
	ScMetrics []byte
	// Self-healing trigger metrics
	ShTriggerMetrics []*SHTriggerMetricView
	// Self-healing execution metrics
	ShExecutionMetrics *SHExecutionMetricsView
}

// SHTriggerMetricView is a type that runs validations on a projected type.
type SHTriggerMetricView struct {
	// Unique identifier for the trigger
	TriggerID *string
	// Number of nodes offline
	NodesOffline *int
	// Comma-separated list of offline nodes
	ListOfNodes *string
	// Total number of files identified for self-healing
	TotalFilesIdentified *int
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified *int
}

// SHExecutionMetricsView is a type that runs validations on a projected type.
type SHExecutionMetricsView struct {
	// Total number of challenges issued
	TotalChallengesIssued *int
	// Total number of challenges acknowledged by the healer node
	TotalChallengesAcknowledged *int
	// Total number of challenges rejected (healer node evaluated that
	// reconstruction is not required)
	TotalChallengesRejected *int
	// Total number of challenges accepted (healer node evaluated that
	// reconstruction is required)
	TotalChallengesAccepted *int
	// Total number of challenges verified
	TotalChallengeEvaluationsVerified *int
	// Total number of reconstructions approved by verifier nodes
	TotalReconstructionRequiredEvaluationsApproved *int
	// Total number of reconstructions not required approved by verifier nodes
	TotalReconstructionNotRequiredEvaluationsApproved *int
	// Total number of challenge evaluations unverified by verifier nodes
	TotalChallengeEvaluationsUnverified *int
	// Total number of reconstructions not approved by verifier nodes
	TotalReconstructionRequiredEvaluationsNotApproved *int
	// Total number of reconstructions not required evaluation not approved by
	// verifier nodes
	TotalReconstructionsNotRequiredEvaluationsNotApproved *int
	// Total number of files healed
	TotalFilesHealed *int
	// Total number of file healings that failed
	TotalFileHealingFailed *int
}

var (
	// MetricsResultMap is a map indexing the attribute names of MetricsResult by
	// view name.
	MetricsResultMap = map[string][]string{
		"default": {
			"sc_metrics",
			"sh_trigger_metrics",
			"sh_execution_metrics",
		},
	}
)

// ValidateMetricsResult runs the validations defined on the viewed result type
// MetricsResult.
func ValidateMetricsResult(result *MetricsResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMetricsResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMetricsResultView runs the validations defined on MetricsResultView
// using the "default" view.
func ValidateMetricsResultView(result *MetricsResultView) (err error) {
	if result.ScMetrics == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sc_metrics", "result"))
	}
	if result.ShTriggerMetrics == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sh_trigger_metrics", "result"))
	}
	if result.ShExecutionMetrics == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sh_execution_metrics", "result"))
	}
	for _, e := range result.ShTriggerMetrics {
		if e != nil {
			if err2 := ValidateSHTriggerMetricView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.ShExecutionMetrics != nil {
		if err2 := ValidateSHExecutionMetricsView(result.ShExecutionMetrics); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSHTriggerMetricView runs the validations defined on
// SHTriggerMetricView.
func ValidateSHTriggerMetricView(result *SHTriggerMetricView) (err error) {
	if result.TriggerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trigger_id", "result"))
	}
	if result.NodesOffline == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nodes_offline", "result"))
	}
	if result.ListOfNodes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list_of_nodes", "result"))
	}
	if result.TotalFilesIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_identified", "result"))
	}
	if result.TotalTicketsIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_tickets_identified", "result"))
	}
	return
}

// ValidateSHExecutionMetricsView runs the validations defined on
// SHExecutionMetricsView.
func ValidateSHExecutionMetricsView(result *SHExecutionMetricsView) (err error) {
	if result.TotalChallengesIssued == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_issued", "result"))
	}
	if result.TotalChallengesAcknowledged == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_acknowledged", "result"))
	}
	if result.TotalChallengesRejected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_rejected", "result"))
	}
	if result.TotalChallengesAccepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_accepted", "result"))
	}
	if result.TotalChallengeEvaluationsVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenge_evaluations_verified", "result"))
	}
	if result.TotalReconstructionRequiredEvaluationsApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_required_evaluations_approved", "result"))
	}
	if result.TotalReconstructionNotRequiredEvaluationsApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_not_required_evaluations_approved", "result"))
	}
	if result.TotalChallengeEvaluationsUnverified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenge_evaluations_unverified", "result"))
	}
	if result.TotalReconstructionRequiredEvaluationsNotApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_required_evaluations_not_approved", "result"))
	}
	if result.TotalReconstructionsNotRequiredEvaluationsNotApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstructions_not_required_evaluations_not_approved", "result"))
	}
	if result.TotalFilesHealed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_healed", "result"))
	}
	if result.TotalFileHealingFailed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_file_healing_failed", "result"))
	}
	return
}
