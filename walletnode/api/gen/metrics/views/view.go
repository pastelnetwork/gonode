// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics views
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// MetricsResult is the viewed result type that is projected based on a view.
type MetricsResult struct {
	// Type to project
	Projected *MetricsResultView
	// View to render
	View string
}

// MetricsResultView is a type that runs validations on a projected type.
type MetricsResultView struct {
	// Self-healing trigger stats
	SelfHealingTriggerEventsStats []*SHTriggerStatsView
	// Self-healing execution stats
	SelfHealingExecutionEventsStats *SHExecutionStatsView
}

// SHTriggerStatsView is a type that runs validations on a projected type.
type SHTriggerStatsView struct {
	// Unique identifier for the trigger
	TriggerID *string
	// Number of nodes offline
	NodesOffline *int
	// Comma-separated list of offline nodes
	ListOfNodes *string
	// Total number of files identified for self-healing
	TotalFilesIdentified *int
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified *int
}

// SHExecutionStatsView is a type that runs validations on a projected type.
type SHExecutionStatsView struct {
	// Total number of self-healing events issued
	TotalSelfHealingEventsIssued *int
	// Total number of events acknowledged by the healer node
	TotalSelfHealingEventsAcknowledged *int
	// Total number of events rejected (healer node evaluated that reconstruction
	// is not required)
	TotalSelfHealingEventsRejected *int
	// Total number of events accepted (healer node evaluated that reconstruction
	// is required)
	TotalSelfHealingEventsAccepted *int
	// Total number of challenges verified
	TotalSelfHealingEventsEvaluationsVerified *int
	// Total number of reconstructions approved by verifier nodes
	TotalReconstructionRequiredEvaluationsApproved *int
	// Total number of reconstructions not required approved by verifier nodes
	TotalReconstructionNotRequiredEvaluationsApproved *int
	// Total number of challenge evaluations unverified by verifier nodes
	TotalSelfHealingEventsEvaluationsUnverified *int
	// Total number of reconstructions not approved by verifier nodes
	TotalReconstructionRequiredEvaluationsNotApproved *int
	// Total number of reconstructions not required evaluation not approved by
	// verifier nodes
	TotalReconstructionsNotRequiredEvaluationsNotApproved *int
	// Total number of reconstructions required with hash mismatch
	TotalReconstructionRequiredHashMismatch *int
	// Total number of files healed
	TotalFilesHealed *int
	// Total number of file healings that failed
	TotalFileHealingFailed *int
}

var (
	// MetricsResultMap is a map indexing the attribute names of MetricsResult by
	// view name.
	MetricsResultMap = map[string][]string{
		"default": {
			"self_healing_trigger_events_stats",
			"self_healing_execution_events_stats",
		},
	}
)

// ValidateMetricsResult runs the validations defined on the viewed result type
// MetricsResult.
func ValidateMetricsResult(result *MetricsResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMetricsResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMetricsResultView runs the validations defined on MetricsResultView
// using the "default" view.
func ValidateMetricsResultView(result *MetricsResultView) (err error) {
	if result.SelfHealingTriggerEventsStats == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("self_healing_trigger_events_stats", "result"))
	}
	if result.SelfHealingExecutionEventsStats == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("self_healing_execution_events_stats", "result"))
	}
	for _, e := range result.SelfHealingTriggerEventsStats {
		if e != nil {
			if err2 := ValidateSHTriggerStatsView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.SelfHealingExecutionEventsStats != nil {
		if err2 := ValidateSHExecutionStatsView(result.SelfHealingExecutionEventsStats); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSHTriggerStatsView runs the validations defined on
// SHTriggerStatsView.
func ValidateSHTriggerStatsView(result *SHTriggerStatsView) (err error) {
	if result.TriggerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trigger_id", "result"))
	}
	if result.NodesOffline == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nodes_offline", "result"))
	}
	if result.ListOfNodes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list_of_nodes", "result"))
	}
	if result.TotalFilesIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_identified", "result"))
	}
	if result.TotalTicketsIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_tickets_identified", "result"))
	}
	return
}

// ValidateSHExecutionStatsView runs the validations defined on
// SHExecutionStatsView.
func ValidateSHExecutionStatsView(result *SHExecutionStatsView) (err error) {
	if result.TotalSelfHealingEventsIssued == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_issued", "result"))
	}
	if result.TotalSelfHealingEventsAcknowledged == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_acknowledged", "result"))
	}
	if result.TotalSelfHealingEventsRejected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_rejected", "result"))
	}
	if result.TotalSelfHealingEventsAccepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_accepted", "result"))
	}
	if result.TotalSelfHealingEventsEvaluationsVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_evaluations_verified", "result"))
	}
	if result.TotalReconstructionRequiredEvaluationsApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_required_evaluations_approved", "result"))
	}
	if result.TotalReconstructionNotRequiredEvaluationsApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_not_required_evaluations_approved", "result"))
	}
	if result.TotalSelfHealingEventsEvaluationsUnverified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_evaluations_unverified", "result"))
	}
	if result.TotalReconstructionRequiredEvaluationsNotApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_required_evaluations_not_approved", "result"))
	}
	if result.TotalReconstructionsNotRequiredEvaluationsNotApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstructions_not_required_evaluations_not_approved", "result"))
	}
	if result.TotalFilesHealed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_healed", "result"))
	}
	if result.TotalFileHealingFailed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_file_healing_failed", "result"))
	}
	return
}
