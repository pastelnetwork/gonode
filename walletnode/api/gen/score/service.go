// Code generated by goa v3.15.0, DO NOT EDIT.
//
// Score service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package score

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Score service for return score related to challenges
type Service interface {
	// Fetches aggregated challenges score for SC and HC
	GetAggregatedChallengesScores(context.Context, *GetAggregatedChallengesScoresPayload) (res []*ChallengesScores, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "walletnode"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Score"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getAggregatedChallengesScores"}

// Combined accumulated scores for HC and SC challenges
type ChallengesScores struct {
	// Specific node id
	NodeID string
	// IPAddress of the node
	IPAddress *string
	// Total accumulated SC challenge score
	StorageChallengeScore float64
	// Total accumulated HC challenge score
	HealthCheckChallengeScore float64
}

// GetAggregatedChallengesScoresPayload is the payload type of the Score
// service getAggregatedChallengesScores method.
type GetAggregatedChallengesScoresPayload struct {
	// PastelID of the user to fetch metrics for
	Pid string
	// Passphrase of the owner's PastelID
	Key string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalServerError", false, false, false)
}
