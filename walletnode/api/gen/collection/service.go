// Code generated by goa v3.7.6, DO NOT EDIT.
//
// collection service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package collection

import (
	"context"

	collectionviews "github.com/pastelnetwork/gonode/walletnode/api/gen/collection/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// OpenAPI Collection service
type Service interface {
	// Streams the state of the registration process.
	RegisterCollection(context.Context, *RegisterCollectionPayload) (res *RegisterCollectionResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "collection"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"registerCollection"}

// RegisterCollectionPayload is the payload type of the collection service
// registerCollection method.
type RegisterCollectionPayload struct {
	// name of the collection
	CollectionName string
	// list of authorized contributors
	ListOfPastelidsOfAuthorizedContributors []string
	// max no of entries in the collection
	MaxCollectionEntries int
	// final allowed block height in days
	CollectionFinalAllowedBlockHeight int
	// item copy count in the collection
	CollectionItemCopyCount *int
	// royalty fee
	Royalty *float32
	// green
	Green *bool
	// App PastelID
	AppPastelID string
	// Passphrase of the owner's PastelID
	Key *string
}

// RegisterCollectionResponse is the result type of the collection service
// registerCollection method.
type RegisterCollectionResponse struct {
	// Uploaded file ID
	TaskID string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewRegisterCollectionResponse initializes result type
// RegisterCollectionResponse from viewed result type
// RegisterCollectionResponse.
func NewRegisterCollectionResponse(vres *collectionviews.RegisterCollectionResponse) *RegisterCollectionResponse {
	return newRegisterCollectionResponse(vres.Projected)
}

// NewViewedRegisterCollectionResponse initializes viewed result type
// RegisterCollectionResponse from result type RegisterCollectionResponse using
// the given view.
func NewViewedRegisterCollectionResponse(res *RegisterCollectionResponse, view string) *collectionviews.RegisterCollectionResponse {
	p := newRegisterCollectionResponseView(res)
	return &collectionviews.RegisterCollectionResponse{Projected: p, View: "default"}
}

// newRegisterCollectionResponse converts projected type
// RegisterCollectionResponse to service type RegisterCollectionResponse.
func newRegisterCollectionResponse(vres *collectionviews.RegisterCollectionResponseView) *RegisterCollectionResponse {
	res := &RegisterCollectionResponse{}
	if vres.TaskID != nil {
		res.TaskID = *vres.TaskID
	}
	return res
}

// newRegisterCollectionResponseView projects result type
// RegisterCollectionResponse to projected type RegisterCollectionResponseView
// using the "default" view.
func newRegisterCollectionResponseView(res *RegisterCollectionResponse) *collectionviews.RegisterCollectionResponseView {
	vres := &collectionviews.RegisterCollectionResponseView{
		TaskID: &res.TaskID,
	}
	return vres
}
