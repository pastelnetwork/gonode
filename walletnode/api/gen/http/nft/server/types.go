// Code generated by goa v3.13.1, DO NOT EDIT.
//
// nft HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"unicode/utf8"

	nft "github.com/pastelnetwork/gonode/walletnode/api/gen/nft"
	nftviews "github.com/pastelnetwork/gonode/walletnode/api/gen/nft/views"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "nft" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Uploaded image ID
	ImageID *string `form:"image_id,omitempty" json:"image_id,omitempty" xml:"image_id,omitempty"`
	// Name of the NFT
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the NFT
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	// NFT creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Creator's PastelID
	CreatorPastelID *string `form:"creator_pastelid,omitempty" json:"creator_pastelid,omitempty" xml:"creator_pastelid,omitempty"`
	// Name of the NFT creator
	CreatorName *string `form:"creator_name,omitempty" json:"creator_name,omitempty" xml:"creator_name,omitempty"`
	// NFT creator website URL
	CreatorWebsiteURL *string `form:"creator_website_url,omitempty" json:"creator_website_url,omitempty" xml:"creator_website_url,omitempty"`
	// Spendable address
	SpendableAddress *string `form:"spendable_address,omitempty" json:"spendable_address,omitempty" xml:"spendable_address,omitempty"`
	// Used to find a suitable masternode with a fee equal or less
	MaximumFee *float64 `form:"maximum_fee,omitempty" json:"maximum_fee,omitempty" xml:"maximum_fee,omitempty"`
	// Percentage the artist received in future sales. If set to 0% he only get
	// paids for the first sale on each copy of the NFT
	Royalty *float64 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// To donate 2% of the sale proceeds on every sale to TeamTrees which plants
	// trees
	Green               *bool                           `form:"green,omitempty" json:"green,omitempty" xml:"green,omitempty"`
	ThumbnailCoordinate *ThumbnailcoordinateRequestBody `form:"thumbnail_coordinate,omitempty" json:"thumbnail_coordinate,omitempty" xml:"thumbnail_coordinate,omitempty"`
	// To make it publicly accessible
	MakePubliclyAccessible *bool `form:"make_publicly_accessible,omitempty" json:"make_publicly_accessible,omitempty" xml:"make_publicly_accessible,omitempty"`
	// Act Collection TxID to add given ticket in collection
	CollectionActTxid *string `form:"collection_act_txid,omitempty" json:"collection_act_txid,omitempty" xml:"collection_act_txid,omitempty"`
	// OpenAPI GroupID string
	OpenAPIGroupID *string `form:"open_api_group_id,omitempty" json:"open_api_group_id,omitempty" xml:"open_api_group_id,omitempty"`
}

// UploadImageRequestBody is the type of the "nft" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	Bytes []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
	// For internal use
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
}

// RegisterResponseBody is the type of the "nft" service "register" endpoint
// HTTP response body.
type RegisterResponseBody struct {
	// Task ID of the registration process
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// RegisterTaskStateResponseBody is the type of the "nft" service
// "registerTaskState" endpoint HTTP response body.
type RegisterTaskStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// GetTaskHistoryResponseBody is the type of the "nft" service "getTaskHistory"
// endpoint HTTP response body.
type GetTaskHistoryResponseBody []*TaskHistoryResponse

// RegisterTaskResponseBody is the type of the "nft" service "registerTask"
// endpoint HTTP response body.
type RegisterTaskResponseBody struct {
	// JOb ID of the registration process
	ID string `form:"id" json:"id" xml:"id"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
	// List of states from the very beginning of the process
	States []*TaskStateResponseBody `form:"states,omitempty" json:"states,omitempty" xml:"states,omitempty"`
	// txid
	Txid   *string                         `form:"txid,omitempty" json:"txid,omitempty" xml:"txid,omitempty"`
	Ticket *NftRegisterPayloadResponseBody `form:"ticket" json:"ticket" xml:"ticket"`
}

// TaskResponseTinyCollection is the type of the "nft" service "registerTasks"
// endpoint HTTP response body.
type TaskResponseTinyCollection []*TaskResponseTiny

// UploadImageResponseBody is the type of the "nft" service "uploadImage"
// endpoint HTTP response body.
type UploadImageResponseBody struct {
	// Uploaded image ID
	ImageID string `form:"image_id" json:"image_id" xml:"image_id"`
	// Image expiration
	ExpiresIn string `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// Estimated fee
	EstimatedFee float64 `form:"estimated_fee" json:"estimated_fee" xml:"estimated_fee"`
}

// NftSearchResponseBody is the type of the "nft" service "nftSearch" endpoint
// HTTP response body.
type NftSearchResponseBody struct {
	// NFT data
	Nft *NftSummaryResponseBody `form:"nft" json:"nft" xml:"nft"`
	// Sort index of the match based on score.This must be used to sort results on
	// UI.
	MatchIndex int `form:"match_index" json:"match_index" xml:"match_index"`
	// Match result details
	Matches []*FuzzyMatchResponseBody `form:"matches" json:"matches" xml:"matches"`
}

// NftGetResponseBody is the type of the "nft" service "nftGet" endpoint HTTP
// response body.
type NftGetResponseBody struct {
	// version
	Version *int `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Green address
	GreenAddress *bool `form:"green_address,omitempty" json:"green_address,omitempty" xml:"green_address,omitempty"`
	// how much artist should get on all future resales
	Royalty *float64 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// Storage fee %
	StorageFee *int `form:"storage_fee,omitempty" json:"storage_fee,omitempty" xml:"storage_fee,omitempty"`
	// NSFW Average score
	NsfwScore float32 `form:"nsfw_score" json:"nsfw_score" xml:"nsfw_score"`
	// Average pastel rareness score
	RarenessScore float32 `form:"rareness_score" json:"rareness_score" xml:"rareness_score"`
	// Is this image likely a duplicate of another known image
	IsLikelyDupe bool `form:"is_likely_dupe" json:"is_likely_dupe" xml:"is_likely_dupe"`
	// is this nft rare on the internet
	IsRareOnInternet bool `form:"is_rare_on_internet" json:"is_rare_on_internet" xml:"is_rare_on_internet"`
	// nsfw score
	DrawingNsfwScore *float32 `form:"drawing_nsfw_score,omitempty" json:"drawing_nsfw_score,omitempty" xml:"drawing_nsfw_score,omitempty"`
	// nsfw score
	NeutralNsfwScore *float32 `form:"neutral_nsfw_score,omitempty" json:"neutral_nsfw_score,omitempty" xml:"neutral_nsfw_score,omitempty"`
	// nsfw score
	SexyNsfwScore *float32 `form:"sexy_nsfw_score,omitempty" json:"sexy_nsfw_score,omitempty" xml:"sexy_nsfw_score,omitempty"`
	// nsfw score
	PornNsfwScore *float32 `form:"porn_nsfw_score,omitempty" json:"porn_nsfw_score,omitempty" xml:"porn_nsfw_score,omitempty"`
	// nsfw score
	HentaiNsfwScore *float32 `form:"hentai_nsfw_score,omitempty" json:"hentai_nsfw_score,omitempty" xml:"hentai_nsfw_score,omitempty"`
	// Preview Image
	PreviewThumbnail []byte `form:"preview_thumbnail,omitempty" json:"preview_thumbnail,omitempty" xml:"preview_thumbnail,omitempty"`
	// Base64 Compressed JSON Table of Rare On Internet Summary
	RareOnInternetSummaryTableJSONB64 *string `form:"rare_on_internet_summary_table_json_b64,omitempty" json:"rare_on_internet_summary_table_json_b64,omitempty" xml:"rare_on_internet_summary_table_json_b64,omitempty"`
	// Base64 Compressed JSON of Rare On Internet Graph
	RareOnInternetGraphJSONB64 *string `form:"rare_on_internet_graph_json_b64,omitempty" json:"rare_on_internet_graph_json_b64,omitempty" xml:"rare_on_internet_graph_json_b64,omitempty"`
	// Base64 Compressed Json of Alternative Rare On Internet Dict
	AltRareOnInternetDictJSONB64 *string `form:"alt_rare_on_internet_dict_json_b64,omitempty" json:"alt_rare_on_internet_dict_json_b64,omitempty" xml:"alt_rare_on_internet_dict_json_b64,omitempty"`
	// Minimum Number of Exact Matches on Page
	MinNumExactMatchesOnPage *uint32 `form:"min_num_exact_matches_on_page,omitempty" json:"min_num_exact_matches_on_page,omitempty" xml:"min_num_exact_matches_on_page,omitempty"`
	// Earliest Available Date of Internet Results
	EarliestDateOfResults *string `form:"earliest_date_of_results,omitempty" json:"earliest_date_of_results,omitempty" xml:"earliest_date_of_results,omitempty"`
	// Thumbnail_1 image
	Thumbnail1 []byte `form:"thumbnail_1,omitempty" json:"thumbnail_1,omitempty" xml:"thumbnail_1,omitempty"`
	// Thumbnail_2 image
	Thumbnail2 []byte `form:"thumbnail_2,omitempty" json:"thumbnail_2,omitempty" xml:"thumbnail_2,omitempty"`
	// txid
	Txid string `form:"txid" json:"txid" xml:"txid"`
	// Name of the NFT
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the NFT
	Description string `form:"description" json:"description" xml:"description"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies
	Copies int `form:"copies" json:"copies" xml:"copies"`
	// NFT creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	CreatorPastelID string `form:"creator_pastelid" json:"creator_pastelid" xml:"creator_pastelid"`
	// Name of the artist
	CreatorName string `form:"creator_name" json:"creator_name" xml:"creator_name"`
	// Artist website URL
	CreatorWebsiteURL *string `form:"creator_website_url,omitempty" json:"creator_website_url,omitempty" xml:"creator_website_url,omitempty"`
}

// DownloadResponseBody is the type of the "nft" service "download" endpoint
// HTTP response body.
type DownloadResponseBody struct {
	// File path
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
}

// DdServiceOutputFileDetailResponseBody is the type of the "nft" service
// "ddServiceOutputFileDetail" endpoint HTTP response body.
type DdServiceOutputFileDetailResponseBody struct {
	// block hash when request submitted
	PastelBlockHashWhenRequestSubmitted *string `form:"pastel_block_hash_when_request_submitted,omitempty" json:"pastel_block_hash_when_request_submitted,omitempty" xml:"pastel_block_hash_when_request_submitted,omitempty"`
	// block Height when request submitted
	PastelBlockHeightWhenRequestSubmitted *string `form:"pastel_block_height_when_request_submitted,omitempty" json:"pastel_block_height_when_request_submitted,omitempty" xml:"pastel_block_height_when_request_submitted,omitempty"`
	// timestamp of request when submitted
	UtcTimestampWhenRequestSubmitted *string `form:"utc_timestamp_when_request_submitted,omitempty" json:"utc_timestamp_when_request_submitted,omitempty" xml:"utc_timestamp_when_request_submitted,omitempty"`
	// pastel id of the submitter
	PastelIDOfSubmitter *string `form:"pastel_id_of_submitter,omitempty" json:"pastel_id_of_submitter,omitempty" xml:"pastel_id_of_submitter,omitempty"`
	// pastel id of registering SN1
	PastelIDOfRegisteringSupernode1 *string `form:"pastel_id_of_registering_supernode_1,omitempty" json:"pastel_id_of_registering_supernode_1,omitempty" xml:"pastel_id_of_registering_supernode_1,omitempty"`
	// pastel id of registering SN2
	PastelIDOfRegisteringSupernode2 *string `form:"pastel_id_of_registering_supernode_2,omitempty" json:"pastel_id_of_registering_supernode_2,omitempty" xml:"pastel_id_of_registering_supernode_2,omitempty"`
	// pastel id of registering SN3
	PastelIDOfRegisteringSupernode3 *string `form:"pastel_id_of_registering_supernode_3,omitempty" json:"pastel_id_of_registering_supernode_3,omitempty" xml:"pastel_id_of_registering_supernode_3,omitempty"`
	// is pastel open API request
	IsPastelOpenapiRequest *bool `form:"is_pastel_openapi_request,omitempty" json:"is_pastel_openapi_request,omitempty" xml:"is_pastel_openapi_request,omitempty"`
	// system version of dupe detection
	DupeDetectionSystemVersion *string `form:"dupe_detection_system_version,omitempty" json:"dupe_detection_system_version,omitempty" xml:"dupe_detection_system_version,omitempty"`
	// is this nft likely a duplicate
	IsLikelyDupe *bool `form:"is_likely_dupe,omitempty" json:"is_likely_dupe,omitempty" xml:"is_likely_dupe,omitempty"`
	// is this nft rare on the internet
	IsRareOnInternet *bool `form:"is_rare_on_internet,omitempty" json:"is_rare_on_internet,omitempty" xml:"is_rare_on_internet,omitempty"`
	// pastel rareness score
	OverallRarenessScore *float32 `form:"overall_rareness_score,omitempty" json:"overall_rareness_score,omitempty" xml:"overall_rareness_score,omitempty"`
	// PCT of top 10 most similar with dupe probe above 25 PCT
	PctOfTop10MostSimilarWithDupeProbAbove25pct *float32 `form:"pct_of_top_10_most_similar_with_dupe_prob_above_25pct,omitempty" json:"pct_of_top_10_most_similar_with_dupe_prob_above_25pct,omitempty" xml:"pct_of_top_10_most_similar_with_dupe_prob_above_25pct,omitempty"`
	// PCT of top 10 most similar with dupe probe above 33 PCT
	PctOfTop10MostSimilarWithDupeProbAbove33pct *float32 `form:"pct_of_top_10_most_similar_with_dupe_prob_above_33pct,omitempty" json:"pct_of_top_10_most_similar_with_dupe_prob_above_33pct,omitempty" xml:"pct_of_top_10_most_similar_with_dupe_prob_above_33pct,omitempty"`
	// PCT of top 10 most similar with dupe probe above 50 PCT
	PctOfTop10MostSimilarWithDupeProbAbove50pct *float32 `form:"pct_of_top_10_most_similar_with_dupe_prob_above_50pct,omitempty" json:"pct_of_top_10_most_similar_with_dupe_prob_above_50pct,omitempty" xml:"pct_of_top_10_most_similar_with_dupe_prob_above_50pct,omitempty"`
	// rareness scores table json compressed b64
	RarenessScoresTableJSONCompressedB64 *string `form:"rareness_scores_table_json_compressed_b64,omitempty" json:"rareness_scores_table_json_compressed_b64,omitempty" xml:"rareness_scores_table_json_compressed_b64,omitempty"`
	// open nsfw score
	OpenNsfwScore *float32 `form:"open_nsfw_score,omitempty" json:"open_nsfw_score,omitempty" xml:"open_nsfw_score,omitempty"`
	// Image fingerprint of candidate image file
	ImageFingerprintOfCandidateImageFile []float64 `form:"image_fingerprint_of_candidate_image_file,omitempty" json:"image_fingerprint_of_candidate_image_file,omitempty" xml:"image_fingerprint_of_candidate_image_file,omitempty"`
	// hash of candidate image file
	HashOfCandidateImageFile *string `form:"hash_of_candidate_image_file,omitempty" json:"hash_of_candidate_image_file,omitempty" xml:"hash_of_candidate_image_file,omitempty"`
	// name of the collection
	CollectionNameString *string `form:"collection_name_string,omitempty" json:"collection_name_string,omitempty" xml:"collection_name_string,omitempty"`
	// open api group id string
	OpenAPIGroupIDString *string `form:"open_api_group_id_string,omitempty" json:"open_api_group_id_string,omitempty" xml:"open_api_group_id_string,omitempty"`
	// rareness score of the group
	GroupRarenessScore *float32 `form:"group_rareness_score,omitempty" json:"group_rareness_score,omitempty" xml:"group_rareness_score,omitempty"`
	// candidate image thumbnail as base64 string
	CandidateImageThumbnailWebpAsBase64String *string `form:"candidate_image_thumbnail_webp_as_base64_string,omitempty" json:"candidate_image_thumbnail_webp_as_base64_string,omitempty" xml:"candidate_image_thumbnail_webp_as_base64_string,omitempty"`
	// does not impact collection strings
	DoesNotImpactTheFollowingCollectionStrings *string `form:"does_not_impact_the_following_collection_strings,omitempty" json:"does_not_impact_the_following_collection_strings,omitempty" xml:"does_not_impact_the_following_collection_strings,omitempty"`
	// similarity score to first entry in collection
	SimilarityScoreToFirstEntryInCollection *float32 `form:"similarity_score_to_first_entry_in_collection,omitempty" json:"similarity_score_to_first_entry_in_collection,omitempty" xml:"similarity_score_to_first_entry_in_collection,omitempty"`
	// probability of CP
	CpProbability *float32 `form:"cp_probability,omitempty" json:"cp_probability,omitempty" xml:"cp_probability,omitempty"`
	// child probability
	ChildProbability *float32 `form:"child_probability,omitempty" json:"child_probability,omitempty" xml:"child_probability,omitempty"`
	// file path of the image
	ImageFilePath *string `form:"image_file_path,omitempty" json:"image_file_path,omitempty" xml:"image_file_path,omitempty"`
	// internet rareness
	InternetRareness *InternetRarenessResponseBody `form:"internet_rareness,omitempty" json:"internet_rareness,omitempty" xml:"internet_rareness,omitempty"`
	// alternative NSFW scores
	AlternativeNsfwScores *AlternativeNSFWScoresResponseBody `form:"alternative_nsfw_scores,omitempty" json:"alternative_nsfw_scores,omitempty" xml:"alternative_nsfw_scores,omitempty"`
	// name of the creator
	CreatorName string `form:"creator_name" json:"creator_name" xml:"creator_name"`
	// website of creator
	CreatorWebsite string `form:"creator_website" json:"creator_website" xml:"creator_website"`
	// written statement of creator
	CreatorWrittenStatement string `form:"creator_written_statement" json:"creator_written_statement" xml:"creator_written_statement"`
	// title of NFT
	NftTitle string `form:"nft_title" json:"nft_title" xml:"nft_title"`
	// series name of NFT
	NftSeriesName string `form:"nft_series_name" json:"nft_series_name" xml:"nft_series_name"`
	// nft creation video youtube url
	NftCreationVideoYoutubeURL string `form:"nft_creation_video_youtube_url" json:"nft_creation_video_youtube_url" xml:"nft_creation_video_youtube_url"`
	// keywords for NFT
	NftKeywordSet string `form:"nft_keyword_set" json:"nft_keyword_set" xml:"nft_keyword_set"`
	// total copies of NFT
	TotalCopies int `form:"total_copies" json:"total_copies" xml:"total_copies"`
	// preview hash of NFT
	PreviewHash []byte `form:"preview_hash" json:"preview_hash" xml:"preview_hash"`
	// thumbnail1 hash of NFT
	Thumbnail1Hash []byte `form:"thumbnail1_hash" json:"thumbnail1_hash" xml:"thumbnail1_hash"`
	// thumbnail2 hash of NFT
	Thumbnail2Hash []byte `form:"thumbnail2_hash" json:"thumbnail2_hash" xml:"thumbnail2_hash"`
	// original file size in bytes
	OriginalFileSizeInBytes int `form:"original_file_size_in_bytes" json:"original_file_size_in_bytes" xml:"original_file_size_in_bytes"`
	// type of the file
	FileType string `form:"file_type" json:"file_type" xml:"file_type"`
	// max permitted open NSFW score
	MaxPermittedOpenNsfwScore float64 `form:"max_permitted_open_nsfw_score" json:"max_permitted_open_nsfw_score" xml:"max_permitted_open_nsfw_score"`
}

// DdServiceOutputFileResponseBody is the type of the "nft" service
// "ddServiceOutputFile" endpoint HTTP response body.
type DdServiceOutputFileResponseBody struct {
	// File downloaded
	File string `form:"file" json:"file" xml:"file"`
}

// RegisterUnAuthorizedResponseBody is the type of the "nft" service "register"
// endpoint HTTP response body for the "UnAuthorized" error.
type RegisterUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterBadRequestResponseBody is the type of the "nft" service "register"
// endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterInternalServerErrorResponseBody is the type of the "nft" service
// "register" endpoint HTTP response body for the "InternalServerError" error.
type RegisterInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateNotFoundResponseBody is the type of the "nft" service
// "registerTaskState" endpoint HTTP response body for the "NotFound" error.
type RegisterTaskStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateInternalServerErrorResponseBody is the type of the "nft"
// service "registerTaskState" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTaskStateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTaskHistoryNotFoundResponseBody is the type of the "nft" service
// "getTaskHistory" endpoint HTTP response body for the "NotFound" error.
type GetTaskHistoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTaskHistoryInternalServerErrorResponseBody is the type of the "nft"
// service "getTaskHistory" endpoint HTTP response body for the
// "InternalServerError" error.
type GetTaskHistoryInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskNotFoundResponseBody is the type of the "nft" service
// "registerTask" endpoint HTTP response body for the "NotFound" error.
type RegisterTaskNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskInternalServerErrorResponseBody is the type of the "nft" service
// "registerTask" endpoint HTTP response body for the "InternalServerError"
// error.
type RegisterTaskInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTasksInternalServerErrorResponseBody is the type of the "nft"
// service "registerTasks" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTasksInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageBadRequestResponseBody is the type of the "nft" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "nft" service
// "uploadImage" endpoint HTTP response body for the "InternalServerError"
// error.
type UploadImageInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NftSearchBadRequestResponseBody is the type of the "nft" service "nftSearch"
// endpoint HTTP response body for the "BadRequest" error.
type NftSearchBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NftSearchInternalServerErrorResponseBody is the type of the "nft" service
// "nftSearch" endpoint HTTP response body for the "InternalServerError" error.
type NftSearchInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NftGetBadRequestResponseBody is the type of the "nft" service "nftGet"
// endpoint HTTP response body for the "BadRequest" error.
type NftGetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NftGetNotFoundResponseBody is the type of the "nft" service "nftGet"
// endpoint HTTP response body for the "NotFound" error.
type NftGetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NftGetInternalServerErrorResponseBody is the type of the "nft" service
// "nftGet" endpoint HTTP response body for the "InternalServerError" error.
type NftGetInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadUnAuthorizedResponseBody is the type of the "nft" service "download"
// endpoint HTTP response body for the "UnAuthorized" error.
type DownloadUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadNotFoundResponseBody is the type of the "nft" service "download"
// endpoint HTTP response body for the "NotFound" error.
type DownloadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadInternalServerErrorResponseBody is the type of the "nft" service
// "download" endpoint HTTP response body for the "InternalServerError" error.
type DownloadInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DdServiceOutputFileDetailUnAuthorizedResponseBody is the type of the "nft"
// service "ddServiceOutputFileDetail" endpoint HTTP response body for the
// "UnAuthorized" error.
type DdServiceOutputFileDetailUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DdServiceOutputFileDetailNotFoundResponseBody is the type of the "nft"
// service "ddServiceOutputFileDetail" endpoint HTTP response body for the
// "NotFound" error.
type DdServiceOutputFileDetailNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DdServiceOutputFileDetailInternalServerErrorResponseBody is the type of the
// "nft" service "ddServiceOutputFileDetail" endpoint HTTP response body for
// the "InternalServerError" error.
type DdServiceOutputFileDetailInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DdServiceOutputFileUnAuthorizedResponseBody is the type of the "nft" service
// "ddServiceOutputFile" endpoint HTTP response body for the "UnAuthorized"
// error.
type DdServiceOutputFileUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DdServiceOutputFileNotFoundResponseBody is the type of the "nft" service
// "ddServiceOutputFile" endpoint HTTP response body for the "NotFound" error.
type DdServiceOutputFileNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DdServiceOutputFileInternalServerErrorResponseBody is the type of the "nft"
// service "ddServiceOutputFile" endpoint HTTP response body for the
// "InternalServerError" error.
type DdServiceOutputFileInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TaskHistoryResponse is used to define fields on response body types.
type TaskHistoryResponse struct {
	// Timestamp of the status creation
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// past status string
	Status string `form:"status" json:"status" xml:"status"`
	// message string (if any)
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// details of the status
	Details *DetailsResponse `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
}

// DetailsResponse is used to define fields on response body types.
type DetailsResponse struct {
	// details regarding the status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// important fields regarding status history
	Fields map[string]any `form:"fields,omitempty" json:"fields,omitempty" xml:"fields,omitempty"`
}

// TaskStateResponseBody is used to define fields on response body types.
type TaskStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// NftRegisterPayloadResponseBody is used to define fields on response body
// types.
type NftRegisterPayloadResponseBody struct {
	// Name of the NFT
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the NFT
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	// NFT creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Creator's PastelID
	CreatorPastelID string `form:"creator_pastelid" json:"creator_pastelid" xml:"creator_pastelid"`
	// Name of the NFT creator
	CreatorName string `form:"creator_name" json:"creator_name" xml:"creator_name"`
	// NFT creator website URL
	CreatorWebsiteURL *string `form:"creator_website_url,omitempty" json:"creator_website_url,omitempty" xml:"creator_website_url,omitempty"`
	// Spendable address
	SpendableAddress string `form:"spendable_address" json:"spendable_address" xml:"spendable_address"`
	// Used to find a suitable masternode with a fee equal or less
	MaximumFee float64 `form:"maximum_fee" json:"maximum_fee" xml:"maximum_fee"`
	// Percentage the artist received in future sales. If set to 0% he only get
	// paids for the first sale on each copy of the NFT
	Royalty *float64 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// To donate 2% of the sale proceeds on every sale to TeamTrees which plants
	// trees
	Green               *bool                            `form:"green,omitempty" json:"green,omitempty" xml:"green,omitempty"`
	ThumbnailCoordinate *ThumbnailcoordinateResponseBody `form:"thumbnail_coordinate,omitempty" json:"thumbnail_coordinate,omitempty" xml:"thumbnail_coordinate,omitempty"`
	// To make it publicly accessible
	MakePubliclyAccessible bool `form:"make_publicly_accessible" json:"make_publicly_accessible" xml:"make_publicly_accessible"`
	// Act Collection TxID to add given ticket in collection
	CollectionActTxid *string `form:"collection_act_txid,omitempty" json:"collection_act_txid,omitempty" xml:"collection_act_txid,omitempty"`
	// OpenAPI GroupID string
	OpenAPIGroupID string `form:"open_api_group_id" json:"open_api_group_id" xml:"open_api_group_id"`
	// Passphrase of the owner's PastelID
	Key string `form:"key" json:"key" xml:"key"`
}

// ThumbnailcoordinateResponseBody is used to define fields on response body
// types.
type ThumbnailcoordinateResponseBody struct {
	// X coordinate of the thumbnail's top left conner
	TopLeftX int64 `form:"top_left_x" json:"top_left_x" xml:"top_left_x"`
	// Y coordinate of the thumbnail's top left conner
	TopLeftY int64 `form:"top_left_y" json:"top_left_y" xml:"top_left_y"`
	// X coordinate of the thumbnail's bottom right conner
	BottomRightX int64 `form:"bottom_right_x" json:"bottom_right_x" xml:"bottom_right_x"`
	// Y coordinate of the thumbnail's bottom right conner
	BottomRightY int64 `form:"bottom_right_y" json:"bottom_right_y" xml:"bottom_right_y"`
}

// TaskResponseTiny is used to define fields on response body types.
type TaskResponseTiny struct {
	// JOb ID of the registration process
	ID string `form:"id" json:"id" xml:"id"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
	// txid
	Txid   *string                     `form:"txid,omitempty" json:"txid,omitempty" xml:"txid,omitempty"`
	Ticket *NftRegisterPayloadResponse `form:"ticket" json:"ticket" xml:"ticket"`
}

// NftRegisterPayloadResponse is used to define fields on response body types.
type NftRegisterPayloadResponse struct {
	// Name of the NFT
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the NFT
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	// NFT creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Creator's PastelID
	CreatorPastelID string `form:"creator_pastelid" json:"creator_pastelid" xml:"creator_pastelid"`
	// Name of the NFT creator
	CreatorName string `form:"creator_name" json:"creator_name" xml:"creator_name"`
	// NFT creator website URL
	CreatorWebsiteURL *string `form:"creator_website_url,omitempty" json:"creator_website_url,omitempty" xml:"creator_website_url,omitempty"`
	// Spendable address
	SpendableAddress string `form:"spendable_address" json:"spendable_address" xml:"spendable_address"`
	// Used to find a suitable masternode with a fee equal or less
	MaximumFee float64 `form:"maximum_fee" json:"maximum_fee" xml:"maximum_fee"`
	// Percentage the artist received in future sales. If set to 0% he only get
	// paids for the first sale on each copy of the NFT
	Royalty *float64 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// To donate 2% of the sale proceeds on every sale to TeamTrees which plants
	// trees
	Green               *bool                        `form:"green,omitempty" json:"green,omitempty" xml:"green,omitempty"`
	ThumbnailCoordinate *ThumbnailcoordinateResponse `form:"thumbnail_coordinate,omitempty" json:"thumbnail_coordinate,omitempty" xml:"thumbnail_coordinate,omitempty"`
	// To make it publicly accessible
	MakePubliclyAccessible bool `form:"make_publicly_accessible" json:"make_publicly_accessible" xml:"make_publicly_accessible"`
	// Act Collection TxID to add given ticket in collection
	CollectionActTxid *string `form:"collection_act_txid,omitempty" json:"collection_act_txid,omitempty" xml:"collection_act_txid,omitempty"`
	// OpenAPI GroupID string
	OpenAPIGroupID string `form:"open_api_group_id" json:"open_api_group_id" xml:"open_api_group_id"`
	// Passphrase of the owner's PastelID
	Key string `form:"key" json:"key" xml:"key"`
}

// ThumbnailcoordinateResponse is used to define fields on response body types.
type ThumbnailcoordinateResponse struct {
	// X coordinate of the thumbnail's top left conner
	TopLeftX int64 `form:"top_left_x" json:"top_left_x" xml:"top_left_x"`
	// Y coordinate of the thumbnail's top left conner
	TopLeftY int64 `form:"top_left_y" json:"top_left_y" xml:"top_left_y"`
	// X coordinate of the thumbnail's bottom right conner
	BottomRightX int64 `form:"bottom_right_x" json:"bottom_right_x" xml:"bottom_right_x"`
	// Y coordinate of the thumbnail's bottom right conner
	BottomRightY int64 `form:"bottom_right_y" json:"bottom_right_y" xml:"bottom_right_y"`
}

// NftSummaryResponseBody is used to define fields on response body types.
type NftSummaryResponseBody struct {
	// Thumbnail_1 image
	Thumbnail1 []byte `form:"thumbnail_1,omitempty" json:"thumbnail_1,omitempty" xml:"thumbnail_1,omitempty"`
	// Thumbnail_2 image
	Thumbnail2 []byte `form:"thumbnail_2,omitempty" json:"thumbnail_2,omitempty" xml:"thumbnail_2,omitempty"`
	// txid
	Txid string `form:"txid" json:"txid" xml:"txid"`
	// Name of the NFT
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the NFT
	Description string `form:"description" json:"description" xml:"description"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies
	Copies int `form:"copies" json:"copies" xml:"copies"`
	// NFT creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	CreatorPastelID string `form:"creator_pastelid" json:"creator_pastelid" xml:"creator_pastelid"`
	// Name of the artist
	CreatorName string `form:"creator_name" json:"creator_name" xml:"creator_name"`
	// Artist website URL
	CreatorWebsiteURL *string `form:"creator_website_url,omitempty" json:"creator_website_url,omitempty" xml:"creator_website_url,omitempty"`
	// NSFW Average score
	NsfwScore *float32 `form:"nsfw_score,omitempty" json:"nsfw_score,omitempty" xml:"nsfw_score,omitempty"`
	// Average pastel rareness score
	RarenessScore *float32 `form:"rareness_score,omitempty" json:"rareness_score,omitempty" xml:"rareness_score,omitempty"`
	// Is this image likely a duplicate of another known image
	IsLikelyDupe *bool `form:"is_likely_dupe,omitempty" json:"is_likely_dupe,omitempty" xml:"is_likely_dupe,omitempty"`
}

// FuzzyMatchResponseBody is used to define fields on response body types.
type FuzzyMatchResponseBody struct {
	// String that is matched
	Str *string `form:"str,omitempty" json:"str,omitempty" xml:"str,omitempty"`
	// Field that is matched
	FieldType *string `form:"field_type,omitempty" json:"field_type,omitempty" xml:"field_type,omitempty"`
	// The indexes of matched characters. Useful for highlighting matches
	MatchedIndexes []int `form:"matched_indexes,omitempty" json:"matched_indexes,omitempty" xml:"matched_indexes,omitempty"`
	// Score used to rank matches
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
}

// InternetRarenessResponseBody is used to define fields on response body types.
type InternetRarenessResponseBody struct {
	// Base64 Compressed JSON Table of Rare On Internet Summary
	RareOnInternetSummaryTableAsJSONCompressedB64 *string `form:"rare_on_internet_summary_table_as_json_compressed_b64,omitempty" json:"rare_on_internet_summary_table_as_json_compressed_b64,omitempty" xml:"rare_on_internet_summary_table_as_json_compressed_b64,omitempty"`
	// Base64 Compressed JSON of Rare On Internet Graph
	RareOnInternetGraphJSONCompressedB64 *string `form:"rare_on_internet_graph_json_compressed_b64,omitempty" json:"rare_on_internet_graph_json_compressed_b64,omitempty" xml:"rare_on_internet_graph_json_compressed_b64,omitempty"`
	// Base64 Compressed Json of Alternative Rare On Internet Dict
	AlternativeRareOnInternetDictAsJSONCompressedB64 *string `form:"alternative_rare_on_internet_dict_as_json_compressed_b64,omitempty" json:"alternative_rare_on_internet_dict_as_json_compressed_b64,omitempty" xml:"alternative_rare_on_internet_dict_as_json_compressed_b64,omitempty"`
	// Minimum Number of Exact Matches on Page
	MinNumberOfExactMatchesInPage *uint32 `form:"min_number_of_exact_matches_in_page,omitempty" json:"min_number_of_exact_matches_in_page,omitempty" xml:"min_number_of_exact_matches_in_page,omitempty"`
	// Earliest Available Date of Internet Results
	EarliestAvailableDateOfInternetResults *string `form:"earliest_available_date_of_internet_results,omitempty" json:"earliest_available_date_of_internet_results,omitempty" xml:"earliest_available_date_of_internet_results,omitempty"`
}

// AlternativeNSFWScoresResponseBody is used to define fields on response body
// types.
type AlternativeNSFWScoresResponseBody struct {
	// drawings nsfw score
	Drawings *float32 `form:"drawings,omitempty" json:"drawings,omitempty" xml:"drawings,omitempty"`
	// hentai nsfw score
	Hentai *float32 `form:"hentai,omitempty" json:"hentai,omitempty" xml:"hentai,omitempty"`
	// sexy nsfw score
	Sexy *float32 `form:"sexy,omitempty" json:"sexy,omitempty" xml:"sexy,omitempty"`
	// porn nsfw score
	Porn *float32 `form:"porn,omitempty" json:"porn,omitempty" xml:"porn,omitempty"`
	// neutral nsfw score
	Neutral *float32 `form:"neutral,omitempty" json:"neutral,omitempty" xml:"neutral,omitempty"`
}

// ThumbnailcoordinateRequestBody is used to define fields on request body
// types.
type ThumbnailcoordinateRequestBody struct {
	// X coordinate of the thumbnail's top left conner
	TopLeftX *int64 `form:"top_left_x,omitempty" json:"top_left_x,omitempty" xml:"top_left_x,omitempty"`
	// Y coordinate of the thumbnail's top left conner
	TopLeftY *int64 `form:"top_left_y,omitempty" json:"top_left_y,omitempty" xml:"top_left_y,omitempty"`
	// X coordinate of the thumbnail's bottom right conner
	BottomRightX *int64 `form:"bottom_right_x,omitempty" json:"bottom_right_x,omitempty" xml:"bottom_right_x,omitempty"`
	// Y coordinate of the thumbnail's bottom right conner
	BottomRightY *int64 `form:"bottom_right_y,omitempty" json:"bottom_right_y,omitempty" xml:"bottom_right_y,omitempty"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "nft" service.
func NewRegisterResponseBody(res *nftviews.RegisterResultView) *RegisterResponseBody {
	body := &RegisterResponseBody{
		TaskID: *res.TaskID,
	}
	return body
}

// NewRegisterTaskStateResponseBody builds the HTTP response body from the
// result of the "registerTaskState" endpoint of the "nft" service.
func NewRegisterTaskStateResponseBody(res *nft.TaskState) *RegisterTaskStateResponseBody {
	body := &RegisterTaskStateResponseBody{
		Date:   res.Date,
		Status: res.Status,
	}
	return body
}

// NewGetTaskHistoryResponseBody builds the HTTP response body from the result
// of the "getTaskHistory" endpoint of the "nft" service.
func NewGetTaskHistoryResponseBody(res []*nft.TaskHistory) GetTaskHistoryResponseBody {
	body := make([]*TaskHistoryResponse, len(res))
	for i, val := range res {
		body[i] = marshalNftTaskHistoryToTaskHistoryResponse(val)
	}
	return body
}

// NewRegisterTaskResponseBody builds the HTTP response body from the result of
// the "registerTask" endpoint of the "nft" service.
func NewRegisterTaskResponseBody(res *nftviews.TaskView) *RegisterTaskResponseBody {
	body := &RegisterTaskResponseBody{
		ID:     *res.ID,
		Status: *res.Status,
		Txid:   res.Txid,
	}
	if res.States != nil {
		body.States = make([]*TaskStateResponseBody, len(res.States))
		for i, val := range res.States {
			body.States[i] = marshalNftviewsTaskStateViewToTaskStateResponseBody(val)
		}
	}
	if res.Ticket != nil {
		body.Ticket = marshalNftviewsNftRegisterPayloadViewToNftRegisterPayloadResponseBody(res.Ticket)
	}
	return body
}

// NewTaskResponseTinyCollection builds the HTTP response body from the result
// of the "registerTasks" endpoint of the "nft" service.
func NewTaskResponseTinyCollection(res nftviews.TaskCollectionView) TaskResponseTinyCollection {
	body := make([]*TaskResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalNftviewsTaskViewToTaskResponseTiny(val)
	}
	return body
}

// NewUploadImageResponseBody builds the HTTP response body from the result of
// the "uploadImage" endpoint of the "nft" service.
func NewUploadImageResponseBody(res *nftviews.ImageResView) *UploadImageResponseBody {
	body := &UploadImageResponseBody{
		ImageID:      *res.ImageID,
		ExpiresIn:    *res.ExpiresIn,
		EstimatedFee: *res.EstimatedFee,
	}
	return body
}

// NewNftSearchResponseBody builds the HTTP response body from the result of
// the "nftSearch" endpoint of the "nft" service.
func NewNftSearchResponseBody(res *nft.NftSearchResult) *NftSearchResponseBody {
	body := &NftSearchResponseBody{
		MatchIndex: res.MatchIndex,
	}
	if res.Nft != nil {
		body.Nft = marshalNftNftSummaryToNftSummaryResponseBody(res.Nft)
	}
	if res.Matches != nil {
		body.Matches = make([]*FuzzyMatchResponseBody, len(res.Matches))
		for i, val := range res.Matches {
			body.Matches[i] = marshalNftFuzzyMatchToFuzzyMatchResponseBody(val)
		}
	} else {
		body.Matches = []*FuzzyMatchResponseBody{}
	}
	return body
}

// NewNftGetResponseBody builds the HTTP response body from the result of the
// "nftGet" endpoint of the "nft" service.
func NewNftGetResponseBody(res *nft.NftDetail) *NftGetResponseBody {
	body := &NftGetResponseBody{
		Version:                           res.Version,
		GreenAddress:                      res.GreenAddress,
		Royalty:                           res.Royalty,
		StorageFee:                        res.StorageFee,
		NsfwScore:                         res.NsfwScore,
		RarenessScore:                     res.RarenessScore,
		IsLikelyDupe:                      res.IsLikelyDupe,
		IsRareOnInternet:                  res.IsRareOnInternet,
		DrawingNsfwScore:                  res.DrawingNsfwScore,
		NeutralNsfwScore:                  res.NeutralNsfwScore,
		SexyNsfwScore:                     res.SexyNsfwScore,
		PornNsfwScore:                     res.PornNsfwScore,
		HentaiNsfwScore:                   res.HentaiNsfwScore,
		PreviewThumbnail:                  res.PreviewThumbnail,
		RareOnInternetSummaryTableJSONB64: res.RareOnInternetSummaryTableJSONB64,
		RareOnInternetGraphJSONB64:        res.RareOnInternetGraphJSONB64,
		AltRareOnInternetDictJSONB64:      res.AltRareOnInternetDictJSONB64,
		MinNumExactMatchesOnPage:          res.MinNumExactMatchesOnPage,
		EarliestDateOfResults:             res.EarliestDateOfResults,
		Thumbnail1:                        res.Thumbnail1,
		Thumbnail2:                        res.Thumbnail2,
		Txid:                              res.Txid,
		Title:                             res.Title,
		Description:                       res.Description,
		Keywords:                          res.Keywords,
		SeriesName:                        res.SeriesName,
		Copies:                            res.Copies,
		YoutubeURL:                        res.YoutubeURL,
		CreatorPastelID:                   res.CreatorPastelID,
		CreatorName:                       res.CreatorName,
		CreatorWebsiteURL:                 res.CreatorWebsiteURL,
	}
	return body
}

// NewDownloadResponseBody builds the HTTP response body from the result of the
// "download" endpoint of the "nft" service.
func NewDownloadResponseBody(res *nft.FileDownloadResult) *DownloadResponseBody {
	body := &DownloadResponseBody{
		FileID: res.FileID,
	}
	return body
}

// NewDdServiceOutputFileDetailResponseBody builds the HTTP response body from
// the result of the "ddServiceOutputFileDetail" endpoint of the "nft" service.
func NewDdServiceOutputFileDetailResponseBody(res *nft.DDServiceOutputFileResult) *DdServiceOutputFileDetailResponseBody {
	body := &DdServiceOutputFileDetailResponseBody{
		PastelBlockHashWhenRequestSubmitted:         res.PastelBlockHashWhenRequestSubmitted,
		PastelBlockHeightWhenRequestSubmitted:       res.PastelBlockHeightWhenRequestSubmitted,
		UtcTimestampWhenRequestSubmitted:            res.UtcTimestampWhenRequestSubmitted,
		PastelIDOfSubmitter:                         res.PastelIDOfSubmitter,
		PastelIDOfRegisteringSupernode1:             res.PastelIDOfRegisteringSupernode1,
		PastelIDOfRegisteringSupernode2:             res.PastelIDOfRegisteringSupernode2,
		PastelIDOfRegisteringSupernode3:             res.PastelIDOfRegisteringSupernode3,
		IsPastelOpenapiRequest:                      res.IsPastelOpenapiRequest,
		DupeDetectionSystemVersion:                  res.DupeDetectionSystemVersion,
		IsLikelyDupe:                                res.IsLikelyDupe,
		IsRareOnInternet:                            res.IsRareOnInternet,
		OverallRarenessScore:                        res.OverallRarenessScore,
		PctOfTop10MostSimilarWithDupeProbAbove25pct: res.PctOfTop10MostSimilarWithDupeProbAbove25pct,
		PctOfTop10MostSimilarWithDupeProbAbove33pct: res.PctOfTop10MostSimilarWithDupeProbAbove33pct,
		PctOfTop10MostSimilarWithDupeProbAbove50pct: res.PctOfTop10MostSimilarWithDupeProbAbove50pct,
		RarenessScoresTableJSONCompressedB64:        res.RarenessScoresTableJSONCompressedB64,
		OpenNsfwScore:                               res.OpenNsfwScore,
		HashOfCandidateImageFile:                    res.HashOfCandidateImageFile,
		CollectionNameString:                        res.CollectionNameString,
		OpenAPIGroupIDString:                        res.OpenAPIGroupIDString,
		GroupRarenessScore:                          res.GroupRarenessScore,
		CandidateImageThumbnailWebpAsBase64String:   res.CandidateImageThumbnailWebpAsBase64String,
		DoesNotImpactTheFollowingCollectionStrings:  res.DoesNotImpactTheFollowingCollectionStrings,
		SimilarityScoreToFirstEntryInCollection:     res.SimilarityScoreToFirstEntryInCollection,
		CpProbability:                               res.CpProbability,
		ChildProbability:                            res.ChildProbability,
		ImageFilePath:                               res.ImageFilePath,
		CreatorName:                                 res.CreatorName,
		CreatorWebsite:                              res.CreatorWebsite,
		CreatorWrittenStatement:                     res.CreatorWrittenStatement,
		NftTitle:                                    res.NftTitle,
		NftSeriesName:                               res.NftSeriesName,
		NftCreationVideoYoutubeURL:                  res.NftCreationVideoYoutubeURL,
		NftKeywordSet:                               res.NftKeywordSet,
		TotalCopies:                                 res.TotalCopies,
		PreviewHash:                                 res.PreviewHash,
		Thumbnail1Hash:                              res.Thumbnail1Hash,
		Thumbnail2Hash:                              res.Thumbnail2Hash,
		OriginalFileSizeInBytes:                     res.OriginalFileSizeInBytes,
		FileType:                                    res.FileType,
		MaxPermittedOpenNsfwScore:                   res.MaxPermittedOpenNsfwScore,
	}
	if res.ImageFingerprintOfCandidateImageFile != nil {
		body.ImageFingerprintOfCandidateImageFile = make([]float64, len(res.ImageFingerprintOfCandidateImageFile))
		for i, val := range res.ImageFingerprintOfCandidateImageFile {
			body.ImageFingerprintOfCandidateImageFile[i] = val
		}
	}
	if res.InternetRareness != nil {
		body.InternetRareness = marshalNftInternetRarenessToInternetRarenessResponseBody(res.InternetRareness)
	}
	if res.AlternativeNsfwScores != nil {
		body.AlternativeNsfwScores = marshalNftAlternativeNSFWScoresToAlternativeNSFWScoresResponseBody(res.AlternativeNsfwScores)
	}
	return body
}

// NewDdServiceOutputFileResponseBody builds the HTTP response body from the
// result of the "ddServiceOutputFile" endpoint of the "nft" service.
func NewDdServiceOutputFileResponseBody(res *nft.DDFPResultFile) *DdServiceOutputFileResponseBody {
	body := &DdServiceOutputFileResponseBody{
		File: res.File,
	}
	return body
}

// NewRegisterUnAuthorizedResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "nft" service.
func NewRegisterUnAuthorizedResponseBody(res *goa.ServiceError) *RegisterUnAuthorizedResponseBody {
	body := &RegisterUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterBadRequestResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "nft" service.
func NewRegisterBadRequestResponseBody(res *goa.ServiceError) *RegisterBadRequestResponseBody {
	body := &RegisterBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "register" endpoint of the "nft" service.
func NewRegisterInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterInternalServerErrorResponseBody {
	body := &RegisterInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateNotFoundResponseBody builds the HTTP response body from
// the result of the "registerTaskState" endpoint of the "nft" service.
func NewRegisterTaskStateNotFoundResponseBody(res *goa.ServiceError) *RegisterTaskStateNotFoundResponseBody {
	body := &RegisterTaskStateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerTaskState" endpoint of the "nft"
// service.
func NewRegisterTaskStateInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTaskStateInternalServerErrorResponseBody {
	body := &RegisterTaskStateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTaskHistoryNotFoundResponseBody builds the HTTP response body from the
// result of the "getTaskHistory" endpoint of the "nft" service.
func NewGetTaskHistoryNotFoundResponseBody(res *goa.ServiceError) *GetTaskHistoryNotFoundResponseBody {
	body := &GetTaskHistoryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTaskHistoryInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getTaskHistory" endpoint of the "nft" service.
func NewGetTaskHistoryInternalServerErrorResponseBody(res *goa.ServiceError) *GetTaskHistoryInternalServerErrorResponseBody {
	body := &GetTaskHistoryInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskNotFoundResponseBody builds the HTTP response body from the
// result of the "registerTask" endpoint of the "nft" service.
func NewRegisterTaskNotFoundResponseBody(res *goa.ServiceError) *RegisterTaskNotFoundResponseBody {
	body := &RegisterTaskNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "registerTask" endpoint of the "nft" service.
func NewRegisterTaskInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTaskInternalServerErrorResponseBody {
	body := &RegisterTaskInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTasksInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerTasks" endpoint of the "nft" service.
func NewRegisterTasksInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTasksInternalServerErrorResponseBody {
	body := &RegisterTasksInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "nft" service.
func NewUploadImageBadRequestResponseBody(res *goa.ServiceError) *UploadImageBadRequestResponseBody {
	body := &UploadImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "nft" service.
func NewUploadImageInternalServerErrorResponseBody(res *goa.ServiceError) *UploadImageInternalServerErrorResponseBody {
	body := &UploadImageInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewNftSearchBadRequestResponseBody builds the HTTP response body from the
// result of the "nftSearch" endpoint of the "nft" service.
func NewNftSearchBadRequestResponseBody(res *goa.ServiceError) *NftSearchBadRequestResponseBody {
	body := &NftSearchBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewNftSearchInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "nftSearch" endpoint of the "nft" service.
func NewNftSearchInternalServerErrorResponseBody(res *goa.ServiceError) *NftSearchInternalServerErrorResponseBody {
	body := &NftSearchInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewNftGetBadRequestResponseBody builds the HTTP response body from the
// result of the "nftGet" endpoint of the "nft" service.
func NewNftGetBadRequestResponseBody(res *goa.ServiceError) *NftGetBadRequestResponseBody {
	body := &NftGetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewNftGetNotFoundResponseBody builds the HTTP response body from the result
// of the "nftGet" endpoint of the "nft" service.
func NewNftGetNotFoundResponseBody(res *goa.ServiceError) *NftGetNotFoundResponseBody {
	body := &NftGetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewNftGetInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "nftGet" endpoint of the "nft" service.
func NewNftGetInternalServerErrorResponseBody(res *goa.ServiceError) *NftGetInternalServerErrorResponseBody {
	body := &NftGetInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadUnAuthorizedResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "nft" service.
func NewDownloadUnAuthorizedResponseBody(res *goa.ServiceError) *DownloadUnAuthorizedResponseBody {
	body := &DownloadUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadNotFoundResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "nft" service.
func NewDownloadNotFoundResponseBody(res *goa.ServiceError) *DownloadNotFoundResponseBody {
	body := &DownloadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "download" endpoint of the "nft" service.
func NewDownloadInternalServerErrorResponseBody(res *goa.ServiceError) *DownloadInternalServerErrorResponseBody {
	body := &DownloadInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDdServiceOutputFileDetailUnAuthorizedResponseBody builds the HTTP
// response body from the result of the "ddServiceOutputFileDetail" endpoint of
// the "nft" service.
func NewDdServiceOutputFileDetailUnAuthorizedResponseBody(res *goa.ServiceError) *DdServiceOutputFileDetailUnAuthorizedResponseBody {
	body := &DdServiceOutputFileDetailUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDdServiceOutputFileDetailNotFoundResponseBody builds the HTTP response
// body from the result of the "ddServiceOutputFileDetail" endpoint of the
// "nft" service.
func NewDdServiceOutputFileDetailNotFoundResponseBody(res *goa.ServiceError) *DdServiceOutputFileDetailNotFoundResponseBody {
	body := &DdServiceOutputFileDetailNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDdServiceOutputFileDetailInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "ddServiceOutputFileDetail" endpoint of
// the "nft" service.
func NewDdServiceOutputFileDetailInternalServerErrorResponseBody(res *goa.ServiceError) *DdServiceOutputFileDetailInternalServerErrorResponseBody {
	body := &DdServiceOutputFileDetailInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDdServiceOutputFileUnAuthorizedResponseBody builds the HTTP response body
// from the result of the "ddServiceOutputFile" endpoint of the "nft" service.
func NewDdServiceOutputFileUnAuthorizedResponseBody(res *goa.ServiceError) *DdServiceOutputFileUnAuthorizedResponseBody {
	body := &DdServiceOutputFileUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDdServiceOutputFileNotFoundResponseBody builds the HTTP response body
// from the result of the "ddServiceOutputFile" endpoint of the "nft" service.
func NewDdServiceOutputFileNotFoundResponseBody(res *goa.ServiceError) *DdServiceOutputFileNotFoundResponseBody {
	body := &DdServiceOutputFileNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDdServiceOutputFileInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "ddServiceOutputFile" endpoint of the
// "nft" service.
func NewDdServiceOutputFileInternalServerErrorResponseBody(res *goa.ServiceError) *DdServiceOutputFileInternalServerErrorResponseBody {
	body := &DdServiceOutputFileInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterPayload builds a nft service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody, key string) *nft.RegisterPayload {
	v := &nft.RegisterPayload{
		ImageID:           *body.ImageID,
		Name:              *body.Name,
		Description:       body.Description,
		Keywords:          body.Keywords,
		SeriesName:        body.SeriesName,
		IssuedCopies:      body.IssuedCopies,
		YoutubeURL:        body.YoutubeURL,
		CreatorPastelID:   *body.CreatorPastelID,
		CreatorName:       *body.CreatorName,
		CreatorWebsiteURL: body.CreatorWebsiteURL,
		SpendableAddress:  *body.SpendableAddress,
		MaximumFee:        *body.MaximumFee,
		Royalty:           body.Royalty,
		Green:             body.Green,
		CollectionActTxid: body.CollectionActTxid,
	}
	if body.MakePubliclyAccessible != nil {
		v.MakePubliclyAccessible = *body.MakePubliclyAccessible
	}
	if body.OpenAPIGroupID != nil {
		v.OpenAPIGroupID = *body.OpenAPIGroupID
	}
	if body.ThumbnailCoordinate != nil {
		v.ThumbnailCoordinate = unmarshalThumbnailcoordinateRequestBodyToNftThumbnailcoordinate(body.ThumbnailCoordinate)
	}
	if body.MakePubliclyAccessible == nil {
		v.MakePubliclyAccessible = false
	}
	if body.OpenAPIGroupID == nil {
		v.OpenAPIGroupID = "PASTEL"
	}
	v.Key = key

	return v
}

// NewRegisterTaskStatePayload builds a nft service registerTaskState endpoint
// payload.
func NewRegisterTaskStatePayload(taskID string) *nft.RegisterTaskStatePayload {
	v := &nft.RegisterTaskStatePayload{}
	v.TaskID = taskID

	return v
}

// NewGetTaskHistoryPayload builds a nft service getTaskHistory endpoint
// payload.
func NewGetTaskHistoryPayload(taskID string) *nft.GetTaskHistoryPayload {
	v := &nft.GetTaskHistoryPayload{}
	v.TaskID = taskID

	return v
}

// NewRegisterTaskPayload builds a nft service registerTask endpoint payload.
func NewRegisterTaskPayload(taskID string) *nft.RegisterTaskPayload {
	v := &nft.RegisterTaskPayload{}
	v.TaskID = taskID

	return v
}

// NewUploadImagePayload builds a nft service uploadImage endpoint payload.
func NewUploadImagePayload(body *UploadImageRequestBody) *nft.UploadImagePayload {
	v := &nft.UploadImagePayload{
		Bytes:    body.Bytes,
		Filename: body.Filename,
	}

	return v
}

// NewNftSearchPayload builds a nft service nftSearch endpoint payload.
func NewNftSearchPayload(artist *string, limit int, query string, creatorName bool, artTitle bool, series bool, descr bool, keyword bool, minCopies *int, maxCopies *int, minBlock int, maxBlock *int, isLikelyDupe *bool, minRarenessScore *float64, maxRarenessScore *float64, minNsfwScore *float64, maxNsfwScore *float64, userPastelid *string, userPassphrase *string) *nft.NftSearchPayload {
	v := &nft.NftSearchPayload{}
	v.Artist = artist
	v.Limit = limit
	v.Query = query
	v.CreatorName = creatorName
	v.ArtTitle = artTitle
	v.Series = series
	v.Descr = descr
	v.Keyword = keyword
	v.MinCopies = minCopies
	v.MaxCopies = maxCopies
	v.MinBlock = minBlock
	v.MaxBlock = maxBlock
	v.IsLikelyDupe = isLikelyDupe
	v.MinRarenessScore = minRarenessScore
	v.MaxRarenessScore = maxRarenessScore
	v.MinNsfwScore = minNsfwScore
	v.MaxNsfwScore = maxNsfwScore
	v.UserPastelid = userPastelid
	v.UserPassphrase = userPassphrase

	return v
}

// NewNftGetPayload builds a nft service nftGet endpoint payload.
func NewNftGetPayload(txid string, pid string, key string) *nft.NftGetPayload {
	v := &nft.NftGetPayload{}
	v.Txid = txid
	v.Pid = pid
	v.Key = key

	return v
}

// NewDownloadPayload builds a nft service download endpoint payload.
func NewDownloadPayload(txid string, pid string, key string) *nft.DownloadPayload {
	v := &nft.DownloadPayload{}
	v.Txid = txid
	v.Pid = pid
	v.Key = key

	return v
}

// NewDdServiceOutputFileDetailDownloadPayload builds a nft service
// ddServiceOutputFileDetail endpoint payload.
func NewDdServiceOutputFileDetailDownloadPayload(txid string, pid string, key string) *nft.DownloadPayload {
	v := &nft.DownloadPayload{}
	v.Txid = txid
	v.Pid = pid
	v.Key = key

	return v
}

// NewDdServiceOutputFileDownloadPayload builds a nft service
// ddServiceOutputFile endpoint payload.
func NewDdServiceOutputFileDownloadPayload(txid string, pid string, key string) *nft.DownloadPayload {
	v := &nft.DownloadPayload{}
	v.Txid = txid
	v.Pid = pid
	v.Key = key

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.ImageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_id", "body"))
	}
	if body.CreatorName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("creator_name", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CreatorPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("creator_pastelid", "body"))
	}
	if body.SpendableAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spendable_address", "body"))
	}
	if body.MaximumFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("maximum_fee", "body"))
	}
	if body.ImageID != nil {
		if utf8.RuneCountInString(*body.ImageID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_id", *body.ImageID, utf8.RuneCountInString(*body.ImageID), 8, true))
		}
	}
	if body.ImageID != nil {
		if utf8.RuneCountInString(*body.ImageID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_id", *body.ImageID, utf8.RuneCountInString(*body.ImageID), 8, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 256, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1024, false))
		}
	}
	if body.Keywords != nil {
		if utf8.RuneCountInString(*body.Keywords) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", *body.Keywords, utf8.RuneCountInString(*body.Keywords), 256, false))
		}
	}
	if body.SeriesName != nil {
		if utf8.RuneCountInString(*body.SeriesName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.series_name", *body.SeriesName, utf8.RuneCountInString(*body.SeriesName), 256, false))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1000, false))
		}
	}
	if body.YoutubeURL != nil {
		if utf8.RuneCountInString(*body.YoutubeURL) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.youtube_url", *body.YoutubeURL, utf8.RuneCountInString(*body.YoutubeURL), 128, false))
		}
	}
	if body.CreatorPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.creator_pastelid", *body.CreatorPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.CreatorPastelID != nil {
		if utf8.RuneCountInString(*body.CreatorPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.creator_pastelid", *body.CreatorPastelID, utf8.RuneCountInString(*body.CreatorPastelID), 86, true))
		}
	}
	if body.CreatorPastelID != nil {
		if utf8.RuneCountInString(*body.CreatorPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.creator_pastelid", *body.CreatorPastelID, utf8.RuneCountInString(*body.CreatorPastelID), 86, false))
		}
	}
	if body.CreatorName != nil {
		if utf8.RuneCountInString(*body.CreatorName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.creator_name", *body.CreatorName, utf8.RuneCountInString(*body.CreatorName), 256, false))
		}
	}
	if body.CreatorWebsiteURL != nil {
		if utf8.RuneCountInString(*body.CreatorWebsiteURL) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.creator_website_url", *body.CreatorWebsiteURL, utf8.RuneCountInString(*body.CreatorWebsiteURL), 256, false))
		}
	}
	if body.SpendableAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", *body.SpendableAddress, "^[a-zA-Z0-9]+$"))
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, true))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, false))
		}
	}
	if body.MaximumFee != nil {
		if *body.MaximumFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maximum_fee", *body.MaximumFee, 1e-05, true))
		}
	}
	if body.Royalty != nil {
		if *body.Royalty > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.royalty", *body.Royalty, 20, false))
		}
	}
	if body.ThumbnailCoordinate != nil {
		if err2 := ValidateThumbnailcoordinateRequestBody(body.ThumbnailCoordinate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUploadImageRequestBody runs the validations defined on
// UploadImageRequestBody
func ValidateUploadImageRequestBody(body *UploadImageRequestBody) (err error) {
	if body.Bytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}

// ValidateThumbnailcoordinateRequestBody runs the validations defined on
// ThumbnailcoordinateRequestBody
func ValidateThumbnailcoordinateRequestBody(body *ThumbnailcoordinateRequestBody) (err error) {
	if body.TopLeftX == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("top_left_x", "body"))
	}
	if body.TopLeftY == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("top_left_y", "body"))
	}
	if body.BottomRightX == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bottom_right_x", "body"))
	}
	if body.BottomRightY == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bottom_right_y", "body"))
	}
	return
}
