// Code generated by goa v3.7.6, DO NOT EDIT.
//
// nft HTTP server
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"context"
	"mime/multipart"
	"net/http"

	nft "github.com/pastelnetwork/gonode/walletnode/api/gen/nft"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the nft service endpoint HTTP handlers.
type Server struct {
	Mounts                    []*MountPoint
	Register                  http.Handler
	RegisterTaskState         http.Handler
	GetTaskHistory            http.Handler
	RegisterTask              http.Handler
	RegisterTasks             http.Handler
	UploadImage               http.Handler
	NftSearch                 http.Handler
	NftGet                    http.Handler
	Download                  http.Handler
	DdServiceOutputFileDetail http.Handler
	DdServiceOutputFile       http.Handler
	CORS                      http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// NftUploadImageDecoderFunc is the type to decode multipart request for the
// "nft" service "uploadImage" endpoint.
type NftUploadImageDecoderFunc func(*multipart.Reader, **nft.UploadImagePayload) error

// New instantiates HTTP handlers for all the nft service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *nft.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer *ConnConfigurer,
	nftUploadImageDecoderFn NftUploadImageDecoderFunc,
) *Server {
	if configurer == nil {
		configurer = &ConnConfigurer{}
	}
	return &Server{
		Mounts: []*MountPoint{
			{"Register", "POST", "/nfts/register"},
			{"RegisterTaskState", "GET", "/nfts/register/{taskId}/state"},
			{"GetTaskHistory", "GET", "/nfts/{taskId}/history"},
			{"RegisterTask", "GET", "/nfts/register/{taskId}"},
			{"RegisterTasks", "GET", "/nfts/register"},
			{"UploadImage", "POST", "/nfts/register/upload"},
			{"NftSearch", "GET", "/nfts/search"},
			{"NftGet", "GET", "/nfts"},
			{"Download", "GET", "/nfts/download"},
			{"DdServiceOutputFileDetail", "GET", "/nfts/get_dd_results"},
			{"DdServiceOutputFile", "GET", "/nfts/get_dd_result_file"},
			{"CORS", "OPTIONS", "/nfts/register"},
			{"CORS", "OPTIONS", "/nfts/register/{taskId}/state"},
			{"CORS", "OPTIONS", "/nfts/{taskId}/history"},
			{"CORS", "OPTIONS", "/nfts/register/{taskId}"},
			{"CORS", "OPTIONS", "/nfts/register/upload"},
			{"CORS", "OPTIONS", "/nfts/search"},
			{"CORS", "OPTIONS", "/nfts"},
			{"CORS", "OPTIONS", "/nfts/download"},
			{"CORS", "OPTIONS", "/nfts/get_dd_results"},
			{"CORS", "OPTIONS", "/nfts/get_dd_result_file"},
		},
		Register:                  NewRegisterHandler(e.Register, mux, decoder, encoder, errhandler, formatter),
		RegisterTaskState:         NewRegisterTaskStateHandler(e.RegisterTaskState, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.RegisterTaskStateFn),
		GetTaskHistory:            NewGetTaskHistoryHandler(e.GetTaskHistory, mux, decoder, encoder, errhandler, formatter),
		RegisterTask:              NewRegisterTaskHandler(e.RegisterTask, mux, decoder, encoder, errhandler, formatter),
		RegisterTasks:             NewRegisterTasksHandler(e.RegisterTasks, mux, decoder, encoder, errhandler, formatter),
		UploadImage:               NewUploadImageHandler(e.UploadImage, mux, NewNftUploadImageDecoder(mux, nftUploadImageDecoderFn), encoder, errhandler, formatter),
		NftSearch:                 NewNftSearchHandler(e.NftSearch, mux, decoder, encoder, errhandler, formatter, upgrader, configurer.NftSearchFn),
		NftGet:                    NewNftGetHandler(e.NftGet, mux, decoder, encoder, errhandler, formatter),
		Download:                  NewDownloadHandler(e.Download, mux, decoder, encoder, errhandler, formatter),
		DdServiceOutputFileDetail: NewDdServiceOutputFileDetailHandler(e.DdServiceOutputFileDetail, mux, decoder, encoder, errhandler, formatter),
		DdServiceOutputFile:       NewDdServiceOutputFileHandler(e.DdServiceOutputFile, mux, decoder, encoder, errhandler, formatter),
		CORS:                      NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "nft" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Register = m(s.Register)
	s.RegisterTaskState = m(s.RegisterTaskState)
	s.GetTaskHistory = m(s.GetTaskHistory)
	s.RegisterTask = m(s.RegisterTask)
	s.RegisterTasks = m(s.RegisterTasks)
	s.UploadImage = m(s.UploadImage)
	s.NftSearch = m(s.NftSearch)
	s.NftGet = m(s.NftGet)
	s.Download = m(s.Download)
	s.DdServiceOutputFileDetail = m(s.DdServiceOutputFileDetail)
	s.DdServiceOutputFile = m(s.DdServiceOutputFile)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the nft endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountRegisterHandler(mux, h.Register)
	MountRegisterTaskStateHandler(mux, h.RegisterTaskState)
	MountGetTaskHistoryHandler(mux, h.GetTaskHistory)
	MountRegisterTaskHandler(mux, h.RegisterTask)
	MountRegisterTasksHandler(mux, h.RegisterTasks)
	MountUploadImageHandler(mux, h.UploadImage)
	MountNftSearchHandler(mux, h.NftSearch)
	MountNftGetHandler(mux, h.NftGet)
	MountDownloadHandler(mux, h.Download)
	MountDdServiceOutputFileDetailHandler(mux, h.DdServiceOutputFileDetail)
	MountDdServiceOutputFileHandler(mux, h.DdServiceOutputFile)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the nft endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountRegisterHandler configures the mux to serve the "nft" service
// "register" endpoint.
func MountRegisterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/nfts/register", f)
}

// NewRegisterHandler creates a HTTP handler which loads the HTTP request and
// calls the "nft" service "register" endpoint.
func NewRegisterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRegisterRequest(mux, decoder)
		encodeResponse = EncodeRegisterResponse(encoder)
		encodeError    = EncodeRegisterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "register")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRegisterTaskStateHandler configures the mux to serve the "nft" service
// "registerTaskState" endpoint.
func MountRegisterTaskStateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/register/{taskId}/state", f)
}

// NewRegisterTaskStateHandler creates a HTTP handler which loads the HTTP
// request and calls the "nft" service "registerTaskState" endpoint.
func NewRegisterTaskStateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeRegisterTaskStateRequest(mux, decoder)
		encodeError   = EncodeRegisterTaskStateError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "registerTaskState")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &nft.RegisterTaskStateEndpointInput{
			Stream: &RegisterTaskStateServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload.(*nft.RegisterTaskStatePayload),
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			if _, werr := w.Write(nil); werr == http.ErrHijacked {
				// Response writer has been hijacked, do not encode the error
				errhandler(ctx, w, err)
				return
			}
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountGetTaskHistoryHandler configures the mux to serve the "nft" service
// "getTaskHistory" endpoint.
func MountGetTaskHistoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/{taskId}/history", f)
}

// NewGetTaskHistoryHandler creates a HTTP handler which loads the HTTP request
// and calls the "nft" service "getTaskHistory" endpoint.
func NewGetTaskHistoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTaskHistoryRequest(mux, decoder)
		encodeResponse = EncodeGetTaskHistoryResponse(encoder)
		encodeError    = EncodeGetTaskHistoryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getTaskHistory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRegisterTaskHandler configures the mux to serve the "nft" service
// "registerTask" endpoint.
func MountRegisterTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/register/{taskId}", f)
}

// NewRegisterTaskHandler creates a HTTP handler which loads the HTTP request
// and calls the "nft" service "registerTask" endpoint.
func NewRegisterTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRegisterTaskRequest(mux, decoder)
		encodeResponse = EncodeRegisterTaskResponse(encoder)
		encodeError    = EncodeRegisterTaskError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "registerTask")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRegisterTasksHandler configures the mux to serve the "nft" service
// "registerTasks" endpoint.
func MountRegisterTasksHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/register", f)
}

// NewRegisterTasksHandler creates a HTTP handler which loads the HTTP request
// and calls the "nft" service "registerTasks" endpoint.
func NewRegisterTasksHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeRegisterTasksResponse(encoder)
		encodeError    = EncodeRegisterTasksError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "registerTasks")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUploadImageHandler configures the mux to serve the "nft" service
// "uploadImage" endpoint.
func MountUploadImageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/nfts/register/upload", f)
}

// NewUploadImageHandler creates a HTTP handler which loads the HTTP request
// and calls the "nft" service "uploadImage" endpoint.
func NewUploadImageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadImageRequest(mux, decoder)
		encodeResponse = EncodeUploadImageResponse(encoder)
		encodeError    = EncodeUploadImageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "uploadImage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountNftSearchHandler configures the mux to serve the "nft" service
// "nftSearch" endpoint.
func MountNftSearchHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/search", f)
}

// NewNftSearchHandler creates a HTTP handler which loads the HTTP request and
// calls the "nft" service "nftSearch" endpoint.
func NewNftSearchHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
	upgrader goahttp.Upgrader,
	configurer goahttp.ConnConfigureFunc,
) http.Handler {
	var (
		decodeRequest = DecodeNftSearchRequest(mux, decoder)
		encodeError   = EncodeNftSearchError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "nftSearch")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		v := &nft.NftSearchEndpointInput{
			Stream: &NftSearchServerStream{
				upgrader:   upgrader,
				configurer: configurer,
				cancel:     cancel,
				w:          w,
				r:          r,
			},
			Payload: payload.(*nft.NftSearchPayload),
		}
		_, err = endpoint(ctx, v)
		if err != nil {
			if _, werr := w.Write(nil); werr == http.ErrHijacked {
				// Response writer has been hijacked, do not encode the error
				errhandler(ctx, w, err)
				return
			}
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
	})
}

// MountNftGetHandler configures the mux to serve the "nft" service "nftGet"
// endpoint.
func MountNftGetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts", f)
}

// NewNftGetHandler creates a HTTP handler which loads the HTTP request and
// calls the "nft" service "nftGet" endpoint.
func NewNftGetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNftGetRequest(mux, decoder)
		encodeResponse = EncodeNftGetResponse(encoder)
		encodeError    = EncodeNftGetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "nftGet")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDownloadHandler configures the mux to serve the "nft" service
// "download" endpoint.
func MountDownloadHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/download", f)
}

// NewDownloadHandler creates a HTTP handler which loads the HTTP request and
// calls the "nft" service "download" endpoint.
func NewDownloadHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDownloadRequest(mux, decoder)
		encodeResponse = EncodeDownloadResponse(encoder)
		encodeError    = EncodeDownloadError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "download")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDdServiceOutputFileDetailHandler configures the mux to serve the "nft"
// service "ddServiceOutputFileDetail" endpoint.
func MountDdServiceOutputFileDetailHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/get_dd_results", f)
}

// NewDdServiceOutputFileDetailHandler creates a HTTP handler which loads the
// HTTP request and calls the "nft" service "ddServiceOutputFileDetail"
// endpoint.
func NewDdServiceOutputFileDetailHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDdServiceOutputFileDetailRequest(mux, decoder)
		encodeResponse = EncodeDdServiceOutputFileDetailResponse(encoder)
		encodeError    = EncodeDdServiceOutputFileDetailError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ddServiceOutputFileDetail")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDdServiceOutputFileHandler configures the mux to serve the "nft"
// service "ddServiceOutputFile" endpoint.
func MountDdServiceOutputFileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleNftOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/nfts/get_dd_result_file", f)
}

// NewDdServiceOutputFileHandler creates a HTTP handler which loads the HTTP
// request and calls the "nft" service "ddServiceOutputFile" endpoint.
func NewDdServiceOutputFileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDdServiceOutputFileRequest(mux, decoder)
		encodeResponse = EncodeDdServiceOutputFileResponse(encoder)
		encodeError    = EncodeDdServiceOutputFileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ddServiceOutputFile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "nft")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service nft.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleNftOrigin(h)
	mux.Handle("OPTIONS", "/nfts/register", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/register/{taskId}/state", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/{taskId}/history", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/register/{taskId}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/register/upload", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/search", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/download", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/get_dd_results", h.ServeHTTP)
	mux.Handle("OPTIONS", "/nfts/get_dd_result_file", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleNftOrigin applies the CORS response headers corresponding to the
// origin for the service nft.
func HandleNftOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
