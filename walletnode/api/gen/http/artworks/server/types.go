// Code generated by goa v3.4.3, DO NOT EDIT.
//
// artworks HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"unicode/utf8"

	artworks "github.com/pastelnetwork/gonode/walletnode/api/gen/artworks"
	artworksviews "github.com/pastelnetwork/gonode/walletnode/api/gen/artworks/views"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "artworks" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// Uploaded image ID
	ImageID *string `form:"image_id,omitempty" json:"image_id,omitempty" xml:"image_id,omitempty"`
	// Name of the artwork
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the artwork
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelID *string `form:"artist_pastelid,omitempty" json:"artist_pastelid,omitempty" xml:"artist_pastelid,omitempty"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase *string `form:"artist_pastelid_passphrase,omitempty" json:"artist_pastelid_passphrase,omitempty" xml:"artist_pastelid_passphrase,omitempty"`
	// Name of the artist
	ArtistName *string `form:"artist_name,omitempty" json:"artist_name,omitempty" xml:"artist_name,omitempty"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
	// Spendable address
	SpendableAddress *string `form:"spendable_address,omitempty" json:"spendable_address,omitempty" xml:"spendable_address,omitempty"`
	// Used to find a suitable masternode with a fee equal or less
	MaximumFee *float64 `form:"maximum_fee,omitempty" json:"maximum_fee,omitempty" xml:"maximum_fee,omitempty"`
	// Percentage the artist received in future sales. If set to 0% he only get
	// paids for the first sale on each copy of the NFT
	Royalty *float64 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// To donate 2% of the sale proceeds on every sale to TeamTrees which plants
	// trees
	Green               *bool                           `form:"green,omitempty" json:"green,omitempty" xml:"green,omitempty"`
	ThumbnailCoordinate *ThumbnailcoordinateRequestBody `form:"thumbnail_coordinate,omitempty" json:"thumbnail_coordinate,omitempty" xml:"thumbnail_coordinate,omitempty"`
}

// UploadImageRequestBody is the type of the "artworks" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	Bytes []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
	// For internal use
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
}

// RegisterResponseBody is the type of the "artworks" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Task ID of the registration process
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// RegisterTaskStateResponseBody is the type of the "artworks" service
// "registerTaskState" endpoint HTTP response body.
type RegisterTaskStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// RegisterTaskResponseBody is the type of the "artworks" service
// "registerTask" endpoint HTTP response body.
type RegisterTaskResponseBody struct {
	// JOb ID of the registration process
	ID string `form:"id" json:"id" xml:"id"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
	// List of states from the very beginning of the process
	States []*TaskStateResponseBody `form:"states,omitempty" json:"states,omitempty" xml:"states,omitempty"`
	// txid
	Txid   *string                    `form:"txid,omitempty" json:"txid,omitempty" xml:"txid,omitempty"`
	Ticket *ArtworkTicketResponseBody `form:"ticket" json:"ticket" xml:"ticket"`
}

// TaskResponseTinyCollection is the type of the "artworks" service
// "registerTasks" endpoint HTTP response body.
type TaskResponseTinyCollection []*TaskResponseTiny

// UploadImageResponseBody is the type of the "artworks" service "uploadImage"
// endpoint HTTP response body.
type UploadImageResponseBody struct {
	// Uploaded image ID
	ImageID string `form:"image_id" json:"image_id" xml:"image_id"`
	// Image expiration
	ExpiresIn string `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// ArtSearchResponseBody is the type of the "artworks" service "artSearch"
// endpoint HTTP response body.
type ArtSearchResponseBody struct {
	// Artwork data
	Artwork *ArtworkSummaryResponseBody `form:"artwork" json:"artwork" xml:"artwork"`
	// Sort index of the match based on score.This must be used to sort results on
	// UI.
	MatchIndex int `form:"match_index" json:"match_index" xml:"match_index"`
	// Match result details
	Matches []*FuzzyMatchResponseBody `form:"matches" json:"matches" xml:"matches"`
}

// ArtworkGetResponseBody is the type of the "artworks" service "artworkGet"
// endpoint HTTP response body.
type ArtworkGetResponseBody struct {
	// version
	Version *int `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Green flag
	IsGreen bool `form:"is_green" json:"is_green" xml:"is_green"`
	// how much artist should get on all future resales
	Royalty float64 `form:"royalty" json:"royalty" xml:"royalty"`
	// Storage fee
	StorageFee *int `form:"storage_fee,omitempty" json:"storage_fee,omitempty" xml:"storage_fee,omitempty"`
	// nsfw score
	NsfwScore int `form:"nsfw_score" json:"nsfw_score" xml:"nsfw_score"`
	// rareness score
	RarenessScore int `form:"rareness_score" json:"rareness_score" xml:"rareness_score"`
	// seen score
	SeenScore int `form:"seen_score" json:"seen_score" xml:"seen_score"`
	// Thumbnail image
	Thumbnail []byte `form:"thumbnail,omitempty" json:"thumbnail,omitempty" xml:"thumbnail,omitempty"`
	// txid
	Txid string `form:"txid" json:"txid" xml:"txid"`
	// Name of the artwork
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the artwork
	Description string `form:"description" json:"description" xml:"description"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies
	Copies int `form:"copies" json:"copies" xml:"copies"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Name of the artist
	ArtistName string `form:"artist_name" json:"artist_name" xml:"artist_name"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
}

// RegisterBadRequestResponseBody is the type of the "artworks" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterInternalServerErrorResponseBody is the type of the "artworks"
// service "register" endpoint HTTP response body for the "InternalServerError"
// error.
type RegisterInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateNotFoundResponseBody is the type of the "artworks" service
// "registerTaskState" endpoint HTTP response body for the "NotFound" error.
type RegisterTaskStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateInternalServerErrorResponseBody is the type of the
// "artworks" service "registerTaskState" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTaskStateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskNotFoundResponseBody is the type of the "artworks" service
// "registerTask" endpoint HTTP response body for the "NotFound" error.
type RegisterTaskNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskInternalServerErrorResponseBody is the type of the "artworks"
// service "registerTask" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTaskInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTasksInternalServerErrorResponseBody is the type of the "artworks"
// service "registerTasks" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTasksInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageBadRequestResponseBody is the type of the "artworks" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "artworks"
// service "uploadImage" endpoint HTTP response body for the
// "InternalServerError" error.
type UploadImageInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ArtSearchBadRequestResponseBody is the type of the "artworks" service
// "artSearch" endpoint HTTP response body for the "BadRequest" error.
type ArtSearchBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ArtSearchInternalServerErrorResponseBody is the type of the "artworks"
// service "artSearch" endpoint HTTP response body for the
// "InternalServerError" error.
type ArtSearchInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ArtworkGetBadRequestResponseBody is the type of the "artworks" service
// "artworkGet" endpoint HTTP response body for the "BadRequest" error.
type ArtworkGetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ArtworkGetNotFoundResponseBody is the type of the "artworks" service
// "artworkGet" endpoint HTTP response body for the "NotFound" error.
type ArtworkGetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ArtworkGetInternalServerErrorResponseBody is the type of the "artworks"
// service "artworkGet" endpoint HTTP response body for the
// "InternalServerError" error.
type ArtworkGetInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TaskStateResponseBody is used to define fields on response body types.
type TaskStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// ArtworkTicketResponseBody is used to define fields on response body types.
type ArtworkTicketResponseBody struct {
	// Name of the artwork
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the artwork
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies int `form:"issued_copies" json:"issued_copies" xml:"issued_copies"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase string `form:"artist_pastelid_passphrase" json:"artist_pastelid_passphrase" xml:"artist_pastelid_passphrase"`
	// Name of the artist
	ArtistName string `form:"artist_name" json:"artist_name" xml:"artist_name"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
	// Spendable address
	SpendableAddress string `form:"spendable_address" json:"spendable_address" xml:"spendable_address"`
	// Used to find a suitable masternode with a fee equal or less
	MaximumFee float64 `form:"maximum_fee" json:"maximum_fee" xml:"maximum_fee"`
	// Percentage the artist received in future sales. If set to 0% he only get
	// paids for the first sale on each copy of the NFT
	Royalty float64 `form:"royalty" json:"royalty" xml:"royalty"`
	// To donate 2% of the sale proceeds on every sale to TeamTrees which plants
	// trees
	Green               bool                             `form:"green" json:"green" xml:"green"`
	ThumbnailCoordinate *ThumbnailcoordinateResponseBody `form:"thumbnail_coordinate,omitempty" json:"thumbnail_coordinate,omitempty" xml:"thumbnail_coordinate,omitempty"`
}

// ThumbnailcoordinateResponseBody is used to define fields on response body
// types.
type ThumbnailcoordinateResponseBody struct {
	// X coordinate of the thumbnail's top left conner
	TopLeftX int64 `form:"top_left_x" json:"top_left_x" xml:"top_left_x"`
	// Y coordinate of the thumbnail's top left conner
	TopLeftY int64 `form:"top_left_y" json:"top_left_y" xml:"top_left_y"`
	// X coordinate of the thumbnail's bottom right conner
	BottomRightX int64 `form:"bottom_right_x" json:"bottom_right_x" xml:"bottom_right_x"`
	// Y coordinate of the thumbnail's bottom right conner
	BottomRightY int64 `form:"bottom_right_y" json:"bottom_right_y" xml:"bottom_right_y"`
}

// TaskResponseTiny is used to define fields on response body types.
type TaskResponseTiny struct {
	// JOb ID of the registration process
	ID string `form:"id" json:"id" xml:"id"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
	// txid
	Txid   *string                `form:"txid,omitempty" json:"txid,omitempty" xml:"txid,omitempty"`
	Ticket *ArtworkTicketResponse `form:"ticket" json:"ticket" xml:"ticket"`
}

// ArtworkTicketResponse is used to define fields on response body types.
type ArtworkTicketResponse struct {
	// Name of the artwork
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the artwork
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies int `form:"issued_copies" json:"issued_copies" xml:"issued_copies"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase string `form:"artist_pastelid_passphrase" json:"artist_pastelid_passphrase" xml:"artist_pastelid_passphrase"`
	// Name of the artist
	ArtistName string `form:"artist_name" json:"artist_name" xml:"artist_name"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
	// Spendable address
	SpendableAddress string `form:"spendable_address" json:"spendable_address" xml:"spendable_address"`
	// Used to find a suitable masternode with a fee equal or less
	MaximumFee float64 `form:"maximum_fee" json:"maximum_fee" xml:"maximum_fee"`
	// Percentage the artist received in future sales. If set to 0% he only get
	// paids for the first sale on each copy of the NFT
	Royalty float64 `form:"royalty" json:"royalty" xml:"royalty"`
	// To donate 2% of the sale proceeds on every sale to TeamTrees which plants
	// trees
	Green               bool                         `form:"green" json:"green" xml:"green"`
	ThumbnailCoordinate *ThumbnailcoordinateResponse `form:"thumbnail_coordinate,omitempty" json:"thumbnail_coordinate,omitempty" xml:"thumbnail_coordinate,omitempty"`
}

// ThumbnailcoordinateResponse is used to define fields on response body types.
type ThumbnailcoordinateResponse struct {
	// X coordinate of the thumbnail's top left conner
	TopLeftX int64 `form:"top_left_x" json:"top_left_x" xml:"top_left_x"`
	// Y coordinate of the thumbnail's top left conner
	TopLeftY int64 `form:"top_left_y" json:"top_left_y" xml:"top_left_y"`
	// X coordinate of the thumbnail's bottom right conner
	BottomRightX int64 `form:"bottom_right_x" json:"bottom_right_x" xml:"bottom_right_x"`
	// Y coordinate of the thumbnail's bottom right conner
	BottomRightY int64 `form:"bottom_right_y" json:"bottom_right_y" xml:"bottom_right_y"`
}

// ArtworkSummaryResponseBody is used to define fields on response body types.
type ArtworkSummaryResponseBody struct {
	// Thumbnail image
	Thumbnail []byte `form:"thumbnail,omitempty" json:"thumbnail,omitempty" xml:"thumbnail,omitempty"`
	// txid
	Txid string `form:"txid" json:"txid" xml:"txid"`
	// Name of the artwork
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the artwork
	Description string `form:"description" json:"description" xml:"description"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies
	Copies int `form:"copies" json:"copies" xml:"copies"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Name of the artist
	ArtistName string `form:"artist_name" json:"artist_name" xml:"artist_name"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
}

// FuzzyMatchResponseBody is used to define fields on response body types.
type FuzzyMatchResponseBody struct {
	// String that is matched
	Str *string `form:"str,omitempty" json:"str,omitempty" xml:"str,omitempty"`
	// Field that is matched
	FieldType *string `form:"field_type,omitempty" json:"field_type,omitempty" xml:"field_type,omitempty"`
	// The indexes of matched characters. Useful for highlighting matches
	MatchedIndexes []int `form:"matched_indexes,omitempty" json:"matched_indexes,omitempty" xml:"matched_indexes,omitempty"`
	// Score used to rank matches
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
}

// ThumbnailcoordinateRequestBody is used to define fields on request body
// types.
type ThumbnailcoordinateRequestBody struct {
	// X coordinate of the thumbnail's top left conner
	TopLeftX *int64 `form:"top_left_x,omitempty" json:"top_left_x,omitempty" xml:"top_left_x,omitempty"`
	// Y coordinate of the thumbnail's top left conner
	TopLeftY *int64 `form:"top_left_y,omitempty" json:"top_left_y,omitempty" xml:"top_left_y,omitempty"`
	// X coordinate of the thumbnail's bottom right conner
	BottomRightX *int64 `form:"bottom_right_x,omitempty" json:"bottom_right_x,omitempty" xml:"bottom_right_x,omitempty"`
	// Y coordinate of the thumbnail's bottom right conner
	BottomRightY *int64 `form:"bottom_right_y,omitempty" json:"bottom_right_y,omitempty" xml:"bottom_right_y,omitempty"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "artworks" service.
func NewRegisterResponseBody(res *artworksviews.RegisterResultView) *RegisterResponseBody {
	body := &RegisterResponseBody{
		TaskID: *res.TaskID,
	}
	return body
}

// NewRegisterTaskStateResponseBody builds the HTTP response body from the
// result of the "registerTaskState" endpoint of the "artworks" service.
func NewRegisterTaskStateResponseBody(res *artworks.TaskState) *RegisterTaskStateResponseBody {
	body := &RegisterTaskStateResponseBody{
		Date:   res.Date,
		Status: res.Status,
	}
	return body
}

// NewRegisterTaskResponseBody builds the HTTP response body from the result of
// the "registerTask" endpoint of the "artworks" service.
func NewRegisterTaskResponseBody(res *artworksviews.TaskView) *RegisterTaskResponseBody {
	body := &RegisterTaskResponseBody{
		ID:     *res.ID,
		Status: *res.Status,
		Txid:   res.Txid,
	}
	if res.States != nil {
		body.States = make([]*TaskStateResponseBody, len(res.States))
		for i, val := range res.States {
			body.States[i] = marshalArtworksviewsTaskStateViewToTaskStateResponseBody(val)
		}
	}
	if res.Ticket != nil {
		body.Ticket = marshalArtworksviewsArtworkTicketViewToArtworkTicketResponseBody(res.Ticket)
	}
	return body
}

// NewTaskResponseTinyCollection builds the HTTP response body from the result
// of the "registerTasks" endpoint of the "artworks" service.
func NewTaskResponseTinyCollection(res artworksviews.TaskCollectionView) TaskResponseTinyCollection {
	body := make([]*TaskResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalArtworksviewsTaskViewToTaskResponseTiny(val)
	}
	return body
}

// NewUploadImageResponseBody builds the HTTP response body from the result of
// the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageResponseBody(res *artworksviews.ImageView) *UploadImageResponseBody {
	body := &UploadImageResponseBody{
		ImageID:   *res.ImageID,
		ExpiresIn: *res.ExpiresIn,
	}
	return body
}

// NewArtSearchResponseBody builds the HTTP response body from the result of
// the "artSearch" endpoint of the "artworks" service.
func NewArtSearchResponseBody(res *artworks.ArtworkSearchResult) *ArtSearchResponseBody {
	body := &ArtSearchResponseBody{
		MatchIndex: res.MatchIndex,
	}
	if res.Artwork != nil {
		body.Artwork = marshalArtworksArtworkSummaryToArtworkSummaryResponseBody(res.Artwork)
	}
	if res.Matches != nil {
		body.Matches = make([]*FuzzyMatchResponseBody, len(res.Matches))
		for i, val := range res.Matches {
			body.Matches[i] = marshalArtworksFuzzyMatchToFuzzyMatchResponseBody(val)
		}
	}
	return body
}

// NewArtworkGetResponseBody builds the HTTP response body from the result of
// the "artworkGet" endpoint of the "artworks" service.
func NewArtworkGetResponseBody(res *artworks.ArtworkDetail) *ArtworkGetResponseBody {
	body := &ArtworkGetResponseBody{
		Version:          res.Version,
		IsGreen:          res.IsGreen,
		Royalty:          res.Royalty,
		StorageFee:       res.StorageFee,
		NsfwScore:        res.NsfwScore,
		RarenessScore:    res.RarenessScore,
		SeenScore:        res.SeenScore,
		Thumbnail:        res.Thumbnail,
		Txid:             res.Txid,
		Title:            res.Title,
		Description:      res.Description,
		Keywords:         res.Keywords,
		SeriesName:       res.SeriesName,
		Copies:           res.Copies,
		YoutubeURL:       res.YoutubeURL,
		ArtistPastelID:   res.ArtistPastelID,
		ArtistName:       res.ArtistName,
		ArtistWebsiteURL: res.ArtistWebsiteURL,
	}
	return body
}

// NewRegisterBadRequestResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "artworks" service.
func NewRegisterBadRequestResponseBody(res *goa.ServiceError) *RegisterBadRequestResponseBody {
	body := &RegisterBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "register" endpoint of the "artworks" service.
func NewRegisterInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterInternalServerErrorResponseBody {
	body := &RegisterInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateNotFoundResponseBody builds the HTTP response body from
// the result of the "registerTaskState" endpoint of the "artworks" service.
func NewRegisterTaskStateNotFoundResponseBody(res *goa.ServiceError) *RegisterTaskStateNotFoundResponseBody {
	body := &RegisterTaskStateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerTaskState" endpoint of the "artworks"
// service.
func NewRegisterTaskStateInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTaskStateInternalServerErrorResponseBody {
	body := &RegisterTaskStateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskNotFoundResponseBody builds the HTTP response body from the
// result of the "registerTask" endpoint of the "artworks" service.
func NewRegisterTaskNotFoundResponseBody(res *goa.ServiceError) *RegisterTaskNotFoundResponseBody {
	body := &RegisterTaskNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "registerTask" endpoint of the "artworks" service.
func NewRegisterTaskInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTaskInternalServerErrorResponseBody {
	body := &RegisterTaskInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTasksInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerTasks" endpoint of the "artworks"
// service.
func NewRegisterTasksInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTasksInternalServerErrorResponseBody {
	body := &RegisterTasksInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageBadRequestResponseBody(res *goa.ServiceError) *UploadImageBadRequestResponseBody {
	body := &UploadImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageInternalServerErrorResponseBody(res *goa.ServiceError) *UploadImageInternalServerErrorResponseBody {
	body := &UploadImageInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewArtSearchBadRequestResponseBody builds the HTTP response body from the
// result of the "artSearch" endpoint of the "artworks" service.
func NewArtSearchBadRequestResponseBody(res *goa.ServiceError) *ArtSearchBadRequestResponseBody {
	body := &ArtSearchBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewArtSearchInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "artSearch" endpoint of the "artworks" service.
func NewArtSearchInternalServerErrorResponseBody(res *goa.ServiceError) *ArtSearchInternalServerErrorResponseBody {
	body := &ArtSearchInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewArtworkGetBadRequestResponseBody builds the HTTP response body from the
// result of the "artworkGet" endpoint of the "artworks" service.
func NewArtworkGetBadRequestResponseBody(res *goa.ServiceError) *ArtworkGetBadRequestResponseBody {
	body := &ArtworkGetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewArtworkGetNotFoundResponseBody builds the HTTP response body from the
// result of the "artworkGet" endpoint of the "artworks" service.
func NewArtworkGetNotFoundResponseBody(res *goa.ServiceError) *ArtworkGetNotFoundResponseBody {
	body := &ArtworkGetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewArtworkGetInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "artworkGet" endpoint of the "artworks" service.
func NewArtworkGetInternalServerErrorResponseBody(res *goa.ServiceError) *ArtworkGetInternalServerErrorResponseBody {
	body := &ArtworkGetInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterPayload builds a artworks service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *artworks.RegisterPayload {
	v := &artworks.RegisterPayload{
		ImageID:                  *body.ImageID,
		Name:                     *body.Name,
		Description:              body.Description,
		Keywords:                 body.Keywords,
		SeriesName:               body.SeriesName,
		IssuedCopies:             *body.IssuedCopies,
		YoutubeURL:               body.YoutubeURL,
		ArtistPastelID:           *body.ArtistPastelID,
		ArtistPastelIDPassphrase: *body.ArtistPastelIDPassphrase,
		ArtistName:               *body.ArtistName,
		ArtistWebsiteURL:         body.ArtistWebsiteURL,
		SpendableAddress:         *body.SpendableAddress,
		MaximumFee:               *body.MaximumFee,
	}
	if body.Royalty != nil {
		v.Royalty = *body.Royalty
	}
	if body.Green != nil {
		v.Green = *body.Green
	}
	if body.Royalty == nil {
		v.Royalty = 0
	}
	if body.Green == nil {
		v.Green = false
	}
	if body.ThumbnailCoordinate != nil {
		v.ThumbnailCoordinate = unmarshalThumbnailcoordinateRequestBodyToArtworksThumbnailcoordinate(body.ThumbnailCoordinate)
	}

	return v
}

// NewRegisterTaskStatePayload builds a artworks service registerTaskState
// endpoint payload.
func NewRegisterTaskStatePayload(taskID string) *artworks.RegisterTaskStatePayload {
	v := &artworks.RegisterTaskStatePayload{}
	v.TaskID = taskID

	return v
}

// NewRegisterTaskPayload builds a artworks service registerTask endpoint
// payload.
func NewRegisterTaskPayload(taskID string) *artworks.RegisterTaskPayload {
	v := &artworks.RegisterTaskPayload{}
	v.TaskID = taskID

	return v
}

// NewUploadImagePayload builds a artworks service uploadImage endpoint payload.
func NewUploadImagePayload(body *UploadImageRequestBody) *artworks.UploadImagePayload {
	v := &artworks.UploadImagePayload{
		Bytes:    body.Bytes,
		Filename: body.Filename,
	}

	return v
}

// NewArtSearchPayload builds a artworks service artSearch endpoint payload.
func NewArtSearchPayload(artist *string, limit int, query string, artistName bool, artTitle bool, series bool, descr bool, keyword bool, minCopies *int, maxCopies *int, minBlock int, maxBlock *int, minRarenessScore *int, maxRarenessScore *int, minNsfwScore *int, maxNsfwScore *int) *artworks.ArtSearchPayload {
	v := &artworks.ArtSearchPayload{}
	v.Artist = artist
	v.Limit = limit
	v.Query = query
	v.ArtistName = artistName
	v.ArtTitle = artTitle
	v.Series = series
	v.Descr = descr
	v.Keyword = keyword
	v.MinCopies = minCopies
	v.MaxCopies = maxCopies
	v.MinBlock = minBlock
	v.MaxBlock = maxBlock
	v.MinRarenessScore = minRarenessScore
	v.MaxRarenessScore = maxRarenessScore
	v.MinNsfwScore = minNsfwScore
	v.MaxNsfwScore = maxNsfwScore

	return v
}

// NewArtworkGetPayload builds a artworks service artworkGet endpoint payload.
func NewArtworkGetPayload(txid string) *artworks.ArtworkGetPayload {
	v := &artworks.ArtworkGetPayload{}
	v.Txid = txid

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.ImageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_id", "body"))
	}
	if body.ArtistName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_name", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.IssuedCopies == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issued_copies", "body"))
	}
	if body.ArtistPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid", "body"))
	}
	if body.ArtistPastelIDPassphrase == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid_passphrase", "body"))
	}
	if body.SpendableAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spendable_address", "body"))
	}
	if body.MaximumFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("maximum_fee", "body"))
	}
	if body.ImageID != nil {
		if utf8.RuneCountInString(*body.ImageID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_id", *body.ImageID, utf8.RuneCountInString(*body.ImageID), 8, true))
		}
	}
	if body.ImageID != nil {
		if utf8.RuneCountInString(*body.ImageID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_id", *body.ImageID, utf8.RuneCountInString(*body.ImageID), 8, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 256, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1024, false))
		}
	}
	if body.Keywords != nil {
		if utf8.RuneCountInString(*body.Keywords) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", *body.Keywords, utf8.RuneCountInString(*body.Keywords), 256, false))
		}
	}
	if body.SeriesName != nil {
		if utf8.RuneCountInString(*body.SeriesName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.series_name", *body.SeriesName, utf8.RuneCountInString(*body.SeriesName), 256, false))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1, true))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1000, false))
		}
	}
	if body.YoutubeURL != nil {
		if utf8.RuneCountInString(*body.YoutubeURL) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.youtube_url", *body.YoutubeURL, utf8.RuneCountInString(*body.YoutubeURL), 128, false))
		}
	}
	if body.ArtistPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", *body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, true))
		}
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, false))
		}
	}
	if body.ArtistName != nil {
		if utf8.RuneCountInString(*body.ArtistName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_name", *body.ArtistName, utf8.RuneCountInString(*body.ArtistName), 256, false))
		}
	}
	if body.ArtistWebsiteURL != nil {
		if utf8.RuneCountInString(*body.ArtistWebsiteURL) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_website_url", *body.ArtistWebsiteURL, utf8.RuneCountInString(*body.ArtistWebsiteURL), 256, false))
		}
	}
	if body.SpendableAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", *body.SpendableAddress, "^[a-zA-Z0-9]+$"))
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, true))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, false))
		}
	}
	if body.MaximumFee != nil {
		if *body.MaximumFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maximum_fee", *body.MaximumFee, 1e-05, true))
		}
	}
	if body.Royalty != nil {
		if *body.Royalty < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.royalty", *body.Royalty, 0, true))
		}
	}
	if body.Royalty != nil {
		if *body.Royalty > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.royalty", *body.Royalty, 100, false))
		}
	}
	if body.ThumbnailCoordinate != nil {
		if err2 := ValidateThumbnailcoordinateRequestBody(body.ThumbnailCoordinate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUploadImageRequestBody runs the validations defined on
// UploadImageRequestBody
func ValidateUploadImageRequestBody(body *UploadImageRequestBody) (err error) {
	if body.Bytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}

// ValidateThumbnailcoordinateRequestBody runs the validations defined on
// ThumbnailcoordinateRequestBody
func ValidateThumbnailcoordinateRequestBody(body *ThumbnailcoordinateRequestBody) (err error) {
	if body.TopLeftX == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("top_left_x", "body"))
	}
	if body.TopLeftY == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("top_left_y", "body"))
	}
	if body.BottomRightX == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bottom_right_x", "body"))
	}
	if body.BottomRightY == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bottom_right_y", "body"))
	}
	return
}
