// Code generated by goa v3.5.3, DO NOT EDIT.
//
// openapi HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"encoding/json"
	"fmt"

	openapi "github.com/pastelnetwork/gonode/walletnode/api/gen/openapi"
	goa "goa.design/goa/v3/pkg"
)

// BuildUploadImagePayload builds the payload for the openapi uploadImage
// endpoint from CLI flags.
func BuildUploadImagePayload(openapiUploadImageBody string) (*openapi.UploadImagePayload, error) {
	var err error
	var body UploadImageRequestBody
	{
		err = json.Unmarshal([]byte(openapiUploadImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file\": \"TnVtcXVhbSBhdXRlbSB0ZW1wb3JhIG5lcXVlIGVpdXMu\"\n   }'")
		}
		if body.Bytes == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &openapi.UploadImagePayload{
		Bytes:    body.Bytes,
		Filename: body.Filename,
	}

	return v, nil
}
