// Code generated by goa v3.5.3, DO NOT EDIT.
//
// userdatas HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"unicode/utf8"

	userdatas "github.com/pastelnetwork/gonode/walletnode/api/gen/userdatas"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserdataRequestBody is the type of the "userdatas" service
// "createUserdata" endpoint HTTP request body.
type CreateUserdataRequestBody struct {
	// Real name of the user
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Facebook link of the user
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Location of the user
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Primary language of the user, follow ISO 639-2 standard
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// The categories of user's work, separate by ,
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Biography of the user
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserImageUploadPayloadRequestBody `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserImageUploadPayloadRequestBody `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase string `form:"artist_pastelid_passphrase" json:"artist_pastelid_passphrase" xml:"artist_pastelid_passphrase"`
}

// UpdateUserdataRequestBody is the type of the "userdatas" service
// "updateUserdata" endpoint HTTP request body.
type UpdateUserdataRequestBody struct {
	// Real name of the user
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Facebook link of the user
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Location of the user
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Primary language of the user, follow ISO 639-2 standard
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// The categories of user's work, separate by ,
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Biography of the user
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserImageUploadPayloadRequestBody `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserImageUploadPayloadRequestBody `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase string `form:"artist_pastelid_passphrase" json:"artist_pastelid_passphrase" xml:"artist_pastelid_passphrase"`
}

// CreateUserdataResponseBody is the type of the "userdatas" service
// "createUserdata" endpoint HTTP response body.
type CreateUserdataResponseBody struct {
	// Result of the request is success or not
	ResponseCode *int `form:"response_code,omitempty" json:"response_code,omitempty" xml:"response_code,omitempty"`
	// The detail of why result is success/fail, depend on response_code
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
	// Error detail on realname
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Error detail on facebook_link
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Error detail on twitter_link
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Error detail on native_currency
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Error detail on location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Error detail on primary_language
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// Error detail on categories
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Error detail on biography
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Error detail on avatar
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Error detail on cover photo
	CoverPhoto *string `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
}

// UpdateUserdataResponseBody is the type of the "userdatas" service
// "updateUserdata" endpoint HTTP response body.
type UpdateUserdataResponseBody struct {
	// Result of the request is success or not
	ResponseCode *int `form:"response_code,omitempty" json:"response_code,omitempty" xml:"response_code,omitempty"`
	// The detail of why result is success/fail, depend on response_code
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
	// Error detail on realname
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Error detail on facebook_link
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Error detail on twitter_link
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Error detail on native_currency
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Error detail on location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Error detail on primary_language
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// Error detail on categories
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Error detail on biography
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Error detail on avatar
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Error detail on cover photo
	CoverPhoto *string `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
}

// GetUserdataResponseBody is the type of the "userdatas" service "getUserdata"
// endpoint HTTP response body.
type GetUserdataResponseBody struct {
	// Real name of the user
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Facebook link of the user
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Location of the user
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Primary language of the user, follow ISO 639-2 standard
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// The categories of user's work, separate by ,
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Biography of the user
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserImageUploadPayloadResponseBody `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserImageUploadPayloadResponseBody `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID *string `form:"artist_pastelid,omitempty" json:"artist_pastelid,omitempty" xml:"artist_pastelid,omitempty"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase *string `form:"artist_pastelid_passphrase,omitempty" json:"artist_pastelid_passphrase,omitempty" xml:"artist_pastelid_passphrase,omitempty"`
}

// CreateUserdataBadRequestResponseBody is the type of the "userdatas" service
// "createUserdata" endpoint HTTP response body for the "BadRequest" error.
type CreateUserdataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateUserdataInternalServerErrorResponseBody is the type of the "userdatas"
// service "createUserdata" endpoint HTTP response body for the
// "InternalServerError" error.
type CreateUserdataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateUserdataBadRequestResponseBody is the type of the "userdatas" service
// "updateUserdata" endpoint HTTP response body for the "BadRequest" error.
type UpdateUserdataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateUserdataInternalServerErrorResponseBody is the type of the "userdatas"
// service "updateUserdata" endpoint HTTP response body for the
// "InternalServerError" error.
type UpdateUserdataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserdataBadRequestResponseBody is the type of the "userdatas" service
// "getUserdata" endpoint HTTP response body for the "BadRequest" error.
type GetUserdataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserdataNotFoundResponseBody is the type of the "userdatas" service
// "getUserdata" endpoint HTTP response body for the "NotFound" error.
type GetUserdataNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserdataInternalServerErrorResponseBody is the type of the "userdatas"
// service "getUserdata" endpoint HTTP response body for the
// "InternalServerError" error.
type GetUserdataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserImageUploadPayloadRequestBody is used to define fields on request body
// types.
type UserImageUploadPayloadRequestBody struct {
	// File to upload (byte array of the file content)
	Content []byte `form:"content" json:"content" xml:"content"`
	// File name of the user image
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
}

// UserImageUploadPayloadResponseBody is used to define fields on response body
// types.
type UserImageUploadPayloadResponseBody struct {
	// File to upload (byte array of the file content)
	Content []byte `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// File name of the user image
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
}

// NewCreateUserdataRequestBody builds the HTTP request body from the payload
// of the "createUserdata" endpoint of the "userdatas" service.
func NewCreateUserdataRequestBody(p *userdatas.CreateUserdataPayload) *CreateUserdataRequestBody {
	body := &CreateUserdataRequestBody{
		RealName:                 p.RealName,
		FacebookLink:             p.FacebookLink,
		TwitterLink:              p.TwitterLink,
		NativeCurrency:           p.NativeCurrency,
		Location:                 p.Location,
		PrimaryLanguage:          p.PrimaryLanguage,
		Categories:               p.Categories,
		Biography:                p.Biography,
		ArtistPastelID:           p.ArtistPastelID,
		ArtistPastelIDPassphrase: p.ArtistPastelIDPassphrase,
	}
	if p.AvatarImage != nil {
		body.AvatarImage = marshalUserdatasUserImageUploadPayloadToUserImageUploadPayloadRequestBody(p.AvatarImage)
	}
	if p.CoverPhoto != nil {
		body.CoverPhoto = marshalUserdatasUserImageUploadPayloadToUserImageUploadPayloadRequestBody(p.CoverPhoto)
	}
	return body
}

// NewUpdateUserdataRequestBody builds the HTTP request body from the payload
// of the "updateUserdata" endpoint of the "userdatas" service.
func NewUpdateUserdataRequestBody(p *userdatas.UpdateUserdataPayload) *UpdateUserdataRequestBody {
	body := &UpdateUserdataRequestBody{
		RealName:                 p.RealName,
		FacebookLink:             p.FacebookLink,
		TwitterLink:              p.TwitterLink,
		NativeCurrency:           p.NativeCurrency,
		Location:                 p.Location,
		PrimaryLanguage:          p.PrimaryLanguage,
		Categories:               p.Categories,
		Biography:                p.Biography,
		ArtistPastelID:           p.ArtistPastelID,
		ArtistPastelIDPassphrase: p.ArtistPastelIDPassphrase,
	}
	if p.AvatarImage != nil {
		body.AvatarImage = marshalUserdatasUserImageUploadPayloadToUserImageUploadPayloadRequestBody(p.AvatarImage)
	}
	if p.CoverPhoto != nil {
		body.CoverPhoto = marshalUserdatasUserImageUploadPayloadToUserImageUploadPayloadRequestBody(p.CoverPhoto)
	}
	return body
}

// NewCreateUserdataUserdataProcessResultOK builds a "userdatas" service
// "createUserdata" endpoint result from a HTTP "OK" response.
func NewCreateUserdataUserdataProcessResultOK(body *CreateUserdataResponseBody) *userdatas.UserdataProcessResult {
	v := &userdatas.UserdataProcessResult{
		ResponseCode:    *body.ResponseCode,
		Detail:          *body.Detail,
		RealName:        body.RealName,
		FacebookLink:    body.FacebookLink,
		TwitterLink:     body.TwitterLink,
		NativeCurrency:  body.NativeCurrency,
		Location:        body.Location,
		PrimaryLanguage: body.PrimaryLanguage,
		Categories:      body.Categories,
		Biography:       body.Biography,
		AvatarImage:     body.AvatarImage,
		CoverPhoto:      body.CoverPhoto,
	}

	return v
}

// NewCreateUserdataBadRequest builds a userdatas service createUserdata
// endpoint BadRequest error.
func NewCreateUserdataBadRequest(body *CreateUserdataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateUserdataInternalServerError builds a userdatas service
// createUserdata endpoint InternalServerError error.
func NewCreateUserdataInternalServerError(body *CreateUserdataInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUserdataUserdataProcessResultOK builds a "userdatas" service
// "updateUserdata" endpoint result from a HTTP "OK" response.
func NewUpdateUserdataUserdataProcessResultOK(body *UpdateUserdataResponseBody) *userdatas.UserdataProcessResult {
	v := &userdatas.UserdataProcessResult{
		ResponseCode:    *body.ResponseCode,
		Detail:          *body.Detail,
		RealName:        body.RealName,
		FacebookLink:    body.FacebookLink,
		TwitterLink:     body.TwitterLink,
		NativeCurrency:  body.NativeCurrency,
		Location:        body.Location,
		PrimaryLanguage: body.PrimaryLanguage,
		Categories:      body.Categories,
		Biography:       body.Biography,
		AvatarImage:     body.AvatarImage,
		CoverPhoto:      body.CoverPhoto,
	}

	return v
}

// NewUpdateUserdataBadRequest builds a userdatas service updateUserdata
// endpoint BadRequest error.
func NewUpdateUserdataBadRequest(body *UpdateUserdataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUserdataInternalServerError builds a userdatas service
// updateUserdata endpoint InternalServerError error.
func NewUpdateUserdataInternalServerError(body *UpdateUserdataInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserdataUserSpecifiedDataOK builds a "userdatas" service "getUserdata"
// endpoint result from a HTTP "OK" response.
func NewGetUserdataUserSpecifiedDataOK(body *GetUserdataResponseBody) *userdatas.UserSpecifiedData {
	v := &userdatas.UserSpecifiedData{
		RealName:                 body.RealName,
		FacebookLink:             body.FacebookLink,
		TwitterLink:              body.TwitterLink,
		NativeCurrency:           body.NativeCurrency,
		Location:                 body.Location,
		PrimaryLanguage:          body.PrimaryLanguage,
		Categories:               body.Categories,
		Biography:                body.Biography,
		ArtistPastelID:           *body.ArtistPastelID,
		ArtistPastelIDPassphrase: *body.ArtistPastelIDPassphrase,
	}
	if body.AvatarImage != nil {
		v.AvatarImage = unmarshalUserImageUploadPayloadResponseBodyToUserdatasUserImageUploadPayload(body.AvatarImage)
	}
	if body.CoverPhoto != nil {
		v.CoverPhoto = unmarshalUserImageUploadPayloadResponseBodyToUserdatasUserImageUploadPayload(body.CoverPhoto)
	}

	return v
}

// NewGetUserdataBadRequest builds a userdatas service getUserdata endpoint
// BadRequest error.
func NewGetUserdataBadRequest(body *GetUserdataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserdataNotFound builds a userdatas service getUserdata endpoint
// NotFound error.
func NewGetUserdataNotFound(body *GetUserdataNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserdataInternalServerError builds a userdatas service getUserdata
// endpoint InternalServerError error.
func NewGetUserdataInternalServerError(body *GetUserdataInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateUserdataResponseBody runs the validations defined on
// CreateUserdataResponseBody
func ValidateCreateUserdataResponseBody(body *CreateUserdataResponseBody) (err error) {
	if body.ResponseCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response_code", "body"))
	}
	if body.Detail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("detail", "body"))
	}
	if body.Detail != nil {
		if utf8.RuneCountInString(*body.Detail) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.detail", *body.Detail, utf8.RuneCountInString(*body.Detail), 256, false))
		}
	}
	if body.RealName != nil {
		if utf8.RuneCountInString(*body.RealName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.RealName, utf8.RuneCountInString(*body.RealName), 256, false))
		}
	}
	if body.FacebookLink != nil {
		if utf8.RuneCountInString(*body.FacebookLink) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 256, false))
		}
	}
	if body.TwitterLink != nil {
		if utf8.RuneCountInString(*body.TwitterLink) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 256, false))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 256, false))
		}
	}
	if body.Location != nil {
		if utf8.RuneCountInString(*body.Location) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
		}
	}
	if body.PrimaryLanguage != nil {
		if utf8.RuneCountInString(*body.PrimaryLanguage) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 256, false))
		}
	}
	if body.Categories != nil {
		if utf8.RuneCountInString(*body.Categories) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.categories", *body.Categories, utf8.RuneCountInString(*body.Categories), 256, false))
		}
	}
	if body.Biography != nil {
		if utf8.RuneCountInString(*body.Biography) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 256, false))
		}
	}
	if body.AvatarImage != nil {
		if utf8.RuneCountInString(*body.AvatarImage) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.avatar_image", *body.AvatarImage, utf8.RuneCountInString(*body.AvatarImage), 256, false))
		}
	}
	if body.CoverPhoto != nil {
		if utf8.RuneCountInString(*body.CoverPhoto) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.cover_photo", *body.CoverPhoto, utf8.RuneCountInString(*body.CoverPhoto), 256, false))
		}
	}
	return
}

// ValidateUpdateUserdataResponseBody runs the validations defined on
// UpdateUserdataResponseBody
func ValidateUpdateUserdataResponseBody(body *UpdateUserdataResponseBody) (err error) {
	if body.ResponseCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("response_code", "body"))
	}
	if body.Detail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("detail", "body"))
	}
	if body.Detail != nil {
		if utf8.RuneCountInString(*body.Detail) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.detail", *body.Detail, utf8.RuneCountInString(*body.Detail), 256, false))
		}
	}
	if body.RealName != nil {
		if utf8.RuneCountInString(*body.RealName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.RealName, utf8.RuneCountInString(*body.RealName), 256, false))
		}
	}
	if body.FacebookLink != nil {
		if utf8.RuneCountInString(*body.FacebookLink) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 256, false))
		}
	}
	if body.TwitterLink != nil {
		if utf8.RuneCountInString(*body.TwitterLink) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 256, false))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 256, false))
		}
	}
	if body.Location != nil {
		if utf8.RuneCountInString(*body.Location) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
		}
	}
	if body.PrimaryLanguage != nil {
		if utf8.RuneCountInString(*body.PrimaryLanguage) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 256, false))
		}
	}
	if body.Categories != nil {
		if utf8.RuneCountInString(*body.Categories) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.categories", *body.Categories, utf8.RuneCountInString(*body.Categories), 256, false))
		}
	}
	if body.Biography != nil {
		if utf8.RuneCountInString(*body.Biography) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 256, false))
		}
	}
	if body.AvatarImage != nil {
		if utf8.RuneCountInString(*body.AvatarImage) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.avatar_image", *body.AvatarImage, utf8.RuneCountInString(*body.AvatarImage), 256, false))
		}
	}
	if body.CoverPhoto != nil {
		if utf8.RuneCountInString(*body.CoverPhoto) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.cover_photo", *body.CoverPhoto, utf8.RuneCountInString(*body.CoverPhoto), 256, false))
		}
	}
	return
}

// ValidateGetUserdataResponseBody runs the validations defined on
// GetUserdataResponseBody
func ValidateGetUserdataResponseBody(body *GetUserdataResponseBody) (err error) {
	if body.ArtistPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid", "body"))
	}
	if body.ArtistPastelIDPassphrase == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid_passphrase", "body"))
	}
	if body.RealName != nil {
		if utf8.RuneCountInString(*body.RealName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.RealName, utf8.RuneCountInString(*body.RealName), 256, false))
		}
	}
	if body.FacebookLink != nil {
		if utf8.RuneCountInString(*body.FacebookLink) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 128, false))
		}
	}
	if body.TwitterLink != nil {
		if utf8.RuneCountInString(*body.TwitterLink) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 128, false))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, true))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, false))
		}
	}
	if body.Location != nil {
		if utf8.RuneCountInString(*body.Location) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
		}
	}
	if body.PrimaryLanguage != nil {
		if utf8.RuneCountInString(*body.PrimaryLanguage) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 30, false))
		}
	}
	if body.Biography != nil {
		if utf8.RuneCountInString(*body.Biography) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 1024, false))
		}
	}
	if body.AvatarImage != nil {
		if err2 := ValidateUserImageUploadPayloadResponseBody(body.AvatarImage); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CoverPhoto != nil {
		if err2 := ValidateUserImageUploadPayloadResponseBody(body.CoverPhoto); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ArtistPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", *body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, true))
		}
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, false))
		}
	}
	return
}

// ValidateCreateUserdataBadRequestResponseBody runs the validations defined on
// createUserdata_BadRequest_response_body
func ValidateCreateUserdataBadRequestResponseBody(body *CreateUserdataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateUserdataInternalServerErrorResponseBody runs the validations
// defined on createUserdata_InternalServerError_response_body
func ValidateCreateUserdataInternalServerErrorResponseBody(body *CreateUserdataInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateUserdataBadRequestResponseBody runs the validations defined on
// updateUserdata_BadRequest_response_body
func ValidateUpdateUserdataBadRequestResponseBody(body *UpdateUserdataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateUserdataInternalServerErrorResponseBody runs the validations
// defined on updateUserdata_InternalServerError_response_body
func ValidateUpdateUserdataInternalServerErrorResponseBody(body *UpdateUserdataInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserdataBadRequestResponseBody runs the validations defined on
// getUserdata_BadRequest_response_body
func ValidateGetUserdataBadRequestResponseBody(body *GetUserdataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserdataNotFoundResponseBody runs the validations defined on
// getUserdata_NotFound_response_body
func ValidateGetUserdataNotFoundResponseBody(body *GetUserdataNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserdataInternalServerErrorResponseBody runs the validations
// defined on getUserdata_InternalServerError_response_body
func ValidateGetUserdataInternalServerErrorResponseBody(body *GetUserdataInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserImageUploadPayloadRequestBody runs the validations defined on
// UserImageUploadPayloadRequestBody
func ValidateUserImageUploadPayloadRequestBody(body *UserImageUploadPayloadRequestBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Filename != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.filename", *body.Filename, "^.*\\.(png|PNG|jpeg|JPEG|jpg|JPG)$"))
	}
	return
}

// ValidateUserImageUploadPayloadResponseBody runs the validations defined on
// UserImageUploadPayloadResponseBody
func ValidateUserImageUploadPayloadResponseBody(body *UserImageUploadPayloadResponseBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Filename != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.filename", *body.Filename, "^.*\\.(png|PNG|jpeg|JPEG|jpg|JPG)$"))
	}
	return
}
