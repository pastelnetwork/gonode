// Code generated by goa v3.4.3, DO NOT EDIT.
//
// userdatas client HTTP transport
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"context"
	"mime/multipart"
	"net/http"

	userdatas "github.com/pastelnetwork/gonode/walletnode/api/gen/userdatas"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the userdatas service endpoint HTTP clients.
type Client struct {
	// CreateUserdata Doer is the HTTP client used to make requests to the
	// createUserdata endpoint.
	CreateUserdataDoer goahttp.Doer

	// UpdateUserdata Doer is the HTTP client used to make requests to the
	// updateUserdata endpoint.
	UpdateUserdataDoer goahttp.Doer

	// UserdataGet Doer is the HTTP client used to make requests to the userdataGet
	// endpoint.
	UserdataGetDoer goahttp.Doer

	// SetUserFollowRelation Doer is the HTTP client used to make requests to the
	// setUserFollowRelation endpoint.
	SetUserFollowRelationDoer goahttp.Doer

	// GetFollowers Doer is the HTTP client used to make requests to the
	// getFollowers endpoint.
	GetFollowersDoer goahttp.Doer

	// GetFollowees Doer is the HTTP client used to make requests to the
	// getFollowees endpoint.
	GetFolloweesDoer goahttp.Doer

	// GetFriends Doer is the HTTP client used to make requests to the getFriends
	// endpoint.
	GetFriendsDoer goahttp.Doer

	// SetUserLikeArt Doer is the HTTP client used to make requests to the
	// setUserLikeArt endpoint.
	SetUserLikeArtDoer goahttp.Doer

	// GetUsersLikeArt Doer is the HTTP client used to make requests to the
	// getUsersLikeArt endpoint.
	GetUsersLikeArtDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// UserdatasCreateUserdataEncoderFunc is the type to encode multipart request
// for the "userdatas" service "createUserdata" endpoint.
type UserdatasCreateUserdataEncoderFunc func(*multipart.Writer, *userdatas.CreateUserdataPayload) error

// UserdatasUpdateUserdataEncoderFunc is the type to encode multipart request
// for the "userdatas" service "updateUserdata" endpoint.
type UserdatasUpdateUserdataEncoderFunc func(*multipart.Writer, *userdatas.UpdateUserdataPayload) error

// NewClient instantiates HTTP clients for all the userdatas service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateUserdataDoer:        doer,
		UpdateUserdataDoer:        doer,
		UserdataGetDoer:           doer,
		SetUserFollowRelationDoer: doer,
		GetFollowersDoer:          doer,
		GetFolloweesDoer:          doer,
		GetFriendsDoer:            doer,
		SetUserLikeArtDoer:        doer,
		GetUsersLikeArtDoer:       doer,
		CORSDoer:                  doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// CreateUserdata returns an endpoint that makes HTTP requests to the userdatas
// service createUserdata server.
func (c *Client) CreateUserdata(userdatasCreateUserdataEncoderFn UserdatasCreateUserdataEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserdataRequest(NewUserdatasCreateUserdataEncoder(userdatasCreateUserdataEncoderFn))
		decodeResponse = DecodeCreateUserdataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateUserdataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserdataDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "createUserdata", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUserdata returns an endpoint that makes HTTP requests to the userdatas
// service updateUserdata server.
func (c *Client) UpdateUserdata(userdatasUpdateUserdataEncoderFn UserdatasUpdateUserdataEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUserdataRequest(NewUserdatasUpdateUserdataEncoder(userdatasUpdateUserdataEncoderFn))
		decodeResponse = DecodeUpdateUserdataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateUserdataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUserdataDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "updateUserdata", err)
		}
		return decodeResponse(resp)
	}
}

// UserdataGet returns an endpoint that makes HTTP requests to the userdatas
// service userdataGet server.
func (c *Client) UserdataGet() goa.Endpoint {
	var (
		decodeResponse = DecodeUserdataGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserdataGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserdataGetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "userdataGet", err)
		}
		return decodeResponse(resp)
	}
}

// SetUserFollowRelation returns an endpoint that makes HTTP requests to the
// userdatas service setUserFollowRelation server.
func (c *Client) SetUserFollowRelation() goa.Endpoint {
	var (
		encodeRequest  = EncodeSetUserFollowRelationRequest(c.encoder)
		decodeResponse = DecodeSetUserFollowRelationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSetUserFollowRelationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SetUserFollowRelationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "setUserFollowRelation", err)
		}
		return decodeResponse(resp)
	}
}

// GetFollowers returns an endpoint that makes HTTP requests to the userdatas
// service getFollowers server.
func (c *Client) GetFollowers() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetFollowersRequest(c.encoder)
		decodeResponse = DecodeGetFollowersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFollowersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFollowersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "getFollowers", err)
		}
		return decodeResponse(resp)
	}
}

// GetFollowees returns an endpoint that makes HTTP requests to the userdatas
// service getFollowees server.
func (c *Client) GetFollowees() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetFolloweesRequest(c.encoder)
		decodeResponse = DecodeGetFolloweesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFolloweesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFolloweesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "getFollowees", err)
		}
		return decodeResponse(resp)
	}
}

// GetFriends returns an endpoint that makes HTTP requests to the userdatas
// service getFriends server.
func (c *Client) GetFriends() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetFriendsRequest(c.encoder)
		decodeResponse = DecodeGetFriendsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFriendsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFriendsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "getFriends", err)
		}
		return decodeResponse(resp)
	}
}

// SetUserLikeArt returns an endpoint that makes HTTP requests to the userdatas
// service setUserLikeArt server.
func (c *Client) SetUserLikeArt() goa.Endpoint {
	var (
		encodeRequest  = EncodeSetUserLikeArtRequest(c.encoder)
		decodeResponse = DecodeSetUserLikeArtResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSetUserLikeArtRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SetUserLikeArtDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "setUserLikeArt", err)
		}
		return decodeResponse(resp)
	}
}

// GetUsersLikeArt returns an endpoint that makes HTTP requests to the
// userdatas service getUsersLikeArt server.
func (c *Client) GetUsersLikeArt() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUsersLikeArtRequest(c.encoder)
		decodeResponse = DecodeGetUsersLikeArtResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUsersLikeArtRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUsersLikeArtDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("userdatas", "getUsersLikeArt", err)
		}
		return decodeResponse(resp)
	}
}
