// Code generated by goa v3.4.3, DO NOT EDIT.
//
// userdatas HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	userdatas "github.com/pastelnetwork/gonode/walletnode/api/gen/userdatas"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateUserdataPayload builds the payload for the userdatas
// createUserdata endpoint from CLI flags.
func BuildCreateUserdataPayload(userdatasCreateUserdataBody string) (*userdatas.CreateUserdataPayload, error) {
	var err error
	var body CreateUserdataRequestBody
	{
		err = json.Unmarshal([]byte(userdatasCreateUserdataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artist_pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"artist_pastelid_passphrase\": \"qwerasdf1234\",\n      \"avatar_image\": {\n         \"content\": \"RWEgZXQgcXVpIG1pbmltYSBleGNlcHR1cmkgcXVpIGFzc3VtZW5kYS4=\"\n      },\n      \"biography\": \"I\\'m a digital artist based in Paris, France. ...\",\n      \"categories\": \"Magnam ut eum eligendi velit sequi.\",\n      \"cover_photo\": {\n         \"content\": \"RWEgZXQgcXVpIG1pbmltYSBleGNlcHR1cmkgcXVpIGFzc3VtZW5kYS4=\"\n      },\n      \"facebook_link\": \"https://www.facebook.com/Williams_Scottish\",\n      \"location\": \"New York, US\",\n      \"native_currency\": \"USD\",\n      \"primary_language\": \"English\",\n      \"realname\": \"Williams Scottish\",\n      \"twitter_link\": \"https://www.twitter.com/@Williams_Scottish\"\n   }'")
		}
		if body.Realname != nil {
			if utf8.RuneCountInString(*body.Realname) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.Realname, utf8.RuneCountInString(*body.Realname), 256, false))
			}
		}
		if body.FacebookLink != nil {
			if utf8.RuneCountInString(*body.FacebookLink) > 128 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 128, false))
			}
		}
		if body.TwitterLink != nil {
			if utf8.RuneCountInString(*body.TwitterLink) > 128 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 128, false))
			}
		}
		if body.NativeCurrency != nil {
			if utf8.RuneCountInString(*body.NativeCurrency) < 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, true))
			}
		}
		if body.NativeCurrency != nil {
			if utf8.RuneCountInString(*body.NativeCurrency) > 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, false))
			}
		}
		if body.Location != nil {
			if utf8.RuneCountInString(*body.Location) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
			}
		}
		if body.PrimaryLanguage != nil {
			if utf8.RuneCountInString(*body.PrimaryLanguage) > 30 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 30, false))
			}
		}
		if body.Biography != nil {
			if utf8.RuneCountInString(*body.Biography) > 1024 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 1024, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", body.ArtistPastelID, utf8.RuneCountInString(body.ArtistPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", body.ArtistPastelID, utf8.RuneCountInString(body.ArtistPastelID), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.CreateUserdataPayload{
		Realname:                 body.Realname,
		FacebookLink:             body.FacebookLink,
		TwitterLink:              body.TwitterLink,
		NativeCurrency:           body.NativeCurrency,
		Location:                 body.Location,
		PrimaryLanguage:          body.PrimaryLanguage,
		Categories:               body.Categories,
		Biography:                body.Biography,
		ArtistPastelID:           body.ArtistPastelID,
		ArtistPastelIDPassphrase: body.ArtistPastelIDPassphrase,
	}
	if body.AvatarImage != nil {
		v.AvatarImage = marshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.AvatarImage)
	}
	if body.CoverPhoto != nil {
		v.CoverPhoto = marshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.CoverPhoto)
	}

	return v, nil
}

// BuildUpdateUserdataPayload builds the payload for the userdatas
// updateUserdata endpoint from CLI flags.
func BuildUpdateUserdataPayload(userdatasUpdateUserdataBody string) (*userdatas.UpdateUserdataPayload, error) {
	var err error
	var body UpdateUserdataRequestBody
	{
		err = json.Unmarshal([]byte(userdatasUpdateUserdataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artist_pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"artist_pastelid_passphrase\": \"qwerasdf1234\",\n      \"avatar_image\": {\n         \"content\": \"RWEgZXQgcXVpIG1pbmltYSBleGNlcHR1cmkgcXVpIGFzc3VtZW5kYS4=\"\n      },\n      \"biography\": \"I\\'m a digital artist based in Paris, France. ...\",\n      \"categories\": \"Aut quae illum et nisi provident.\",\n      \"cover_photo\": {\n         \"content\": \"RWEgZXQgcXVpIG1pbmltYSBleGNlcHR1cmkgcXVpIGFzc3VtZW5kYS4=\"\n      },\n      \"facebook_link\": \"https://www.facebook.com/Williams_Scottish\",\n      \"location\": \"New York, US\",\n      \"native_currency\": \"USD\",\n      \"primary_language\": \"English\",\n      \"realname\": \"Williams Scottish\",\n      \"twitter_link\": \"https://www.twitter.com/@Williams_Scottish\"\n   }'")
		}
		if body.Realname != nil {
			if utf8.RuneCountInString(*body.Realname) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.Realname, utf8.RuneCountInString(*body.Realname), 256, false))
			}
		}
		if body.FacebookLink != nil {
			if utf8.RuneCountInString(*body.FacebookLink) > 128 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 128, false))
			}
		}
		if body.TwitterLink != nil {
			if utf8.RuneCountInString(*body.TwitterLink) > 128 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 128, false))
			}
		}
		if body.NativeCurrency != nil {
			if utf8.RuneCountInString(*body.NativeCurrency) < 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, true))
			}
		}
		if body.NativeCurrency != nil {
			if utf8.RuneCountInString(*body.NativeCurrency) > 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, false))
			}
		}
		if body.Location != nil {
			if utf8.RuneCountInString(*body.Location) > 256 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
			}
		}
		if body.PrimaryLanguage != nil {
			if utf8.RuneCountInString(*body.PrimaryLanguage) > 30 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 30, false))
			}
		}
		if body.Biography != nil {
			if utf8.RuneCountInString(*body.Biography) > 1024 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 1024, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", body.ArtistPastelID, utf8.RuneCountInString(body.ArtistPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", body.ArtistPastelID, utf8.RuneCountInString(body.ArtistPastelID), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.UpdateUserdataPayload{
		Realname:                 body.Realname,
		FacebookLink:             body.FacebookLink,
		TwitterLink:              body.TwitterLink,
		NativeCurrency:           body.NativeCurrency,
		Location:                 body.Location,
		PrimaryLanguage:          body.PrimaryLanguage,
		Categories:               body.Categories,
		Biography:                body.Biography,
		ArtistPastelID:           body.ArtistPastelID,
		ArtistPastelIDPassphrase: body.ArtistPastelIDPassphrase,
	}
	if body.AvatarImage != nil {
		v.AvatarImage = marshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.AvatarImage)
	}
	if body.CoverPhoto != nil {
		v.CoverPhoto = marshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.CoverPhoto)
	}

	return v, nil
}

// BuildUserdataGetPayload builds the payload for the userdatas userdataGet
// endpoint from CLI flags.
func BuildUserdataGetPayload(userdatasUserdataGetPastelid string) (*userdatas.UserdataGetPayload, error) {
	var err error
	var pastelid string
	{
		pastelid = userdatasUserdataGetPastelid
		err = goa.MergeErrors(err, goa.ValidatePattern("pastelid", pastelid, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("pastelid", pastelid, utf8.RuneCountInString(pastelid), 86, true))
		}
		if utf8.RuneCountInString(pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("pastelid", pastelid, utf8.RuneCountInString(pastelid), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.UserdataGetPayload{}
	v.Pastelid = pastelid

	return v, nil
}

// BuildSetUserFollowRelationPayload builds the payload for the userdatas
// setUserFollowRelation endpoint from CLI flags.
func BuildSetUserFollowRelationPayload(userdatasSetUserFollowRelationBody string) (*userdatas.SetUserFollowRelationPayload, error) {
	var err error
	var body SetUserFollowRelationRequestBody
	{
		err = json.Unmarshal([]byte(userdatasSetUserFollowRelationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"followee_pastel_id\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VaoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"follower_pastel_id\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.follower_pastel_id", body.FollowerPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.FollowerPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.follower_pastel_id", body.FollowerPastelID, utf8.RuneCountInString(body.FollowerPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.FollowerPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.follower_pastel_id", body.FollowerPastelID, utf8.RuneCountInString(body.FollowerPastelID), 86, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.followee_pastel_id", body.FolloweePastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.FolloweePastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.followee_pastel_id", body.FolloweePastelID, utf8.RuneCountInString(body.FolloweePastelID), 86, true))
		}
		if utf8.RuneCountInString(body.FolloweePastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.followee_pastel_id", body.FolloweePastelID, utf8.RuneCountInString(body.FolloweePastelID), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.SetUserFollowRelationPayload{
		FollowerPastelID: body.FollowerPastelID,
		FolloweePastelID: body.FolloweePastelID,
	}

	return v, nil
}

// BuildGetFollowersPayload builds the payload for the userdatas getFollowers
// endpoint from CLI flags.
func BuildGetFollowersPayload(userdatasGetFollowersBody string) (*userdatas.GetFollowersPayload, error) {
	var err error
	var body GetFollowersRequestBody
	{
		err = json.Unmarshal([]byte(userdatasGetFollowersBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 10,\n      \"offset\": 0,\n      \"pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastelid", body.Pastelid, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.Pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", body.Pastelid, utf8.RuneCountInString(body.Pastelid), 86, true))
		}
		if utf8.RuneCountInString(body.Pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", body.Pastelid, utf8.RuneCountInString(body.Pastelid), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.GetFollowersPayload{
		Pastelid: body.Pastelid,
		Limit:    body.Limit,
		Offset:   body.Offset,
	}

	return v, nil
}

// BuildGetFolloweesPayload builds the payload for the userdatas getFollowees
// endpoint from CLI flags.
func BuildGetFolloweesPayload(userdatasGetFolloweesBody string) (*userdatas.GetFolloweesPayload, error) {
	var err error
	var body GetFolloweesRequestBody
	{
		err = json.Unmarshal([]byte(userdatasGetFolloweesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 10,\n      \"offset\": 0,\n      \"pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastelid", body.Pastelid, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.Pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", body.Pastelid, utf8.RuneCountInString(body.Pastelid), 86, true))
		}
		if utf8.RuneCountInString(body.Pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", body.Pastelid, utf8.RuneCountInString(body.Pastelid), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.GetFolloweesPayload{
		Pastelid: body.Pastelid,
		Limit:    body.Limit,
		Offset:   body.Offset,
	}

	return v, nil
}

// BuildGetFriendsPayload builds the payload for the userdatas getFriends
// endpoint from CLI flags.
func BuildGetFriendsPayload(userdatasGetFriendsBody string) (*userdatas.GetFriendsPayload, error) {
	var err error
	var body GetFriendsRequestBody
	{
		err = json.Unmarshal([]byte(userdatasGetFriendsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 10,\n      \"offset\": 0,\n      \"pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastelid", body.Pastelid, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.Pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", body.Pastelid, utf8.RuneCountInString(body.Pastelid), 86, true))
		}
		if utf8.RuneCountInString(body.Pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", body.Pastelid, utf8.RuneCountInString(body.Pastelid), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.GetFriendsPayload{
		Pastelid: body.Pastelid,
		Limit:    body.Limit,
		Offset:   body.Offset,
	}

	return v, nil
}

// BuildSetUserLikeArtPayload builds the payload for the userdatas
// setUserLikeArt endpoint from CLI flags.
func BuildSetUserLikeArtPayload(userdatasSetUserLikeArtBody string) (*userdatas.SetUserLikeArtPayload, error) {
	var err error
	var body SetUserLikeArtRequestBody
	{
		err = json.Unmarshal([]byte(userdatasSetUserLikeArtBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"art_pastel_id\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VaoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"user_pastel_id\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.user_pastel_id", body.UserPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.UserPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_pastel_id", body.UserPastelID, utf8.RuneCountInString(body.UserPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.UserPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_pastel_id", body.UserPastelID, utf8.RuneCountInString(body.UserPastelID), 86, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.art_pastel_id", body.ArtPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.ArtPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_pastel_id", body.ArtPastelID, utf8.RuneCountInString(body.ArtPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.ArtPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_pastel_id", body.ArtPastelID, utf8.RuneCountInString(body.ArtPastelID), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.SetUserLikeArtPayload{
		UserPastelID: body.UserPastelID,
		ArtPastelID:  body.ArtPastelID,
	}

	return v, nil
}

// BuildGetUsersLikeArtPayload builds the payload for the userdatas
// getUsersLikeArt endpoint from CLI flags.
func BuildGetUsersLikeArtPayload(userdatasGetUsersLikeArtBody string) (*userdatas.GetUsersLikeArtPayload, error) {
	var err error
	var body GetUsersLikeArtRequestBody
	{
		err = json.Unmarshal([]byte(userdatasGetUsersLikeArtBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"art_id\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"limit\": 10,\n      \"offset\": 0\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.art_id", body.ArtID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.ArtID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_id", body.ArtID, utf8.RuneCountInString(body.ArtID), 86, true))
		}
		if utf8.RuneCountInString(body.ArtID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_id", body.ArtID, utf8.RuneCountInString(body.ArtID), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userdatas.GetUsersLikeArtPayload{
		ArtID:  body.ArtID,
		Limit:  body.Limit,
		Offset: body.Offset,
	}

	return v, nil
}
