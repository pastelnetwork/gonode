// Code generated by goa v3.4.3, DO NOT EDIT.
//
// userdatas HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"unicode/utf8"

	userdatas "github.com/pastelnetwork/gonode/walletnode/api/gen/userdatas"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserdataRequestBody is the type of the "userdatas" service
// "createUserdata" endpoint HTTP request body.
type CreateUserdataRequestBody struct {
	// Real name of the user
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Facebook link of the user
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Location of the user
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Primary language of the user, follow ISO 639-2 standard
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// The categories of user's work, separate by ,
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Biography of the user
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserImageUploadPayloadRequestBody `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserImageUploadPayloadRequestBody `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID *string `form:"artist_pastelid,omitempty" json:"artist_pastelid,omitempty" xml:"artist_pastelid,omitempty"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase *string `form:"artist_pastelid_passphrase,omitempty" json:"artist_pastelid_passphrase,omitempty" xml:"artist_pastelid_passphrase,omitempty"`
}

// UpdateUserdataRequestBody is the type of the "userdatas" service
// "updateUserdata" endpoint HTTP request body.
type UpdateUserdataRequestBody struct {
	// Real name of the user
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Facebook link of the user
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Location of the user
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Primary language of the user, follow ISO 639-2 standard
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// The categories of user's work, separate by ,
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Biography of the user
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserImageUploadPayloadRequestBody `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserImageUploadPayloadRequestBody `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID *string `form:"artist_pastelid,omitempty" json:"artist_pastelid,omitempty" xml:"artist_pastelid,omitempty"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase *string `form:"artist_pastelid_passphrase,omitempty" json:"artist_pastelid_passphrase,omitempty" xml:"artist_pastelid_passphrase,omitempty"`
}

// SetUserFollowRelationRequestBody is the type of the "userdatas" service
// "setUserFollowRelation" endpoint HTTP request body.
type SetUserFollowRelationRequestBody struct {
	// Follower's PastelID
	FollowerPastelID *string `form:"follower_pastel_id,omitempty" json:"follower_pastel_id,omitempty" xml:"follower_pastel_id,omitempty"`
	// Followee's PastelID
	FolloweePastelID *string `form:"followee_pastel_id,omitempty" json:"followee_pastel_id,omitempty" xml:"followee_pastel_id,omitempty"`
}

// GetFollowersRequestBody is the type of the "userdatas" service
// "getFollowers" endpoint HTTP request body.
type GetFollowersRequestBody struct {
	// Artist's PastelID
	Pastelid *string `form:"pastelid,omitempty" json:"pastelid,omitempty" xml:"pastelid,omitempty"`
	// limit for paginated list
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// offset for paginated list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// GetFolloweesRequestBody is the type of the "userdatas" service
// "getFollowees" endpoint HTTP request body.
type GetFolloweesRequestBody struct {
	// Artist's PastelID
	Pastelid *string `form:"pastelid,omitempty" json:"pastelid,omitempty" xml:"pastelid,omitempty"`
	// limit for paginated list
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// offset for paginated list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// GetFriendsRequestBody is the type of the "userdatas" service "getFriends"
// endpoint HTTP request body.
type GetFriendsRequestBody struct {
	// Artist's PastelID
	Pastelid *string `form:"pastelid,omitempty" json:"pastelid,omitempty" xml:"pastelid,omitempty"`
	// limit for paginated list
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// offset for paginated list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// SetUserLikeArtRequestBody is the type of the "userdatas" service
// "setUserLikeArt" endpoint HTTP request body.
type SetUserLikeArtRequestBody struct {
	// User's PastelID
	UserPastelID *string `form:"user_pastel_id,omitempty" json:"user_pastel_id,omitempty" xml:"user_pastel_id,omitempty"`
	// Art's PastelID
	ArtPastelID *string `form:"art_pastel_id,omitempty" json:"art_pastel_id,omitempty" xml:"art_pastel_id,omitempty"`
}

// GetUsersLikeArtRequestBody is the type of the "userdatas" service
// "getUsersLikeArt" endpoint HTTP request body.
type GetUsersLikeArtRequestBody struct {
	// art id that we want to get like data
	ArtID *string `form:"art_id,omitempty" json:"art_id,omitempty" xml:"art_id,omitempty"`
	// limit for paginated list
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// offset for paginated list
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// CreateUserdataResponseBody is the type of the "userdatas" service
// "createUserdata" endpoint HTTP response body.
type CreateUserdataResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
	// Error detail on realname
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Error detail on facebook_link
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Error detail on twitter_link
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Error detail on native_currency
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Error detail on location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Error detail on primary_language
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// Error detail on categories
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Error detail on biography
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Error detail on avatar
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Error detail on cover photo
	CoverPhoto *string `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Metadata Layer process metric response
	Data []byte `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UpdateUserdataResponseBody is the type of the "userdatas" service
// "updateUserdata" endpoint HTTP response body.
type UpdateUserdataResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
	// Error detail on realname
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Error detail on facebook_link
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Error detail on twitter_link
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Error detail on native_currency
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Error detail on location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Error detail on primary_language
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// Error detail on categories
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Error detail on biography
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Error detail on avatar
	AvatarImage *string `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Error detail on cover photo
	CoverPhoto *string `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Metadata Layer process metric response
	Data []byte `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetUserdataResponseBody is the type of the "userdatas" service "getUserdata"
// endpoint HTTP response body.
type GetUserdataResponseBody struct {
	// Real name of the user
	RealName *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// Facebook link of the user
	FacebookLink *string `form:"facebook_link,omitempty" json:"facebook_link,omitempty" xml:"facebook_link,omitempty"`
	// Twitter link of the user
	TwitterLink *string `form:"twitter_link,omitempty" json:"twitter_link,omitempty" xml:"twitter_link,omitempty"`
	// Native currency of user in ISO 4217 Alphabetic Code
	NativeCurrency *string `form:"native_currency,omitempty" json:"native_currency,omitempty" xml:"native_currency,omitempty"`
	// Location of the user
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Primary language of the user, follow ISO 639-2 standard
	PrimaryLanguage *string `form:"primary_language,omitempty" json:"primary_language,omitempty" xml:"primary_language,omitempty"`
	// The categories of user's work, separate by ,
	Categories *string `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	// Biography of the user
	Biography *string `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	// Avatar image of the user
	AvatarImage *UserImageUploadPayloadResponseBody `form:"avatar_image,omitempty" json:"avatar_image,omitempty" xml:"avatar_image,omitempty"`
	// Cover photo of the user
	CoverPhoto *UserImageUploadPayloadResponseBody `form:"cover_photo,omitempty" json:"cover_photo,omitempty" xml:"cover_photo,omitempty"`
	// Artist's PastelID
	ArtistPastelID string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Passphrase of the artist's PastelID
	ArtistPastelIDPassphrase string `form:"artist_pastelid_passphrase" json:"artist_pastelid_passphrase" xml:"artist_pastelid_passphrase"`
}

// SetUserFollowRelationResponseBody is the type of the "userdatas" service
// "setUserFollowRelation" endpoint HTTP response body.
type SetUserFollowRelationResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
}

// GetFollowersResponseBody is the type of the "userdatas" service
// "getFollowers" endpoint HTTP response body.
type GetFollowersResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
	// total number of users in relationship with this user
	TotalCount int `form:"total_count" json:"total_count" xml:"total_count"`
	// Artist's PastelID
	Result []*UserRelationshipInfoResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// GetFolloweesResponseBody is the type of the "userdatas" service
// "getFollowees" endpoint HTTP response body.
type GetFolloweesResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
	// total number of users in relationship with this user
	TotalCount int `form:"total_count" json:"total_count" xml:"total_count"`
	// Artist's PastelID
	Result []*UserRelationshipInfoResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// GetFriendsResponseBody is the type of the "userdatas" service "getFriends"
// endpoint HTTP response body.
type GetFriendsResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
	// total number of users in relationship with this user
	TotalCount int `form:"total_count" json:"total_count" xml:"total_count"`
	// Artist's PastelID
	Result []*UserRelationshipInfoResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// SetUserLikeArtResponseBody is the type of the "userdatas" service
// "setUserLikeArt" endpoint HTTP response body.
type SetUserLikeArtResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
}

// GetUsersLikeArtResponseBody is the type of the "userdatas" service
// "getUsersLikeArt" endpoint HTTP response body.
type GetUsersLikeArtResponseBody struct {
	// Result of the request is success or not
	ResponseCode int `form:"response_code" json:"response_code" xml:"response_code"`
	// The detail of why result is success/fail, depend on response_code
	Detail string `form:"detail" json:"detail" xml:"detail"`
	// total number of users in relationship with this user
	TotalCount int `form:"total_count" json:"total_count" xml:"total_count"`
	// Artist's PastelID
	Result []*UserRelationshipInfoResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// CreateUserdataBadRequestResponseBody is the type of the "userdatas" service
// "createUserdata" endpoint HTTP response body for the "BadRequest" error.
type CreateUserdataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUserdataInternalServerErrorResponseBody is the type of the "userdatas"
// service "createUserdata" endpoint HTTP response body for the
// "InternalServerError" error.
type CreateUserdataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUserdataBadRequestResponseBody is the type of the "userdatas" service
// "updateUserdata" endpoint HTTP response body for the "BadRequest" error.
type UpdateUserdataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUserdataInternalServerErrorResponseBody is the type of the "userdatas"
// service "updateUserdata" endpoint HTTP response body for the
// "InternalServerError" error.
type UpdateUserdataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserdataBadRequestResponseBody is the type of the "userdatas" service
// "getUserdata" endpoint HTTP response body for the "BadRequest" error.
type GetUserdataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserdataNotFoundResponseBody is the type of the "userdatas" service
// "getUserdata" endpoint HTTP response body for the "NotFound" error.
type GetUserdataNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserdataInternalServerErrorResponseBody is the type of the "userdatas"
// service "getUserdata" endpoint HTTP response body for the
// "InternalServerError" error.
type GetUserdataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetUserFollowRelationBadRequestResponseBody is the type of the "userdatas"
// service "setUserFollowRelation" endpoint HTTP response body for the
// "BadRequest" error.
type SetUserFollowRelationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetUserFollowRelationInternalServerErrorResponseBody is the type of the
// "userdatas" service "setUserFollowRelation" endpoint HTTP response body for
// the "InternalServerError" error.
type SetUserFollowRelationInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetFollowersBadRequestResponseBody is the type of the "userdatas" service
// "getFollowers" endpoint HTTP response body for the "BadRequest" error.
type GetFollowersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetFollowersInternalServerErrorResponseBody is the type of the "userdatas"
// service "getFollowers" endpoint HTTP response body for the
// "InternalServerError" error.
type GetFollowersInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetFolloweesBadRequestResponseBody is the type of the "userdatas" service
// "getFollowees" endpoint HTTP response body for the "BadRequest" error.
type GetFolloweesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetFolloweesInternalServerErrorResponseBody is the type of the "userdatas"
// service "getFollowees" endpoint HTTP response body for the
// "InternalServerError" error.
type GetFolloweesInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetFriendsBadRequestResponseBody is the type of the "userdatas" service
// "getFriends" endpoint HTTP response body for the "BadRequest" error.
type GetFriendsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetFriendsInternalServerErrorResponseBody is the type of the "userdatas"
// service "getFriends" endpoint HTTP response body for the
// "InternalServerError" error.
type GetFriendsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetUserLikeArtBadRequestResponseBody is the type of the "userdatas" service
// "setUserLikeArt" endpoint HTTP response body for the "BadRequest" error.
type SetUserLikeArtBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SetUserLikeArtInternalServerErrorResponseBody is the type of the "userdatas"
// service "setUserLikeArt" endpoint HTTP response body for the
// "InternalServerError" error.
type SetUserLikeArtInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersLikeArtBadRequestResponseBody is the type of the "userdatas" service
// "getUsersLikeArt" endpoint HTTP response body for the "BadRequest" error.
type GetUsersLikeArtBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersLikeArtInternalServerErrorResponseBody is the type of the
// "userdatas" service "getUsersLikeArt" endpoint HTTP response body for the
// "InternalServerError" error.
type GetUsersLikeArtInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserImageUploadPayloadResponseBody is used to define fields on response body
// types.
type UserImageUploadPayloadResponseBody struct {
	// File to upload (byte array of the file content)
	Content []byte `form:"content" json:"content" xml:"content"`
	// File name of the user image
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
}

// UserRelationshipInfoResponseBody is used to define fields on response body
// types.
type UserRelationshipInfoResponseBody struct {
	// Artist's PastelID
	Pastelid string `form:"pastelid" json:"pastelid" xml:"pastelid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Real name of the user
	Realname *string `form:"realname,omitempty" json:"realname,omitempty" xml:"realname,omitempty"`
	// number of users follow this user
	FollowersCount int `form:"followers_count" json:"followers_count" xml:"followers_count"`
	// 40x40 avatar thumbnail
	AvatarThumbnail []byte `form:"avatar_thumbnail,omitempty" json:"avatar_thumbnail,omitempty" xml:"avatar_thumbnail,omitempty"`
}

// UserImageUploadPayloadRequestBody is used to define fields on request body
// types.
type UserImageUploadPayloadRequestBody struct {
	// File to upload (byte array of the file content)
	Content []byte `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// File name of the user image
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
}

// NewCreateUserdataResponseBody builds the HTTP response body from the result
// of the "createUserdata" endpoint of the "userdatas" service.
func NewCreateUserdataResponseBody(res *userdatas.UserdataProcessResult) *CreateUserdataResponseBody {
	body := &CreateUserdataResponseBody{
		ResponseCode:    res.ResponseCode,
		Detail:          res.Detail,
		RealName:        res.RealName,
		FacebookLink:    res.FacebookLink,
		TwitterLink:     res.TwitterLink,
		NativeCurrency:  res.NativeCurrency,
		Location:        res.Location,
		PrimaryLanguage: res.PrimaryLanguage,
		Categories:      res.Categories,
		Biography:       res.Biography,
		AvatarImage:     res.AvatarImage,
		CoverPhoto:      res.CoverPhoto,
		Data:            res.Data,
	}
	return body
}

// NewUpdateUserdataResponseBody builds the HTTP response body from the result
// of the "updateUserdata" endpoint of the "userdatas" service.
func NewUpdateUserdataResponseBody(res *userdatas.UserdataProcessResult) *UpdateUserdataResponseBody {
	body := &UpdateUserdataResponseBody{
		ResponseCode:    res.ResponseCode,
		Detail:          res.Detail,
		RealName:        res.RealName,
		FacebookLink:    res.FacebookLink,
		TwitterLink:     res.TwitterLink,
		NativeCurrency:  res.NativeCurrency,
		Location:        res.Location,
		PrimaryLanguage: res.PrimaryLanguage,
		Categories:      res.Categories,
		Biography:       res.Biography,
		AvatarImage:     res.AvatarImage,
		CoverPhoto:      res.CoverPhoto,
		Data:            res.Data,
	}
	return body
}

// NewGetUserdataResponseBody builds the HTTP response body from the result of
// the "getUserdata" endpoint of the "userdatas" service.
func NewGetUserdataResponseBody(res *userdatas.UserSpecifiedData) *GetUserdataResponseBody {
	body := &GetUserdataResponseBody{
		RealName:                 res.RealName,
		FacebookLink:             res.FacebookLink,
		TwitterLink:              res.TwitterLink,
		NativeCurrency:           res.NativeCurrency,
		Location:                 res.Location,
		PrimaryLanguage:          res.PrimaryLanguage,
		Categories:               res.Categories,
		Biography:                res.Biography,
		ArtistPastelID:           res.ArtistPastelID,
		ArtistPastelIDPassphrase: res.ArtistPastelIDPassphrase,
	}
	if res.AvatarImage != nil {
		body.AvatarImage = marshalUserdatasUserImageUploadPayloadToUserImageUploadPayloadResponseBody(res.AvatarImage)
	}
	if res.CoverPhoto != nil {
		body.CoverPhoto = marshalUserdatasUserImageUploadPayloadToUserImageUploadPayloadResponseBody(res.CoverPhoto)
	}
	return body
}

// NewSetUserFollowRelationResponseBody builds the HTTP response body from the
// result of the "setUserFollowRelation" endpoint of the "userdatas" service.
func NewSetUserFollowRelationResponseBody(res *userdatas.SetUserFollowRelationResult) *SetUserFollowRelationResponseBody {
	body := &SetUserFollowRelationResponseBody{
		ResponseCode: res.ResponseCode,
		Detail:       res.Detail,
	}
	return body
}

// NewGetFollowersResponseBody builds the HTTP response body from the result of
// the "getFollowers" endpoint of the "userdatas" service.
func NewGetFollowersResponseBody(res *userdatas.GetFollowersResult) *GetFollowersResponseBody {
	body := &GetFollowersResponseBody{
		ResponseCode: res.ResponseCode,
		Detail:       res.Detail,
		TotalCount:   res.TotalCount,
	}
	if res.Result != nil {
		body.Result = make([]*UserRelationshipInfoResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalUserdatasUserRelationshipInfoToUserRelationshipInfoResponseBody(val)
		}
	}
	return body
}

// NewGetFolloweesResponseBody builds the HTTP response body from the result of
// the "getFollowees" endpoint of the "userdatas" service.
func NewGetFolloweesResponseBody(res *userdatas.GetFolloweesResult) *GetFolloweesResponseBody {
	body := &GetFolloweesResponseBody{
		ResponseCode: res.ResponseCode,
		Detail:       res.Detail,
		TotalCount:   res.TotalCount,
	}
	if res.Result != nil {
		body.Result = make([]*UserRelationshipInfoResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalUserdatasUserRelationshipInfoToUserRelationshipInfoResponseBody(val)
		}
	}
	return body
}

// NewGetFriendsResponseBody builds the HTTP response body from the result of
// the "getFriends" endpoint of the "userdatas" service.
func NewGetFriendsResponseBody(res *userdatas.GetFriendsResult) *GetFriendsResponseBody {
	body := &GetFriendsResponseBody{
		ResponseCode: res.ResponseCode,
		Detail:       res.Detail,
		TotalCount:   res.TotalCount,
	}
	if res.Result != nil {
		body.Result = make([]*UserRelationshipInfoResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalUserdatasUserRelationshipInfoToUserRelationshipInfoResponseBody(val)
		}
	}
	return body
}

// NewSetUserLikeArtResponseBody builds the HTTP response body from the result
// of the "setUserLikeArt" endpoint of the "userdatas" service.
func NewSetUserLikeArtResponseBody(res *userdatas.SetUserLikeArtResult) *SetUserLikeArtResponseBody {
	body := &SetUserLikeArtResponseBody{
		ResponseCode: res.ResponseCode,
		Detail:       res.Detail,
	}
	return body
}

// NewGetUsersLikeArtResponseBody builds the HTTP response body from the result
// of the "getUsersLikeArt" endpoint of the "userdatas" service.
func NewGetUsersLikeArtResponseBody(res *userdatas.GetUsersLikeArtResult) *GetUsersLikeArtResponseBody {
	body := &GetUsersLikeArtResponseBody{
		ResponseCode: res.ResponseCode,
		Detail:       res.Detail,
		TotalCount:   res.TotalCount,
	}
	if res.Result != nil {
		body.Result = make([]*UserRelationshipInfoResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalUserdatasUserRelationshipInfoToUserRelationshipInfoResponseBody(val)
		}
	}
	return body
}

// NewCreateUserdataBadRequestResponseBody builds the HTTP response body from
// the result of the "createUserdata" endpoint of the "userdatas" service.
func NewCreateUserdataBadRequestResponseBody(res *goa.ServiceError) *CreateUserdataBadRequestResponseBody {
	body := &CreateUserdataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserdataInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "createUserdata" endpoint of the "userdatas"
// service.
func NewCreateUserdataInternalServerErrorResponseBody(res *goa.ServiceError) *CreateUserdataInternalServerErrorResponseBody {
	body := &CreateUserdataInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUserdataBadRequestResponseBody builds the HTTP response body from
// the result of the "updateUserdata" endpoint of the "userdatas" service.
func NewUpdateUserdataBadRequestResponseBody(res *goa.ServiceError) *UpdateUserdataBadRequestResponseBody {
	body := &UpdateUserdataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUserdataInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "updateUserdata" endpoint of the "userdatas"
// service.
func NewUpdateUserdataInternalServerErrorResponseBody(res *goa.ServiceError) *UpdateUserdataInternalServerErrorResponseBody {
	body := &UpdateUserdataInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserdataBadRequestResponseBody builds the HTTP response body from the
// result of the "getUserdata" endpoint of the "userdatas" service.
func NewGetUserdataBadRequestResponseBody(res *goa.ServiceError) *GetUserdataBadRequestResponseBody {
	body := &GetUserdataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserdataNotFoundResponseBody builds the HTTP response body from the
// result of the "getUserdata" endpoint of the "userdatas" service.
func NewGetUserdataNotFoundResponseBody(res *goa.ServiceError) *GetUserdataNotFoundResponseBody {
	body := &GetUserdataNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserdataInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "getUserdata" endpoint of the "userdatas" service.
func NewGetUserdataInternalServerErrorResponseBody(res *goa.ServiceError) *GetUserdataInternalServerErrorResponseBody {
	body := &GetUserdataInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetUserFollowRelationBadRequestResponseBody builds the HTTP response body
// from the result of the "setUserFollowRelation" endpoint of the "userdatas"
// service.
func NewSetUserFollowRelationBadRequestResponseBody(res *goa.ServiceError) *SetUserFollowRelationBadRequestResponseBody {
	body := &SetUserFollowRelationBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetUserFollowRelationInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "setUserFollowRelation" endpoint of the
// "userdatas" service.
func NewSetUserFollowRelationInternalServerErrorResponseBody(res *goa.ServiceError) *SetUserFollowRelationInternalServerErrorResponseBody {
	body := &SetUserFollowRelationInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetFollowersBadRequestResponseBody builds the HTTP response body from the
// result of the "getFollowers" endpoint of the "userdatas" service.
func NewGetFollowersBadRequestResponseBody(res *goa.ServiceError) *GetFollowersBadRequestResponseBody {
	body := &GetFollowersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetFollowersInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "getFollowers" endpoint of the "userdatas" service.
func NewGetFollowersInternalServerErrorResponseBody(res *goa.ServiceError) *GetFollowersInternalServerErrorResponseBody {
	body := &GetFollowersInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetFolloweesBadRequestResponseBody builds the HTTP response body from the
// result of the "getFollowees" endpoint of the "userdatas" service.
func NewGetFolloweesBadRequestResponseBody(res *goa.ServiceError) *GetFolloweesBadRequestResponseBody {
	body := &GetFolloweesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetFolloweesInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "getFollowees" endpoint of the "userdatas" service.
func NewGetFolloweesInternalServerErrorResponseBody(res *goa.ServiceError) *GetFolloweesInternalServerErrorResponseBody {
	body := &GetFolloweesInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetFriendsBadRequestResponseBody builds the HTTP response body from the
// result of the "getFriends" endpoint of the "userdatas" service.
func NewGetFriendsBadRequestResponseBody(res *goa.ServiceError) *GetFriendsBadRequestResponseBody {
	body := &GetFriendsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetFriendsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "getFriends" endpoint of the "userdatas" service.
func NewGetFriendsInternalServerErrorResponseBody(res *goa.ServiceError) *GetFriendsInternalServerErrorResponseBody {
	body := &GetFriendsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetUserLikeArtBadRequestResponseBody builds the HTTP response body from
// the result of the "setUserLikeArt" endpoint of the "userdatas" service.
func NewSetUserLikeArtBadRequestResponseBody(res *goa.ServiceError) *SetUserLikeArtBadRequestResponseBody {
	body := &SetUserLikeArtBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSetUserLikeArtInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "setUserLikeArt" endpoint of the "userdatas"
// service.
func NewSetUserLikeArtInternalServerErrorResponseBody(res *goa.ServiceError) *SetUserLikeArtInternalServerErrorResponseBody {
	body := &SetUserLikeArtInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersLikeArtBadRequestResponseBody builds the HTTP response body from
// the result of the "getUsersLikeArt" endpoint of the "userdatas" service.
func NewGetUsersLikeArtBadRequestResponseBody(res *goa.ServiceError) *GetUsersLikeArtBadRequestResponseBody {
	body := &GetUsersLikeArtBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersLikeArtInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getUsersLikeArt" endpoint of the "userdatas"
// service.
func NewGetUsersLikeArtInternalServerErrorResponseBody(res *goa.ServiceError) *GetUsersLikeArtInternalServerErrorResponseBody {
	body := &GetUsersLikeArtInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserdataPayload builds a userdatas service createUserdata endpoint
// payload.
func NewCreateUserdataPayload(body *CreateUserdataRequestBody) *userdatas.CreateUserdataPayload {
	v := &userdatas.CreateUserdataPayload{
		RealName:                 body.RealName,
		FacebookLink:             body.FacebookLink,
		TwitterLink:              body.TwitterLink,
		NativeCurrency:           body.NativeCurrency,
		Location:                 body.Location,
		PrimaryLanguage:          body.PrimaryLanguage,
		Categories:               body.Categories,
		Biography:                body.Biography,
		ArtistPastelID:           *body.ArtistPastelID,
		ArtistPastelIDPassphrase: *body.ArtistPastelIDPassphrase,
	}
	if body.AvatarImage != nil {
		v.AvatarImage = unmarshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.AvatarImage)
	}
	if body.CoverPhoto != nil {
		v.CoverPhoto = unmarshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.CoverPhoto)
	}

	return v
}

// NewUpdateUserdataPayload builds a userdatas service updateUserdata endpoint
// payload.
func NewUpdateUserdataPayload(body *UpdateUserdataRequestBody) *userdatas.UpdateUserdataPayload {
	v := &userdatas.UpdateUserdataPayload{
		RealName:                 body.RealName,
		FacebookLink:             body.FacebookLink,
		TwitterLink:              body.TwitterLink,
		NativeCurrency:           body.NativeCurrency,
		Location:                 body.Location,
		PrimaryLanguage:          body.PrimaryLanguage,
		Categories:               body.Categories,
		Biography:                body.Biography,
		ArtistPastelID:           *body.ArtistPastelID,
		ArtistPastelIDPassphrase: *body.ArtistPastelIDPassphrase,
	}
	if body.AvatarImage != nil {
		v.AvatarImage = unmarshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.AvatarImage)
	}
	if body.CoverPhoto != nil {
		v.CoverPhoto = unmarshalUserImageUploadPayloadRequestBodyToUserdatasUserImageUploadPayload(body.CoverPhoto)
	}

	return v
}

// NewGetUserdataPayload builds a userdatas service getUserdata endpoint
// payload.
func NewGetUserdataPayload(pastelid string) *userdatas.GetUserdataPayload {
	v := &userdatas.GetUserdataPayload{}
	v.Pastelid = pastelid

	return v
}

// NewSetUserFollowRelationPayload builds a userdatas service
// setUserFollowRelation endpoint payload.
func NewSetUserFollowRelationPayload(body *SetUserFollowRelationRequestBody) *userdatas.SetUserFollowRelationPayload {
	v := &userdatas.SetUserFollowRelationPayload{
		FollowerPastelID: *body.FollowerPastelID,
		FolloweePastelID: *body.FolloweePastelID,
	}

	return v
}

// NewGetFollowersPayload builds a userdatas service getFollowers endpoint
// payload.
func NewGetFollowersPayload(body *GetFollowersRequestBody) *userdatas.GetFollowersPayload {
	v := &userdatas.GetFollowersPayload{
		Pastelid: *body.Pastelid,
		Limit:    body.Limit,
		Offset:   body.Offset,
	}

	return v
}

// NewGetFolloweesPayload builds a userdatas service getFollowees endpoint
// payload.
func NewGetFolloweesPayload(body *GetFolloweesRequestBody) *userdatas.GetFolloweesPayload {
	v := &userdatas.GetFolloweesPayload{
		Pastelid: *body.Pastelid,
		Limit:    body.Limit,
		Offset:   body.Offset,
	}

	return v
}

// NewGetFriendsPayload builds a userdatas service getFriends endpoint payload.
func NewGetFriendsPayload(body *GetFriendsRequestBody) *userdatas.GetFriendsPayload {
	v := &userdatas.GetFriendsPayload{
		Pastelid: *body.Pastelid,
		Limit:    body.Limit,
		Offset:   body.Offset,
	}

	return v
}

// NewSetUserLikeArtPayload builds a userdatas service setUserLikeArt endpoint
// payload.
func NewSetUserLikeArtPayload(body *SetUserLikeArtRequestBody) *userdatas.SetUserLikeArtPayload {
	v := &userdatas.SetUserLikeArtPayload{
		UserPastelID: *body.UserPastelID,
		ArtPastelID:  *body.ArtPastelID,
	}

	return v
}

// NewGetUsersLikeArtPayload builds a userdatas service getUsersLikeArt
// endpoint payload.
func NewGetUsersLikeArtPayload(body *GetUsersLikeArtRequestBody) *userdatas.GetUsersLikeArtPayload {
	v := &userdatas.GetUsersLikeArtPayload{
		ArtID:  *body.ArtID,
		Limit:  body.Limit,
		Offset: body.Offset,
	}

	return v
}

// ValidateCreateUserdataRequestBody runs the validations defined on
// CreateUserdataRequestBody
func ValidateCreateUserdataRequestBody(body *CreateUserdataRequestBody) (err error) {
	if body.ArtistPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid", "body"))
	}
	if body.ArtistPastelIDPassphrase == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid_passphrase", "body"))
	}
	if body.RealName != nil {
		if utf8.RuneCountInString(*body.RealName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.RealName, utf8.RuneCountInString(*body.RealName), 256, false))
		}
	}
	if body.FacebookLink != nil {
		if utf8.RuneCountInString(*body.FacebookLink) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 128, false))
		}
	}
	if body.TwitterLink != nil {
		if utf8.RuneCountInString(*body.TwitterLink) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 128, false))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, true))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, false))
		}
	}
	if body.Location != nil {
		if utf8.RuneCountInString(*body.Location) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
		}
	}
	if body.PrimaryLanguage != nil {
		if utf8.RuneCountInString(*body.PrimaryLanguage) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 30, false))
		}
	}
	if body.Biography != nil {
		if utf8.RuneCountInString(*body.Biography) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 1024, false))
		}
	}
	if body.AvatarImage != nil {
		if err2 := ValidateUserImageUploadPayloadRequestBody(body.AvatarImage); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CoverPhoto != nil {
		if err2 := ValidateUserImageUploadPayloadRequestBody(body.CoverPhoto); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ArtistPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", *body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, true))
		}
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, false))
		}
	}
	return
}

// ValidateUpdateUserdataRequestBody runs the validations defined on
// UpdateUserdataRequestBody
func ValidateUpdateUserdataRequestBody(body *UpdateUserdataRequestBody) (err error) {
	if body.ArtistPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid", "body"))
	}
	if body.ArtistPastelIDPassphrase == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid_passphrase", "body"))
	}
	if body.RealName != nil {
		if utf8.RuneCountInString(*body.RealName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.realname", *body.RealName, utf8.RuneCountInString(*body.RealName), 256, false))
		}
	}
	if body.FacebookLink != nil {
		if utf8.RuneCountInString(*body.FacebookLink) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.facebook_link", *body.FacebookLink, utf8.RuneCountInString(*body.FacebookLink), 128, false))
		}
	}
	if body.TwitterLink != nil {
		if utf8.RuneCountInString(*body.TwitterLink) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.twitter_link", *body.TwitterLink, utf8.RuneCountInString(*body.TwitterLink), 128, false))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, true))
		}
	}
	if body.NativeCurrency != nil {
		if utf8.RuneCountInString(*body.NativeCurrency) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.native_currency", *body.NativeCurrency, utf8.RuneCountInString(*body.NativeCurrency), 3, false))
		}
	}
	if body.Location != nil {
		if utf8.RuneCountInString(*body.Location) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.location", *body.Location, utf8.RuneCountInString(*body.Location), 256, false))
		}
	}
	if body.PrimaryLanguage != nil {
		if utf8.RuneCountInString(*body.PrimaryLanguage) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.primary_language", *body.PrimaryLanguage, utf8.RuneCountInString(*body.PrimaryLanguage), 30, false))
		}
	}
	if body.Biography != nil {
		if utf8.RuneCountInString(*body.Biography) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.biography", *body.Biography, utf8.RuneCountInString(*body.Biography), 1024, false))
		}
	}
	if body.AvatarImage != nil {
		if err2 := ValidateUserImageUploadPayloadRequestBody(body.AvatarImage); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CoverPhoto != nil {
		if err2 := ValidateUserImageUploadPayloadRequestBody(body.CoverPhoto); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ArtistPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", *body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, true))
		}
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, false))
		}
	}
	return
}

// ValidateSetUserFollowRelationRequestBody runs the validations defined on
// SetUserFollowRelationRequestBody
func ValidateSetUserFollowRelationRequestBody(body *SetUserFollowRelationRequestBody) (err error) {
	if body.FollowerPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("follower_pastel_id", "body"))
	}
	if body.FolloweePastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("followee_pastel_id", "body"))
	}
	if body.FollowerPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.follower_pastel_id", *body.FollowerPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.FollowerPastelID != nil {
		if utf8.RuneCountInString(*body.FollowerPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.follower_pastel_id", *body.FollowerPastelID, utf8.RuneCountInString(*body.FollowerPastelID), 86, true))
		}
	}
	if body.FollowerPastelID != nil {
		if utf8.RuneCountInString(*body.FollowerPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.follower_pastel_id", *body.FollowerPastelID, utf8.RuneCountInString(*body.FollowerPastelID), 86, false))
		}
	}
	if body.FolloweePastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.followee_pastel_id", *body.FolloweePastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.FolloweePastelID != nil {
		if utf8.RuneCountInString(*body.FolloweePastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.followee_pastel_id", *body.FolloweePastelID, utf8.RuneCountInString(*body.FolloweePastelID), 86, true))
		}
	}
	if body.FolloweePastelID != nil {
		if utf8.RuneCountInString(*body.FolloweePastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.followee_pastel_id", *body.FolloweePastelID, utf8.RuneCountInString(*body.FolloweePastelID), 86, false))
		}
	}
	return
}

// ValidateGetFollowersRequestBody runs the validations defined on
// GetFollowersRequestBody
func ValidateGetFollowersRequestBody(body *GetFollowersRequestBody) (err error) {
	if body.Pastelid == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pastelid", "body"))
	}
	if body.Pastelid != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastelid", *body.Pastelid, "^[a-zA-Z0-9]+$"))
	}
	if body.Pastelid != nil {
		if utf8.RuneCountInString(*body.Pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", *body.Pastelid, utf8.RuneCountInString(*body.Pastelid), 86, true))
		}
	}
	if body.Pastelid != nil {
		if utf8.RuneCountInString(*body.Pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", *body.Pastelid, utf8.RuneCountInString(*body.Pastelid), 86, false))
		}
	}
	return
}

// ValidateGetFolloweesRequestBody runs the validations defined on
// GetFolloweesRequestBody
func ValidateGetFolloweesRequestBody(body *GetFolloweesRequestBody) (err error) {
	if body.Pastelid == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pastelid", "body"))
	}
	if body.Pastelid != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastelid", *body.Pastelid, "^[a-zA-Z0-9]+$"))
	}
	if body.Pastelid != nil {
		if utf8.RuneCountInString(*body.Pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", *body.Pastelid, utf8.RuneCountInString(*body.Pastelid), 86, true))
		}
	}
	if body.Pastelid != nil {
		if utf8.RuneCountInString(*body.Pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", *body.Pastelid, utf8.RuneCountInString(*body.Pastelid), 86, false))
		}
	}
	return
}

// ValidateGetFriendsRequestBody runs the validations defined on
// GetFriendsRequestBody
func ValidateGetFriendsRequestBody(body *GetFriendsRequestBody) (err error) {
	if body.Pastelid == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pastelid", "body"))
	}
	if body.Pastelid != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastelid", *body.Pastelid, "^[a-zA-Z0-9]+$"))
	}
	if body.Pastelid != nil {
		if utf8.RuneCountInString(*body.Pastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", *body.Pastelid, utf8.RuneCountInString(*body.Pastelid), 86, true))
		}
	}
	if body.Pastelid != nil {
		if utf8.RuneCountInString(*body.Pastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastelid", *body.Pastelid, utf8.RuneCountInString(*body.Pastelid), 86, false))
		}
	}
	return
}

// ValidateSetUserLikeArtRequestBody runs the validations defined on
// SetUserLikeArtRequestBody
func ValidateSetUserLikeArtRequestBody(body *SetUserLikeArtRequestBody) (err error) {
	if body.UserPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_pastel_id", "body"))
	}
	if body.ArtPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("art_pastel_id", "body"))
	}
	if body.UserPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.user_pastel_id", *body.UserPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.UserPastelID != nil {
		if utf8.RuneCountInString(*body.UserPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_pastel_id", *body.UserPastelID, utf8.RuneCountInString(*body.UserPastelID), 86, true))
		}
	}
	if body.UserPastelID != nil {
		if utf8.RuneCountInString(*body.UserPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_pastel_id", *body.UserPastelID, utf8.RuneCountInString(*body.UserPastelID), 86, false))
		}
	}
	if body.ArtPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.art_pastel_id", *body.ArtPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtPastelID != nil {
		if utf8.RuneCountInString(*body.ArtPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_pastel_id", *body.ArtPastelID, utf8.RuneCountInString(*body.ArtPastelID), 86, true))
		}
	}
	if body.ArtPastelID != nil {
		if utf8.RuneCountInString(*body.ArtPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_pastel_id", *body.ArtPastelID, utf8.RuneCountInString(*body.ArtPastelID), 86, false))
		}
	}
	return
}

// ValidateGetUsersLikeArtRequestBody runs the validations defined on
// GetUsersLikeArtRequestBody
func ValidateGetUsersLikeArtRequestBody(body *GetUsersLikeArtRequestBody) (err error) {
	if body.ArtID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("art_id", "body"))
	}
	if body.ArtID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.art_id", *body.ArtID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtID != nil {
		if utf8.RuneCountInString(*body.ArtID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_id", *body.ArtID, utf8.RuneCountInString(*body.ArtID), 86, true))
		}
	}
	if body.ArtID != nil {
		if utf8.RuneCountInString(*body.ArtID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.art_id", *body.ArtID, utf8.RuneCountInString(*body.ArtID), 86, false))
		}
	}
	return
}

// ValidateUserImageUploadPayloadRequestBody runs the validations defined on
// UserImageUploadPayloadRequestBody
func ValidateUserImageUploadPayloadRequestBody(body *UserImageUploadPayloadRequestBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Filename != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.filename", *body.Filename, "^.*\\.(png|PNG|jpeg|JPEG|jpg|JPG)$"))
	}
	return
}
