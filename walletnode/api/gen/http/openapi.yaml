swagger: "2.0"
info:
  title: WalletNode REST API
  version: "1.0"
host: localhost:8080
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /artworks/{txid}:
    get:
      tags:
      - artworks
      summary: Returns the detail of Artwork
      description: Gets the Artwork detail
      operationId: artworks#artworkGet
      parameters:
      - name: txid
        in: path
        description: txid
        required: true
        type: string
        maxLength: 64
        minLength: 64
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ArtworksArtworkGetResponseBody'
            required:
            - rareness_score
            - nsfw_score
            - title
            - description
            - artist_name
            - copies
            - artist_pastelid
            - txid
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/ArtworksArtworkGetBadRequestResponseBody'
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/ArtworksArtworkGetNotFoundResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksArtworkGetInternalServerErrorResponseBody'
      schemes:
      - http
  /artworks/download:
    get:
      tags:
      - artworks
      summary: Downloads artwork
      description: Download registered artwork.
      operationId: artworks#download
      parameters:
      - name: txid
        in: query
        description: Art Registration Ticket transaction ID
        required: true
        type: string
        maxLength: 64
        minLength: 64
      - name: pid
        in: query
        description: Owner's PastelID
        required: true
        type: string
        maxLength: 86
        minLength: 86
        pattern: ^[a-zA-Z0-9]+$
      - name: Authorization
        in: header
        description: Passphrase of the owner's PastelID
        required: true
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ArtworksDownloadResponseBody'
            required:
            - file
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/ArtworksDownloadNotFoundResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksDownloadInternalServerErrorResponseBody'
      schemes:
      - http
      security:
      - api_key_header_Authorization: []
  /artworks/register:
    get:
      tags:
      - artworks
      summary: Returns list of tasks
      description: List of all tasks.
      operationId: artworks#registerTasks
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ArtworksTaskResponseTinyCollection'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTasksInternalServerErrorResponseBody'
      schemes:
      - http
    post:
      tags:
      - artworks
      summary: Registers a new artwork
      description: Runs a new registration process for the new artwork.
      operationId: artworks#register
      parameters:
      - name: RegisterRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/ArtworksRegisterRequestBody'
          required:
          - image_id
          - artist_name
          - name
          - issued_copies
          - artist_pastelid
          - artist_pastelid_passphrase
          - spendable_address
          - maximum_fee
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/ArtworksRegisterResponseBody'
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/ArtworksRegisterBadRequestResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksRegisterInternalServerErrorResponseBody'
      schemes:
      - http
  /artworks/register/{taskId}:
    get:
      tags:
      - artworks
      summary: Find task by ID
      description: Returns a single task.
      operationId: artworks#registerTask
      parameters:
      - name: taskId
        in: path
        description: Task ID of the registration process
        required: true
        type: string
        maxLength: 8
        minLength: 8
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTaskResponseBody'
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTaskNotFoundResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTaskInternalServerErrorResponseBody'
      schemes:
      - http
  /artworks/register/{taskId}/state:
    get:
      tags:
      - artworks
      summary: Streams state by task ID
      description: Streams the state of the registration process.
      operationId: artworks#registerTaskState
      parameters:
      - name: taskId
        in: path
        description: Task ID of the registration process
        required: true
        type: string
        maxLength: 8
        minLength: 8
      responses:
        "101":
          description: Switching Protocols response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTaskStateResponseBody'
            required:
            - date
            - status
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTaskStateNotFoundResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksRegisterTaskStateInternalServerErrorResponseBody'
      schemes:
      - ws
  /artworks/register/upload:
    post:
      tags:
      - artworks
      summary: Uploads an image
      description: Upload the image that is used when registering a new artwork.
      operationId: artworks#uploadImage
      consumes:
      - multipart/form-data
      parameters:
      - name: UploadImageRequestBody
        in: formData
        required: true
        schema:
          $ref: '#/definitions/ArtworksUploadImageRequestBody'
          required:
          - file
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/ArtworksUploadImageResponseBody'
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/ArtworksUploadImageBadRequestResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksUploadImageInternalServerErrorResponseBody'
      schemes:
      - http
  /artworks/search:
    get:
      tags:
      - artworks
      summary: Streams the search result for Artwork
      description: Streams the search result for artwork
      operationId: artworks#artSearch
      parameters:
      - name: artist
        in: query
        description: Artist PastelID or special value; mine
        required: false
        type: string
        maxLength: 256
      - name: limit
        in: query
        description: Number of results to be return
        required: false
        type: integer
        default: 10
        maximum: 200
        minimum: 10
      - name: query
        in: query
        description: Query is search query entered by user
        required: true
        type: string
      - name: artist_name
        in: query
        description: Name of the artist
        required: false
        type: boolean
        default: true
      - name: art_title
        in: query
        description: Title of artwork
        required: false
        type: boolean
        default: true
      - name: series
        in: query
        description: Artwork series name
        required: false
        type: boolean
        default: true
      - name: descr
        in: query
        description: Artist written statement
        required: false
        type: boolean
        default: true
      - name: keyword
        in: query
        description: Keyword that Artist assigns to Artwork
        required: false
        type: boolean
        default: true
      - name: min_copies
        in: query
        description: Minimum number of created copies
        required: false
        type: integer
        maximum: 1000
        minimum: 1
      - name: max_copies
        in: query
        description: Maximum number of created copies
        required: false
        type: integer
        maximum: 1000
        minimum: 1
      - name: min_block
        in: query
        description: Minimum blocknum
        required: false
        type: integer
        default: 1
        minimum: 1
      - name: max_block
        in: query
        description: Maximum blocknum
        required: false
        type: integer
        minimum: 1
      - name: min_rareness_score
        in: query
        description: Minimum pastel rareness score
        required: false
        type: number
        maximum: 1
        minimum: 0
      - name: max_rareness_score
        in: query
        description: Maximum pastel rareness score
        required: false
        type: number
        maximum: 1
        minimum: 0
      - name: min_nsfw_score
        in: query
        description: Minimum nsfw score
        required: false
        type: number
        maximum: 1
        minimum: 0
      - name: max_nsfw_score
        in: query
        description: Maximum nsfw score
        required: false
        type: number
        maximum: 1
        minimum: 0
      - name: min_internet_rareness_score
        in: query
        description: Minimum internet rareness score
        required: false
        type: number
        maximum: 1
        minimum: 0
      - name: max_internet_rareness_score
        in: query
        description: Maximum internet rareness score
        required: false
        type: number
        maximum: 1
        minimum: 0
      responses:
        "101":
          description: Switching Protocols response.
          schema:
            $ref: '#/definitions/ArtworksArtSearchResponseBody'
            required:
            - artwork
            - matches
            - match_index
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/ArtworksArtSearchBadRequestResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ArtworksArtSearchInternalServerErrorResponseBody'
      schemes:
      - ws
  /userdatas/{pastelid}:
    get:
      tags:
      - userdatas
      summary: Returns the detail of Userdata
      description: Gets the Userdata detail
      operationId: userdatas#getUserdata
      parameters:
      - name: pastelid
        in: path
        description: Artist's PastelID
        required: true
        type: string
        maxLength: 86
        minLength: 86
        pattern: ^[a-zA-Z0-9]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserdatasGetUserdataResponseBody'
            required:
            - artist_pastelid
            - artist_pastelid_passphrase
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/UserdatasGetUserdataBadRequestResponseBody'
        "404":
          description: Not Found response.
          schema:
            $ref: '#/definitions/UserdatasGetUserdataNotFoundResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/UserdatasGetUserdataInternalServerErrorResponseBody'
      schemes:
      - http
  /userdatas/create:
    post:
      tags:
      - userdatas
      summary: Create new user data
      description: Create new user data
      operationId: userdatas#createUserdata
      consumes:
      - multipart/form-data
      parameters:
      - name: CreateUserdataRequestBody
        in: formData
        required: true
        schema:
          $ref: '#/definitions/UserdatasCreateUserdataRequestBody'
          required:
          - artist_pastelid
          - artist_pastelid_passphrase
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserdatasCreateUserdataResponseBody'
            required:
            - response_code
            - detail
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/UserdatasCreateUserdataBadRequestResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/UserdatasCreateUserdataInternalServerErrorResponseBody'
      schemes:
      - http
  /userdatas/update:
    post:
      tags:
      - userdatas
      summary: Update user data for an existing user
      description: Update user data for an existing user
      operationId: userdatas#updateUserdata
      consumes:
      - multipart/form-data
      parameters:
      - name: UpdateUserdataRequestBody
        in: formData
        required: true
        schema:
          $ref: '#/definitions/UserdatasUpdateUserdataRequestBody'
          required:
          - artist_pastelid
          - artist_pastelid_passphrase
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UserdatasUpdateUserdataResponseBody'
            required:
            - response_code
            - detail
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/UserdatasUpdateUserdataBadRequestResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/UserdatasUpdateUserdataInternalServerErrorResponseBody'
      schemes:
      - http
definitions:
  ArtworkSummaryResponseBody:
    title: ArtworkSummaryResponseBody
    type: object
    properties:
      artist_name:
        type: string
        description: Name of the artist
        example: Leonardo da Vinci
        maxLength: 256
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_website_url:
        type: string
        description: Artist website URL
        example: https://www.leonardodavinci.net
        maxLength: 256
      copies:
        type: integer
        description: Number of copies
        default: 1
        example: 1
        minimum: 1
        maximum: 1000
      description:
        type: string
        description: Description of the artwork
        example: The Mona Lisa is an oil painting by Italian artist, inventor, and
          writer Leonardo da Vinci. Likely completed in 1506, the piece features a
          portrait of a seated woman set against an imaginary landscape.
        maxLength: 1024
      keywords:
        type: string
        description: Keywords
        example: Renaissance, sfumato, portrait
        maxLength: 256
      series_name:
        type: string
        description: Series name
        example: Famous artist
        maxLength: 256
      thumbnail:
        type: string
        description: Thumbnail image
        example:
        - 81
        - 117
        - 105
        - 97
        - 32
        - 100
        - 111
        - 108
        - 111
        - 114
        - 101
        - 32
        - 102
        - 117
        - 103
        - 105
        - 116
        - 32
        - 97
        - 108
        - 105
        - 113
        - 117
        - 97
        - 109
        - 32
        - 116
        - 111
        - 116
        - 97
        - 109
        - 46
        format: byte
      title:
        type: string
        description: Name of the artwork
        example: Mona Lisa
        maxLength: 256
      txid:
        type: string
        description: txid
        example: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
        minLength: 64
        maxLength: 64
      youtube_url:
        type: string
        description: Artwork creation video youtube URL
        example: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
        maxLength: 128
    description: Artwork response
    example:
      artist_name: Leonardo da Vinci
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_website_url: https://www.leonardodavinci.net
      copies: 1
      description: The Mona Lisa is an oil painting by Italian artist, inventor, and
        writer Leonardo da Vinci. Likely completed in 1506, the piece features a portrait
        of a seated woman set against an imaginary landscape.
      keywords: Renaissance, sfumato, portrait
      series_name: Famous artist
      thumbnail:
      - 65
      - 115
      - 112
      - 101
      - 114
      - 105
      - 111
      - 114
      - 101
      - 115
      - 32
      - 97
      - 109
      - 101
      - 116
      - 32
      - 108
      - 97
      - 98
      - 111
      - 114
      - 105
      - 111
      - 115
      - 97
      - 109
      - 32
      - 108
      - 105
      - 98
      - 101
      - 114
      - 111
      - 32
      - 116
      - 101
      - 110
      - 101
      - 116
      - 117
      - 114
      - 32
      - 118
      - 105
      - 116
      - 97
      - 101
      - 32
      - 98
      - 108
      - 97
      - 110
      - 100
      - 105
      - 116
      - 105
      - 105
      - 115
      - 46
      title: Mona Lisa
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
      youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
    required:
    - title
    - description
    - artist_name
    - copies
    - artist_pastelid
    - txid
  ArtworkTicketResponse:
    title: ArtworkTicketResponse
    type: object
    properties:
      artist_name:
        type: string
        description: Name of the artist
        example: Leonardo da Vinci
        maxLength: 256
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_pastelid_passphrase:
        type: string
        description: Passphrase of the artist's PastelID
        example: qwerasdf1234
      artist_website_url:
        type: string
        description: Artist website URL
        example: https://www.leonardodavinci.net
        maxLength: 256
      description:
        type: string
        description: Description of the artwork
        example: The Mona Lisa is an oil painting by Italian artist, inventor, and
          writer Leonardo da Vinci. Likely completed in 1506, the piece features a
          portrait of a seated woman set against an imaginary landscape.
        maxLength: 1024
      green:
        type: boolean
        description: To donate 2% of the sale proceeds on every sale to TeamTrees
          which plants trees
        default: false
        example: false
      issued_copies:
        type: integer
        description: Number of copies issued
        default: 1
        example: 1
        minimum: 1
        maximum: 1000
      keywords:
        type: string
        description: Keywords
        example: Renaissance, sfumato, portrait
        maxLength: 256
      maximum_fee:
        type: number
        description: Used to find a suitable masternode with a fee equal or less
        default: 1
        example: 100
        minimum: 1e-05
      name:
        type: string
        description: Name of the artwork
        example: Mona Lisa
        maxLength: 256
      royalty:
        type: number
        description: Percentage the artist received in future sales. If set to 0%
          he only get paids for the first sale on each copy of the NFT
        default: 0
        example: 12
        minimum: 0
        maximum: 100
      series_name:
        type: string
        description: Series name
        example: Famous artist
        maxLength: 256
      spendable_address:
        type: string
        description: Spendable address
        example: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        pattern: ^[a-zA-Z0-9]+$
        minLength: 35
        maxLength: 35
      thumbnail_coordinate:
        $ref: '#/definitions/ThumbnailcoordinateResponse'
      youtube_url:
        type: string
        description: Artwork creation video youtube URL
        example: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
        maxLength: 128
    description: Ticket of the registration artwork
    example:
      artist_name: Leonardo da Vinci
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_pastelid_passphrase: qwerasdf1234
      artist_website_url: https://www.leonardodavinci.net
      description: The Mona Lisa is an oil painting by Italian artist, inventor, and
        writer Leonardo da Vinci. Likely completed in 1506, the piece features a portrait
        of a seated woman set against an imaginary landscape.
      green: false
      issued_copies: 1
      keywords: Renaissance, sfumato, portrait
      maximum_fee: 100
      name: Mona Lisa
      royalty: 12
      series_name: Famous artist
      spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
      thumbnail_coordinate:
        bottom_right_x: 640
        bottom_right_y: 480
        top_left_x: 0
        top_left_y: 0
      youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
    required:
    - artist_name
    - name
    - issued_copies
    - artist_pastelid
    - artist_pastelid_passphrase
    - spendable_address
    - maximum_fee
  ArtworkTicketResponseBody:
    title: ArtworkTicketResponseBody
    type: object
    properties:
      artist_name:
        type: string
        description: Name of the artist
        example: Leonardo da Vinci
        maxLength: 256
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_pastelid_passphrase:
        type: string
        description: Passphrase of the artist's PastelID
        example: qwerasdf1234
      artist_website_url:
        type: string
        description: Artist website URL
        example: https://www.leonardodavinci.net
        maxLength: 256
      description:
        type: string
        description: Description of the artwork
        example: The Mona Lisa is an oil painting by Italian artist, inventor, and
          writer Leonardo da Vinci. Likely completed in 1506, the piece features a
          portrait of a seated woman set against an imaginary landscape.
        maxLength: 1024
      green:
        type: boolean
        description: To donate 2% of the sale proceeds on every sale to TeamTrees
          which plants trees
        default: false
        example: false
      issued_copies:
        type: integer
        description: Number of copies issued
        default: 1
        example: 1
        minimum: 1
        maximum: 1000
      keywords:
        type: string
        description: Keywords
        example: Renaissance, sfumato, portrait
        maxLength: 256
      maximum_fee:
        type: number
        description: Used to find a suitable masternode with a fee equal or less
        default: 1
        example: 100
        minimum: 1e-05
      name:
        type: string
        description: Name of the artwork
        example: Mona Lisa
        maxLength: 256
      royalty:
        type: number
        description: Percentage the artist received in future sales. If set to 0%
          he only get paids for the first sale on each copy of the NFT
        default: 0
        example: 12
        minimum: 0
        maximum: 100
      series_name:
        type: string
        description: Series name
        example: Famous artist
        maxLength: 256
      spendable_address:
        type: string
        description: Spendable address
        example: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        pattern: ^[a-zA-Z0-9]+$
        minLength: 35
        maxLength: 35
      thumbnail_coordinate:
        $ref: '#/definitions/ThumbnailcoordinateResponseBody'
      youtube_url:
        type: string
        description: Artwork creation video youtube URL
        example: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
        maxLength: 128
    description: Ticket of the registration artwork
    example:
      artist_name: Leonardo da Vinci
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_pastelid_passphrase: qwerasdf1234
      artist_website_url: https://www.leonardodavinci.net
      description: The Mona Lisa is an oil painting by Italian artist, inventor, and
        writer Leonardo da Vinci. Likely completed in 1506, the piece features a portrait
        of a seated woman set against an imaginary landscape.
      green: false
      issued_copies: 1
      keywords: Renaissance, sfumato, portrait
      maximum_fee: 100
      name: Mona Lisa
      royalty: 12
      series_name: Famous artist
      spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
      thumbnail_coordinate:
        bottom_right_x: 640
        bottom_right_y: 480
        top_left_x: 0
        top_left_y: 0
      youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
    required:
    - artist_name
    - name
    - issued_copies
    - artist_pastelid
    - artist_pastelid_passphrase
    - spendable_address
    - maximum_fee
  ArtworksArtSearchBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: artSearch_BadRequest_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksArtSearchInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: artSearch_InternalServerError_response_body result type (default
      view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksArtSearchResponseBody:
    title: ArtworksArtSearchResponseBody
    type: object
    properties:
      artwork:
        $ref: '#/definitions/ArtworkSummaryResponseBody'
      match_index:
        type: integer
        description: Sort index of the match based on score.This must be used to sort
          results on UI.
        example: 7559382628069304989
        format: int64
      matches:
        type: array
        items:
          $ref: '#/definitions/FuzzyMatchResponseBody'
        description: Match result details
        example:
        - field_type: art_title
          matched_indexes:
          - 8830161846526020474
          - 6577107819799959969
          - 7129840891655550567
          - 2035670134737008339
          score: 7525781640486193864
          str: Aut ut voluptates rerum.
        - field_type: art_title
          matched_indexes:
          - 8830161846526020474
          - 6577107819799959969
          - 7129840891655550567
          - 2035670134737008339
          score: 7525781640486193864
          str: Aut ut voluptates rerum.
    example:
      artwork:
        artist_name: Leonardo da Vinci
        artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        artist_website_url: https://www.leonardodavinci.net
        copies: 1
        description: The Mona Lisa is an oil painting by Italian artist, inventor,
          and writer Leonardo da Vinci. Likely completed in 1506, the piece features
          a portrait of a seated woman set against an imaginary landscape.
        keywords: Renaissance, sfumato, portrait
        series_name: Famous artist
        thumbnail:
        - 69
        - 111
        - 115
        - 32
        - 98
        - 108
        - 97
        - 110
        - 100
        - 105
        - 116
        - 105
        - 105
        - 115
        - 32
        - 101
        - 105
        - 117
        - 115
        - 46
        title: Mona Lisa
        txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
        youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
      match_index: 5094853060256696066
      matches:
      - field_type: art_title
        matched_indexes:
        - 8830161846526020474
        - 6577107819799959969
        - 7129840891655550567
        - 2035670134737008339
        score: 7525781640486193864
        str: Aut ut voluptates rerum.
      - field_type: art_title
        matched_indexes:
        - 8830161846526020474
        - 6577107819799959969
        - 7129840891655550567
        - 2035670134737008339
        score: 7525781640486193864
        str: Aut ut voluptates rerum.
    required:
    - artwork
    - matches
    - match_index
  ArtworksArtworkGetBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: artworkGet_BadRequest_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksArtworkGetInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: artworkGet_InternalServerError_response_body result type (default
      view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksArtworkGetNotFoundResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: artworkGet_NotFound_response_body result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksArtworkGetResponseBody:
    title: ArtworksArtworkGetResponseBody
    type: object
    properties:
      artist_name:
        type: string
        description: Name of the artist
        example: Leonardo da Vinci
        maxLength: 256
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_website_url:
        type: string
        description: Artist website URL
        example: https://www.leonardodavinci.net
        maxLength: 256
      copies:
        type: integer
        description: Number of copies
        default: 1
        example: 1
        minimum: 1
        maximum: 1000
      description:
        type: string
        description: Description of the artwork
        example: The Mona Lisa is an oil painting by Italian artist, inventor, and
          writer Leonardo da Vinci. Likely completed in 1506, the piece features a
          portrait of a seated woman set against an imaginary landscape.
        maxLength: 1024
      drawing_nsfw_score:
        type: number
        description: nsfw score
        example: 1
        minimum: 0
        maximum: 1
      green_address:
        type: boolean
        description: Green address
        example: true
      hentai_nsfw_score:
        type: number
        description: nsfw score
        example: 1
        minimum: 0
        maximum: 1
      internet_rareness_score:
        type: number
        description: internet rareness score
        example: 1
        minimum: 0
        maximum: 1
      keywords:
        type: string
        description: Keywords
        example: Renaissance, sfumato, portrait
        maxLength: 256
      neutral_nsfw_score:
        type: number
        description: nsfw score
        example: 1
        minimum: 0
        maximum: 1
      nsfw_score:
        type: number
        description: nsfw score
        example: 1
        minimum: 0
        maximum: 1
      porn_nsfw_score:
        type: number
        description: nsfw score
        example: 1
        minimum: 0
        maximum: 1
      rareness_score:
        type: number
        description: pastel rareness score
        example: 1
        minimum: 0
        maximum: 1
      royalty:
        type: number
        description: how much artist should get on all future resales
        example: 0.41574607503644323
        format: double
      series_name:
        type: string
        description: Series name
        example: Famous artist
        maxLength: 256
      sexy_nsfw_score:
        type: number
        description: nsfw score
        example: 1
        minimum: 0
        maximum: 1
      storage_fee:
        type: integer
        description: Storage fee %
        example: 100
        format: int64
      thumbnail:
        type: string
        description: Thumbnail image
        example:
        - 77
        - 111
        - 108
        - 101
        - 115
        - 116
        - 105
        - 97
        - 101
        - 32
        - 113
        - 117
        - 105
        - 100
        - 101
        - 109
        - 32
        - 100
        - 111
        - 108
        - 111
        - 114
        - 105
        - 98
        - 117
        - 115
        - 46
        format: byte
      title:
        type: string
        description: Name of the artwork
        example: Mona Lisa
        maxLength: 256
      txid:
        type: string
        description: txid
        example: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
        minLength: 64
        maxLength: 64
      version:
        type: integer
        description: version
        example: 1
        format: int64
      youtube_url:
        type: string
        description: Artwork creation video youtube URL
        example: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
        maxLength: 128
    example:
      artist_name: Leonardo da Vinci
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_website_url: https://www.leonardodavinci.net
      copies: 1
      description: The Mona Lisa is an oil painting by Italian artist, inventor, and
        writer Leonardo da Vinci. Likely completed in 1506, the piece features a portrait
        of a seated woman set against an imaginary landscape.
      drawing_nsfw_score: 1
      green_address: true
      hentai_nsfw_score: 1
      internet_rareness_score: 1
      keywords: Renaissance, sfumato, portrait
      neutral_nsfw_score: 1
      nsfw_score: 1
      porn_nsfw_score: 1
      rareness_score: 1
      royalty: 0.577962360554173
      series_name: Famous artist
      sexy_nsfw_score: 1
      storage_fee: 100
      thumbnail:
      - 67
      - 117
      - 108
      - 112
      - 97
      - 32
      - 118
      - 101
      - 108
      - 32
      - 111
      - 100
      - 105
      - 111
      - 32
      - 115
      - 101
      - 100
      - 32
      - 97
      - 108
      - 105
      - 113
      - 117
      - 97
      - 109
      - 46
      title: Mona Lisa
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
      version: 1
      youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
    required:
    - rareness_score
    - nsfw_score
    - title
    - description
    - artist_name
    - copies
    - artist_pastelid
    - txid
  ArtworksDownloadInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: download_InternalServerError_response_body result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksDownloadNotFoundResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: download_NotFound_response_body result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksDownloadResponseBody:
    title: ArtworksDownloadResponseBody
    type: object
    properties:
      file:
        type: string
        description: File downloaded
        example:
        - 77
        - 105
        - 110
        - 105
        - 109
        - 97
        - 32
        - 116
        - 101
        - 109
        - 112
        - 111
        - 114
        - 105
        - 98
        - 117
        - 115
        - 32
        - 116
        - 101
        - 109
        - 112
        - 111
        - 114
        - 97
        - 32
        - 118
        - 101
        - 110
        - 105
        - 97
        - 109
        - 32
        - 118
        - 111
        - 108
        - 117
        - 112
        - 116
        - 97
        - 115
        - 46
        format: byte
    example:
      file:
      - 73
      - 109
      - 112
      - 101
      - 100
      - 105
      - 116
      - 32
      - 118
      - 101
      - 114
      - 111
      - 32
      - 101
      - 110
      - 105
      - 109
      - 46
    required:
    - file
  ArtworksRegisterBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: register_BadRequest_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksRegisterInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: register_InternalServerError_response_body result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksRegisterRequestBody:
    title: ArtworksRegisterRequestBody
    type: object
    properties:
      artist_name:
        type: string
        description: Name of the artist
        example: Leonardo da Vinci
        maxLength: 256
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_pastelid_passphrase:
        type: string
        description: Passphrase of the artist's PastelID
        example: qwerasdf1234
      artist_website_url:
        type: string
        description: Artist website URL
        example: https://www.leonardodavinci.net
        maxLength: 256
      description:
        type: string
        description: Description of the artwork
        example: The Mona Lisa is an oil painting by Italian artist, inventor, and
          writer Leonardo da Vinci. Likely completed in 1506, the piece features a
          portrait of a seated woman set against an imaginary landscape.
        maxLength: 1024
      green:
        type: boolean
        description: To donate 2% of the sale proceeds on every sale to TeamTrees
          which plants trees
        default: false
        example: false
      image_id:
        type: string
        description: Uploaded image ID
        example: VK7mpAqZ
        minLength: 8
        maxLength: 8
      issued_copies:
        type: integer
        description: Number of copies issued
        default: 1
        example: 1
        minimum: 1
        maximum: 1000
      keywords:
        type: string
        description: Keywords
        example: Renaissance, sfumato, portrait
        maxLength: 256
      maximum_fee:
        type: number
        description: Used to find a suitable masternode with a fee equal or less
        default: 1
        example: 100
        minimum: 1e-05
      name:
        type: string
        description: Name of the artwork
        example: Mona Lisa
        maxLength: 256
      royalty:
        type: number
        description: Percentage the artist received in future sales. If set to 0%
          he only get paids for the first sale on each copy of the NFT
        default: 0
        example: 12
        minimum: 0
        maximum: 100
      series_name:
        type: string
        description: Series name
        example: Famous artist
        maxLength: 256
      spendable_address:
        type: string
        description: Spendable address
        example: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        pattern: ^[a-zA-Z0-9]+$
        minLength: 35
        maxLength: 35
      thumbnail_coordinate:
        $ref: '#/definitions/ThumbnailcoordinateRequestBody'
      youtube_url:
        type: string
        description: Artwork creation video youtube URL
        example: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
        maxLength: 128
    example:
      artist_name: Leonardo da Vinci
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_pastelid_passphrase: qwerasdf1234
      artist_website_url: https://www.leonardodavinci.net
      description: The Mona Lisa is an oil painting by Italian artist, inventor, and
        writer Leonardo da Vinci. Likely completed in 1506, the piece features a portrait
        of a seated woman set against an imaginary landscape.
      green: false
      image_id: VK7mpAqZ
      issued_copies: 1
      keywords: Renaissance, sfumato, portrait
      maximum_fee: 100
      name: Mona Lisa
      royalty: 12
      series_name: Famous artist
      spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
      thumbnail_coordinate:
        bottom_right_x: 640
        bottom_right_y: 480
        top_left_x: 0
        top_left_y: 0
      youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
    required:
    - image_id
    - artist_name
    - name
    - issued_copies
    - artist_pastelid
    - artist_pastelid_passphrase
    - spendable_address
    - maximum_fee
  ArtworksRegisterResponseBody:
    title: 'Mediatype identifier: application/vnd.artwork.register; view=default'
    type: object
    properties:
      task_id:
        type: string
        description: Task ID of the registration process
        example: n6Qn6TFM
        minLength: 8
        maxLength: 8
    description: RegisterResponseBody result type (default view)
    example:
      task_id: n6Qn6TFM
    required:
    - task_id
  ArtworksRegisterTaskInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: registerTask_InternalServerError_response_body result type (default
      view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksRegisterTaskNotFoundResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: registerTask_NotFound_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksRegisterTaskResponseBody:
    title: 'Mediatype identifier: application/vnd.artwork.register.task; view=default'
    type: object
    properties:
      id:
        type: string
        description: JOb ID of the registration process
        example: n6Qn6TFM
        minLength: 8
        maxLength: 8
      states:
        type: array
        items:
          $ref: '#/definitions/TaskStateResponseBody'
        description: List of states from the very beginning of the process
        example:
        - date: 2006-01-02T15:04:05Z07:00
          status: Task Started
        - date: 2006-01-02T15:04:05Z07:00
          status: Task Started
      status:
        type: string
        description: Status of the registration process
        example: Task Started
        enum:
        - Task Started
        - Connected
        - Image Probed
        - Image And Thumbnail Uploaded
        - Status Gen ReptorQ Symbols
        - Ticket Accepted
        - Ticket Registered
        - Ticket Activated
        - Error Insufficient Fee
        - Error Fingerprints Dont Match
        - Error ThumbnailHashes Dont Match
        - Error GenRaptorQ Symbols Failed
        - Task Rejected
        - Task Completed
      ticket:
        $ref: '#/definitions/ArtworkTicketResponseBody'
      txid:
        type: string
        description: txid
        example: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
        minLength: 64
        maxLength: 64
    description: RegisterTaskResponseBody result type (default view)
    example:
      id: n6Qn6TFM
      states:
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      status: Task Started
      ticket:
        artist_name: Leonardo da Vinci
        artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        artist_pastelid_passphrase: qwerasdf1234
        artist_website_url: https://www.leonardodavinci.net
        description: The Mona Lisa is an oil painting by Italian artist, inventor,
          and writer Leonardo da Vinci. Likely completed in 1506, the piece features
          a portrait of a seated woman set against an imaginary landscape.
        green: false
        issued_copies: 1
        keywords: Renaissance, sfumato, portrait
        maximum_fee: 100
        name: Mona Lisa
        royalty: 12
        series_name: Famous artist
        spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        thumbnail_coordinate:
          bottom_right_x: 640
          bottom_right_y: 480
          top_left_x: 0
          top_left_y: 0
        youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
    required:
    - id
    - status
    - ticket
  ArtworksRegisterTaskStateInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: registerTaskState_InternalServerError_response_body result type (default
      view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksRegisterTaskStateNotFoundResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: registerTaskState_NotFound_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksRegisterTaskStateResponseBody:
    title: ArtworksRegisterTaskStateResponseBody
    type: object
    properties:
      date:
        type: string
        description: Date of the status creation
        example: 2006-01-02T15:04:05Z07:00
      status:
        type: string
        description: Status of the registration process
        example: Task Started
        enum:
        - Task Started
        - Connected
        - Image Probed
        - Image And Thumbnail Uploaded
        - Status Gen ReptorQ Symbols
        - Ticket Accepted
        - Ticket Registered
        - Ticket Activated
        - Error Insufficient Fee
        - Error Fingerprints Dont Match
        - Error ThumbnailHashes Dont Match
        - Error GenRaptorQ Symbols Failed
        - Task Rejected
        - Task Completed
    example:
      date: 2006-01-02T15:04:05Z07:00
      status: Task Started
    required:
    - date
    - status
  ArtworksRegisterTasksInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: registerTasks_InternalServerError_response_body result type (default
      view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksTaskResponseTinyCollection:
    title: 'Mediatype identifier: application/vnd.artwork.register.task; type=collection;
      view=tiny'
    type: array
    items:
      $ref: '#/definitions/TaskResponseTiny'
    description: ArtworksTaskResponseTinyCollection is the result type for an array
      of TaskResponseTiny (default view)
    example:
    - id: n6Qn6TFM
      states:
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      status: Task Started
      ticket:
        artist_name: Leonardo da Vinci
        artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        artist_pastelid_passphrase: qwerasdf1234
        artist_website_url: https://www.leonardodavinci.net
        description: The Mona Lisa is an oil painting by Italian artist, inventor,
          and writer Leonardo da Vinci. Likely completed in 1506, the piece features
          a portrait of a seated woman set against an imaginary landscape.
        green: false
        issued_copies: 1
        keywords: Renaissance, sfumato, portrait
        maximum_fee: 100
        name: Mona Lisa
        royalty: 12
        series_name: Famous artist
        spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        thumbnail_coordinate:
          bottom_right_x: 640
          bottom_right_y: 480
          top_left_x: 0
          top_left_y: 0
        youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
    - id: n6Qn6TFM
      states:
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      status: Task Started
      ticket:
        artist_name: Leonardo da Vinci
        artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        artist_pastelid_passphrase: qwerasdf1234
        artist_website_url: https://www.leonardodavinci.net
        description: The Mona Lisa is an oil painting by Italian artist, inventor,
          and writer Leonardo da Vinci. Likely completed in 1506, the piece features
          a portrait of a seated woman set against an imaginary landscape.
        green: false
        issued_copies: 1
        keywords: Renaissance, sfumato, portrait
        maximum_fee: 100
        name: Mona Lisa
        royalty: 12
        series_name: Famous artist
        spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        thumbnail_coordinate:
          bottom_right_x: 640
          bottom_right_y: 480
          top_left_x: 0
          top_left_y: 0
        youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
    - id: n6Qn6TFM
      states:
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      - date: 2006-01-02T15:04:05Z07:00
        status: Task Started
      status: Task Started
      ticket:
        artist_name: Leonardo da Vinci
        artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        artist_pastelid_passphrase: qwerasdf1234
        artist_website_url: https://www.leonardodavinci.net
        description: The Mona Lisa is an oil painting by Italian artist, inventor,
          and writer Leonardo da Vinci. Likely completed in 1506, the piece features
          a portrait of a seated woman set against an imaginary landscape.
        green: false
        issued_copies: 1
        keywords: Renaissance, sfumato, portrait
        maximum_fee: 100
        name: Mona Lisa
        royalty: 12
        series_name: Famous artist
        spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        thumbnail_coordinate:
          bottom_right_x: 640
          bottom_right_y: 480
          top_left_x: 0
          top_left_y: 0
        youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
  ArtworksUploadImageBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: uploadImage_BadRequest_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksUploadImageInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: uploadImage_InternalServerError_response_body result type (default
      view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  ArtworksUploadImageRequestBody:
    title: ArtworksUploadImageRequestBody
    type: object
    properties:
      file:
        type: string
        description: File to upload
        example:
        - 77
        - 97
        - 103
        - 110
        - 105
        - 32
        - 101
        - 115
        - 116
        - 32
        - 113
        - 117
        - 105
        - 100
        - 101
        - 109
        - 32
        - 97
        - 100
        - 46
        format: byte
      filename:
        type: string
        description: For internal use
    example:
      file:
      - 81
      - 117
      - 105
      - 98
      - 117
      - 115
      - 100
      - 97
      - 109
      - 32
      - 118
      - 105
      - 116
      - 97
      - 101
      - 32
      - 113
      - 117
      - 97
      - 101
      - 114
      - 97
      - 116
      - 46
    required:
    - file
  ArtworksUploadImageResponseBody:
    title: 'Mediatype identifier: application/vnd.artwork.upload-image; view=default'
    type: object
    properties:
      expires_in:
        type: string
        description: Image expiration
        example: 2006-01-02T15:04:05Z07:00
        format: date-time
      image_id:
        type: string
        description: Uploaded image ID
        example: VK7mpAqZ
        minLength: 8
        maxLength: 8
    description: UploadImageResponseBody result type (default view)
    example:
      expires_in: 2006-01-02T15:04:05Z07:00
      image_id: VK7mpAqZ
    required:
    - image_id
    - expires_in
  FuzzyMatchResponseBody:
    title: FuzzyMatchResponseBody
    type: object
    properties:
      field_type:
        type: string
        description: Field that is matched
        example: keyword
        enum:
        - artist_name
        - art_title
        - series
        - descr
        - keyword
      matched_indexes:
        type: array
        items:
          type: integer
          example: 3859555445529686132
          format: int64
        description: The indexes of matched characters. Useful for highlighting matches
        example:
        - 5733567162489028073
        - 6634075570524958526
      score:
        type: integer
        description: Score used to rank matches
        example: 1075028053301714483
        format: int64
      str:
        type: string
        description: String that is matched
        example: Ut eum eligendi velit sequi voluptate ea.
    example:
      field_type: series
      matched_indexes:
      - 130003991048914507
      - 3774069412712369602
      score: 1633325616687257276
      str: Minus nostrum ea veritatis sequi.
  TaskResponseTiny:
    title: 'Mediatype identifier: application/vnd.artwork.register.task; view=default'
    type: object
    properties:
      id:
        type: string
        description: JOb ID of the registration process
        example: n6Qn6TFM
        minLength: 8
        maxLength: 8
      status:
        type: string
        description: Status of the registration process
        example: Task Started
        enum:
        - Task Started
        - Connected
        - Image Probed
        - Image And Thumbnail Uploaded
        - Status Gen ReptorQ Symbols
        - Ticket Accepted
        - Ticket Registered
        - Ticket Activated
        - Error Insufficient Fee
        - Error Fingerprints Dont Match
        - Error ThumbnailHashes Dont Match
        - Error GenRaptorQ Symbols Failed
        - Task Rejected
        - Task Completed
      ticket:
        $ref: '#/definitions/ArtworkTicketResponse'
      txid:
        type: string
        description: txid
        example: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
        minLength: 64
        maxLength: 64
    description: TaskResponse result type (tiny view) (default view)
    example:
      id: n6Qn6TFM
      status: Task Started
      ticket:
        artist_name: Leonardo da Vinci
        artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        artist_pastelid_passphrase: qwerasdf1234
        artist_website_url: https://www.leonardodavinci.net
        description: The Mona Lisa is an oil painting by Italian artist, inventor,
          and writer Leonardo da Vinci. Likely completed in 1506, the piece features
          a portrait of a seated woman set against an imaginary landscape.
        green: false
        issued_copies: 1
        keywords: Renaissance, sfumato, portrait
        maximum_fee: 100
        name: Mona Lisa
        royalty: 12
        series_name: Famous artist
        spendable_address: PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j
        thumbnail_coordinate:
          bottom_right_x: 640
          bottom_right_y: 480
          top_left_x: 0
          top_left_y: 0
        youtube_url: https://www.youtube.com/watch?v=0xl6Ufo4ZX0
      txid: 576e7b824634a488a2f0baacf5a53b237d883029f205df25b300b87c8877ab58
    required:
    - id
    - status
    - ticket
  TaskStateResponseBody:
    title: TaskStateResponseBody
    type: object
    properties:
      date:
        type: string
        description: Date of the status creation
        example: 2006-01-02T15:04:05Z07:00
      status:
        type: string
        description: Status of the registration process
        example: Task Started
        enum:
        - Task Started
        - Connected
        - Image Probed
        - Image And Thumbnail Uploaded
        - Status Gen ReptorQ Symbols
        - Ticket Accepted
        - Ticket Registered
        - Ticket Activated
        - Error Insufficient Fee
        - Error Fingerprints Dont Match
        - Error ThumbnailHashes Dont Match
        - Error GenRaptorQ Symbols Failed
        - Task Rejected
        - Task Completed
    example:
      date: 2006-01-02T15:04:05Z07:00
      status: Task Started
    required:
    - date
    - status
  ThumbnailcoordinateRequestBody:
    title: 'Mediatype identifier: thumbnailcoordinate; view=default'
    type: object
    properties:
      bottom_right_x:
        type: integer
        description: X coordinate of the thumbnail's bottom right conner
        default: 0
        example: 640
        format: int64
      bottom_right_y:
        type: integer
        description: Y coordinate of the thumbnail's bottom right conner
        default: 0
        example: 480
        format: int64
      top_left_x:
        type: integer
        description: X coordinate of the thumbnail's top left conner
        default: 0
        example: 0
        format: int64
      top_left_y:
        type: integer
        description: Y coordinate of the thumbnail's top left conner
        default: 0
        example: 0
        format: int64
    description: Coordinate of the thumbnail (default view)
    example:
      bottom_right_x: 640
      bottom_right_y: 480
      top_left_x: 0
      top_left_y: 0
    required:
    - top_left_x
    - top_left_y
    - bottom_right_x
    - bottom_right_y
  ThumbnailcoordinateResponse:
    title: 'Mediatype identifier: thumbnailcoordinate; view=default'
    type: object
    properties:
      bottom_right_x:
        type: integer
        description: X coordinate of the thumbnail's bottom right conner
        default: 0
        example: 640
        format: int64
      bottom_right_y:
        type: integer
        description: Y coordinate of the thumbnail's bottom right conner
        default: 0
        example: 480
        format: int64
      top_left_x:
        type: integer
        description: X coordinate of the thumbnail's top left conner
        default: 0
        example: 0
        format: int64
      top_left_y:
        type: integer
        description: Y coordinate of the thumbnail's top left conner
        default: 0
        example: 0
        format: int64
    description: Coordinate of the thumbnail
    example:
      bottom_right_x: 640
      bottom_right_y: 480
      top_left_x: 0
      top_left_y: 0
    required:
    - top_left_x
    - top_left_y
    - bottom_right_x
    - bottom_right_y
  ThumbnailcoordinateResponseBody:
    title: 'Mediatype identifier: thumbnailcoordinate; view=default'
    type: object
    properties:
      bottom_right_x:
        type: integer
        description: X coordinate of the thumbnail's bottom right conner
        default: 0
        example: 640
        format: int64
      bottom_right_y:
        type: integer
        description: Y coordinate of the thumbnail's bottom right conner
        default: 0
        example: 480
        format: int64
      top_left_x:
        type: integer
        description: X coordinate of the thumbnail's top left conner
        default: 0
        example: 0
        format: int64
      top_left_y:
        type: integer
        description: Y coordinate of the thumbnail's top left conner
        default: 0
        example: 0
        format: int64
    description: Coordinate of the thumbnail
    example:
      bottom_right_x: 640
      bottom_right_y: 480
      top_left_x: 0
      top_left_y: 0
    required:
    - top_left_x
    - top_left_y
    - bottom_right_x
    - bottom_right_y
  UserImageUploadPayloadRequestBody:
    title: UserImageUploadPayloadRequestBody
    type: object
    properties:
      content:
        type: string
        description: File to upload (byte array of the file content)
        example: 
        format: byte
      filename:
        type: string
        description: File name of the user image
        example: image_name.png
        pattern: ^.*\.(png|PNG|jpeg|JPEG|jpg|JPG)$
    description: User image upload payload
    example:
      content: 
      filename: image_name.png
    required:
    - content
  UserImageUploadPayloadResponseBody:
    title: UserImageUploadPayloadResponseBody
    type: object
    properties:
      content:
        type: string
        description: File to upload (byte array of the file content)
        example: 
        format: byte
      filename:
        type: string
        description: File name of the user image
        example: image_name.png
        pattern: ^.*\.(png|PNG|jpeg|JPEG|jpg|JPG)$
    description: User image upload payload
    example:
      content: 
      filename: image_name.png
    required:
    - content
  UserdatasCreateUserdataBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: createUserdata_BadRequest_response_body result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasCreateUserdataInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: createUserdata_InternalServerError_response_body result type (default
      view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasCreateUserdataRequestBody:
    title: UserdatasCreateUserdataRequestBody
    type: object
    properties:
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_pastelid_passphrase:
        type: string
        description: Passphrase of the artist's PastelID
        example: qwerasdf1234
      avatar_image:
        $ref: '#/definitions/UserImageUploadPayloadRequestBody'
      biography:
        type: string
        description: Biography of the user
        example: I'm a digital artist based in Paris, France. ...
        maxLength: 1024
      categories:
        type: string
        description: The categories of user's work, separate by ,
        example: Manga&Anime,3D,Comics
      cover_photo:
        $ref: '#/definitions/UserImageUploadPayloadRequestBody'
      facebook_link:
        type: string
        description: Facebook link of the user
        example: https://www.facebook.com/Williams_Scottish
        maxLength: 128
      location:
        type: string
        description: Location of the user
        example: New York, US
        maxLength: 256
      native_currency:
        type: string
        description: Native currency of user in ISO 4217 Alphabetic Code
        example: USD
        minLength: 3
        maxLength: 3
      primary_language:
        type: string
        description: Primary language of the user, follow ISO 639-2 standard
        example: en
        maxLength: 30
      realname:
        type: string
        description: Real name of the user
        example: Williams Scottish
        maxLength: 256
      twitter_link:
        type: string
        description: Twitter link of the user
        example: https://www.twitter.com/@Williams_Scottish
        maxLength: 128
    example:
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_pastelid_passphrase: qwerasdf1234
      avatar_image:
        content: 
        filename: image_name.png
      biography: I'm a digital artist based in Paris, France. ...
      categories: Manga&Anime,3D,Comics
      cover_photo:
        content: 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
        filename: image_name.png
      facebook_link: https://www.facebook.com/Williams_Scottish
      location: New York, US
      native_currency: USD
      primary_language: en
      realname: Williams Scottish
      twitter_link: https://www.twitter.com/@Williams_Scottish
    required:
    - artist_pastelid
    - artist_pastelid_passphrase
  UserdatasCreateUserdataResponseBody:
    title: UserdatasCreateUserdataResponseBody
    type: object
    properties:
      avatar_image:
        type: string
        description: Error detail on avatar
        example: ""
        maxLength: 256
      biography:
        type: string
        description: Error detail on biography
        example: ""
        maxLength: 256
      categories:
        type: string
        description: Error detail on categories
        example: ""
        maxLength: 256
      cover_photo:
        type: string
        description: Error detail on cover photo
        example: ""
        maxLength: 256
      detail:
        type: string
        description: The detail of why result is success/fail, depend on response_code
        example: All userdata is processed
        maxLength: 256
      facebook_link:
        type: string
        description: Error detail on facebook_link
        example: ""
        maxLength: 256
      location:
        type: string
        description: Error detail on location
        example: ""
        maxLength: 256
      native_currency:
        type: string
        description: Error detail on native_currency
        example: ""
        maxLength: 256
      primary_language:
        type: string
        description: Error detail on primary_language
        example: ""
        maxLength: 256
      realname:
        type: string
        description: Error detail on realname
        example: ""
        maxLength: 256
      response_code:
        type: integer
        description: Result of the request is success or not
        example: 0
        format: int64
      twitter_link:
        type: string
        description: Error detail on twitter_link
        example: ""
        maxLength: 256
    example:
      avatar_image: ""
      biography: ""
      categories: ""
      cover_photo: ""
      detail: All userdata is processed
      facebook_link: ""
      location: ""
      native_currency: ""
      primary_language: ""
      realname: ""
      response_code: 0
      twitter_link: ""
    required:
    - response_code
    - detail
  UserdatasGetUserdataBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: getUserdata_BadRequest_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasGetUserdataInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: getUserdata_InternalServerError_response_body result type (default
      view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasGetUserdataNotFoundResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: true
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: getUserdata_NotFound_response_body result type (default view)
    example:
      fault: true
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: false
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasGetUserdataResponseBody:
    title: UserdatasGetUserdataResponseBody
    type: object
    properties:
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_pastelid_passphrase:
        type: string
        description: Passphrase of the artist's PastelID
        example: qwerasdf1234
      avatar_image:
        $ref: '#/definitions/UserImageUploadPayloadResponseBody'
      biography:
        type: string
        description: Biography of the user
        example: I'm a digital artist based in Paris, France. ...
        maxLength: 1024
      categories:
        type: string
        description: The categories of user's work, separate by ,
        example: Manga&Anime,3D,Comics
      cover_photo:
        $ref: '#/definitions/UserImageUploadPayloadResponseBody'
      facebook_link:
        type: string
        description: Facebook link of the user
        example: https://www.facebook.com/Williams_Scottish
        maxLength: 128
      location:
        type: string
        description: Location of the user
        example: New York, US
        maxLength: 256
      native_currency:
        type: string
        description: Native currency of user in ISO 4217 Alphabetic Code
        example: USD
        minLength: 3
        maxLength: 3
      primary_language:
        type: string
        description: Primary language of the user, follow ISO 639-2 standard
        example: en
        maxLength: 30
      realname:
        type: string
        description: Real name of the user
        example: Williams Scottish
        maxLength: 256
      twitter_link:
        type: string
        description: Twitter link of the user
        example: https://www.twitter.com/@Williams_Scottish
        maxLength: 128
    example:
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_pastelid_passphrase: qwerasdf1234
      avatar_image:
        content: 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
        filename: image_name.png
      biography: I'm a digital artist based in Paris, France. ...
      categories: Manga&Anime,3D,Comics
      cover_photo:
        content: 
        filename: image_name.png
      facebook_link: https://www.facebook.com/Williams_Scottish
      location: New York, US
      native_currency: USD
      primary_language: en
      realname: Williams Scottish
      twitter_link: https://www.twitter.com/@Williams_Scottish
    required:
    - artist_pastelid
    - artist_pastelid_passphrase
  UserdatasUpdateUserdataBadRequestResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: false
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: true
    description: updateUserdata_BadRequest_response_body result type (default view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: true
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasUpdateUserdataInternalServerErrorResponseBody:
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
    properties:
      fault:
        type: boolean
        description: Is the error a server-side fault?
        example: true
      id:
        type: string
        description: ID is a unique identifier for this particular occurrence of the
          problem.
        example: 123abc
      message:
        type: string
        description: Message is a human-readable explanation specific to this occurrence
          of the problem.
        example: parameter 'p' must be an integer
      name:
        type: string
        description: Name is the name of this class of errors.
        example: bad_request
      temporary:
        type: boolean
        description: Is the error temporary?
        example: false
      timeout:
        type: boolean
        description: Is the error a timeout?
        example: false
    description: updateUserdata_InternalServerError_response_body result type (default
      view)
    example:
      fault: false
      id: 123abc
      message: parameter 'p' must be an integer
      name: bad_request
      temporary: true
      timeout: false
    required:
    - name
    - id
    - message
    - temporary
    - timeout
    - fault
  UserdatasUpdateUserdataRequestBody:
    title: UserdatasUpdateUserdataRequestBody
    type: object
    properties:
      artist_pastelid:
        type: string
        description: Artist's PastelID
        example: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
        pattern: ^[a-zA-Z0-9]+$
        minLength: 86
        maxLength: 86
      artist_pastelid_passphrase:
        type: string
        description: Passphrase of the artist's PastelID
        example: qwerasdf1234
      avatar_image:
        $ref: '#/definitions/UserImageUploadPayloadRequestBody'
      biography:
        type: string
        description: Biography of the user
        example: I'm a digital artist based in Paris, France. ...
        maxLength: 1024
      categories:
        type: string
        description: The categories of user's work, separate by ,
        example: Manga&Anime,3D,Comics
      cover_photo:
        $ref: '#/definitions/UserImageUploadPayloadRequestBody'
      facebook_link:
        type: string
        description: Facebook link of the user
        example: https://www.facebook.com/Williams_Scottish
        maxLength: 128
      location:
        type: string
        description: Location of the user
        example: New York, US
        maxLength: 256
      native_currency:
        type: string
        description: Native currency of user in ISO 4217 Alphabetic Code
        example: USD
        minLength: 3
        maxLength: 3
      primary_language:
        type: string
        description: Primary language of the user, follow ISO 639-2 standard
        example: en
        maxLength: 30
      realname:
        type: string
        description: Real name of the user
        example: Williams Scottish
        maxLength: 256
      twitter_link:
        type: string
        description: Twitter link of the user
        example: https://www.twitter.com/@Williams_Scottish
        maxLength: 128
    example:
      artist_pastelid: jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS
      artist_pastelid_passphrase: qwerasdf1234
      avatar_image:
        content: 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
        filename: image_name.png
      biography: I'm a digital artist based in Paris, France. ...
      categories: Manga&Anime,3D,Comics
      cover_photo:
        content: 
        filename: image_name.png
      facebook_link: https://www.facebook.com/Williams_Scottish
      location: New York, US
      native_currency: USD
      primary_language: en
      realname: Williams Scottish
      twitter_link: https://www.twitter.com/@Williams_Scottish
    required:
    - artist_pastelid
    - artist_pastelid_passphrase
  UserdatasUpdateUserdataResponseBody:
    title: UserdatasUpdateUserdataResponseBody
    type: object
    properties:
      avatar_image:
        type: string
        description: Error detail on avatar
        example: ""
        maxLength: 256
      biography:
        type: string
        description: Error detail on biography
        example: ""
        maxLength: 256
      categories:
        type: string
        description: Error detail on categories
        example: ""
        maxLength: 256
      cover_photo:
        type: string
        description: Error detail on cover photo
        example: ""
        maxLength: 256
      detail:
        type: string
        description: The detail of why result is success/fail, depend on response_code
        example: All userdata is processed
        maxLength: 256
      facebook_link:
        type: string
        description: Error detail on facebook_link
        example: ""
        maxLength: 256
      location:
        type: string
        description: Error detail on location
        example: ""
        maxLength: 256
      native_currency:
        type: string
        description: Error detail on native_currency
        example: ""
        maxLength: 256
      primary_language:
        type: string
        description: Error detail on primary_language
        example: ""
        maxLength: 256
      realname:
        type: string
        description: Error detail on realname
        example: ""
        maxLength: 256
      response_code:
        type: integer
        description: Result of the request is success or not
        example: 0
        format: int64
      twitter_link:
        type: string
        description: Error detail on twitter_link
        example: ""
        maxLength: 256
    example:
      avatar_image: ""
      biography: ""
      categories: ""
      cover_photo: ""
      detail: All userdata is processed
      facebook_link: ""
      location: ""
      native_currency: ""
      primary_language: ""
      realname: ""
      response_code: 0
      twitter_link: ""
    required:
    - response_code
    - detail
securityDefinitions:
  api_key_header_Authorization:
    type: apiKey
    description: Art Owner's passphrase to authenticate
    name: Authorization
    in: header
