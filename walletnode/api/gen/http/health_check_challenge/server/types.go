// Code generated by goa v3.15.0, DO NOT EDIT.
//
// HealthCheckChallenge HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	healthcheckchallenge "github.com/pastelnetwork/gonode/walletnode/api/gen/health_check_challenge"
	healthcheckchallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/health_check_challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// GetSummaryStatsResponseBody is the type of the "HealthCheckChallenge"
// service "getSummaryStats" endpoint HTTP response body.
type GetSummaryStatsResponseBody struct {
	// HCSummaryStats represents health check challenge summary of metrics stats
	HcSummaryStats *HCSummaryStatsResponseBody `form:"hc_summary_stats" json:"hc_summary_stats" xml:"hc_summary_stats"`
}

// GetSummaryStatsUnauthorizedResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "Unauthorized" error.
type GetSummaryStatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsBadRequestResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "BadRequest" error.
type GetSummaryStatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsNotFoundResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "NotFound" error.
type GetSummaryStatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsInternalServerErrorResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "InternalServerError" error.
type GetSummaryStatsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HCSummaryStatsResponseBody is used to define fields on response body types.
type HCSummaryStatsResponseBody struct {
	// Total number of challenges issued
	TotalChallengesIssued int `form:"total_challenges_issued" json:"total_challenges_issued" xml:"total_challenges_issued"`
	// Total number of challenges processed by the recipient node
	TotalChallengesProcessedByRecipient int `form:"total_challenges_processed_by_recipient" json:"total_challenges_processed_by_recipient" xml:"total_challenges_processed_by_recipient"`
	// Total number of challenges evaluated by the challenger node
	TotalChallengesEvaluatedByChallenger int `form:"total_challenges_evaluated_by_challenger" json:"total_challenges_evaluated_by_challenger" xml:"total_challenges_evaluated_by_challenger"`
	// Total number of challenges verified by observers
	TotalChallengesVerified int `form:"total_challenges_verified" json:"total_challenges_verified" xml:"total_challenges_verified"`
	// challenges failed due to slow-responses evaluated by observers
	NoOfSlowResponsesObservedByObservers int `form:"no_of_slow_responses_observed_by_observers" json:"no_of_slow_responses_observed_by_observers" xml:"no_of_slow_responses_observed_by_observers"`
	// challenges failed due to invalid signatures evaluated by observers
	NoOfInvalidSignaturesObservedByObservers int `form:"no_of_invalid_signatures_observed_by_observers" json:"no_of_invalid_signatures_observed_by_observers" xml:"no_of_invalid_signatures_observed_by_observers"`
	// challenges failed due to invalid evaluation evaluated by observers
	NoOfInvalidEvaluationObservedByObservers int `form:"no_of_invalid_evaluation_observed_by_observers" json:"no_of_invalid_evaluation_observed_by_observers" xml:"no_of_invalid_evaluation_observed_by_observers"`
}

// NewGetSummaryStatsResponseBody builds the HTTP response body from the result
// of the "getSummaryStats" endpoint of the "HealthCheckChallenge" service.
func NewGetSummaryStatsResponseBody(res *healthcheckchallengeviews.HcSummaryStatsResultView) *GetSummaryStatsResponseBody {
	body := &GetSummaryStatsResponseBody{}
	if res.HcSummaryStats != nil {
		body.HcSummaryStats = marshalHealthcheckchallengeviewsHCSummaryStatsViewToHCSummaryStatsResponseBody(res.HcSummaryStats)
	}
	return body
}

// NewGetSummaryStatsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getSummaryStats" endpoint of the
// "HealthCheckChallenge" service.
func NewGetSummaryStatsUnauthorizedResponseBody(res *goa.ServiceError) *GetSummaryStatsUnauthorizedResponseBody {
	body := &GetSummaryStatsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsBadRequestResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "HealthCheckChallenge"
// service.
func NewGetSummaryStatsBadRequestResponseBody(res *goa.ServiceError) *GetSummaryStatsBadRequestResponseBody {
	body := &GetSummaryStatsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsNotFoundResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "HealthCheckChallenge"
// service.
func NewGetSummaryStatsNotFoundResponseBody(res *goa.ServiceError) *GetSummaryStatsNotFoundResponseBody {
	body := &GetSummaryStatsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getSummaryStats" endpoint of the
// "HealthCheckChallenge" service.
func NewGetSummaryStatsInternalServerErrorResponseBody(res *goa.ServiceError) *GetSummaryStatsInternalServerErrorResponseBody {
	body := &GetSummaryStatsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsPayload builds a HealthCheckChallenge service
// getSummaryStats endpoint payload.
func NewGetSummaryStatsPayload(from *string, to *string, pid string, key string) *healthcheckchallenge.GetSummaryStatsPayload {
	v := &healthcheckchallenge.GetSummaryStatsPayload{}
	v.From = from
	v.To = to
	v.Pid = pid
	v.Key = key

	return v
}
