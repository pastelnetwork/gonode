// Code generated by goa v3.15.0, DO NOT EDIT.
//
// HealthCheckChallenge HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	healthcheckchallenge "github.com/pastelnetwork/gonode/walletnode/api/gen/health_check_challenge"
	healthcheckchallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/health_check_challenge/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetSummaryStatsRequest instantiates a HTTP request object with method
// and path set to call the "HealthCheckChallenge" service "getSummaryStats"
// endpoint
func (c *Client) BuildGetSummaryStatsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSummaryStatsHealthCheckChallengePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("HealthCheckChallenge", "getSummaryStats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSummaryStatsRequest returns an encoder for requests sent to the
// HealthCheckChallenge getSummaryStats server.
func EncodeGetSummaryStatsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*healthcheckchallenge.GetSummaryStatsPayload)
		if !ok {
			return goahttp.ErrInvalidType("HealthCheckChallenge", "getSummaryStats", "*healthcheckchallenge.GetSummaryStatsPayload", v)
		}
		{
			head := p.Key
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		if p.From != nil {
			values.Add("from", *p.From)
		}
		if p.To != nil {
			values.Add("to", *p.To)
		}
		values.Add("pid", p.Pid)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetSummaryStatsResponse returns a decoder for responses returned by
// the HealthCheckChallenge getSummaryStats endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetSummaryStatsResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetSummaryStatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSummaryStatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("HealthCheckChallenge", "getSummaryStats", err)
			}
			p := NewGetSummaryStatsHcSummaryStatsResultOK(&body)
			view := "default"
			vres := &healthcheckchallengeviews.HcSummaryStatsResult{Projected: p, View: view}
			if err = healthcheckchallengeviews.ValidateHcSummaryStatsResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("HealthCheckChallenge", "getSummaryStats", err)
			}
			res := healthcheckchallenge.NewHcSummaryStatsResult(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetSummaryStatsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("HealthCheckChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("HealthCheckChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body GetSummaryStatsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("HealthCheckChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("HealthCheckChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetSummaryStatsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("HealthCheckChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("HealthCheckChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetSummaryStatsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("HealthCheckChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("HealthCheckChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("HealthCheckChallenge", "getSummaryStats", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHCSummaryStatsResponseBodyToHealthcheckchallengeviewsHCSummaryStatsView
// builds a value of type *healthcheckchallengeviews.HCSummaryStatsView from a
// value of type *HCSummaryStatsResponseBody.
func unmarshalHCSummaryStatsResponseBodyToHealthcheckchallengeviewsHCSummaryStatsView(v *HCSummaryStatsResponseBody) *healthcheckchallengeviews.HCSummaryStatsView {
	res := &healthcheckchallengeviews.HCSummaryStatsView{
		TotalChallengesIssued:                    v.TotalChallengesIssued,
		TotalChallengesProcessedByRecipient:      v.TotalChallengesProcessedByRecipient,
		TotalChallengesEvaluatedByChallenger:     v.TotalChallengesEvaluatedByChallenger,
		TotalChallengesVerified:                  v.TotalChallengesVerified,
		NoOfSlowResponsesObservedByObservers:     v.NoOfSlowResponsesObservedByObservers,
		NoOfInvalidSignaturesObservedByObservers: v.NoOfInvalidSignaturesObservedByObservers,
		NoOfInvalidEvaluationObservedByObservers: v.NoOfInvalidEvaluationObservedByObservers,
	}

	return res
}
