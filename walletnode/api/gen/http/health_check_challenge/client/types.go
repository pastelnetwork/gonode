// Code generated by goa v3.15.0, DO NOT EDIT.
//
// HealthCheckChallenge HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	healthcheckchallenge "github.com/pastelnetwork/gonode/walletnode/api/gen/health_check_challenge"
	healthcheckchallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/health_check_challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// GetSummaryStatsResponseBody is the type of the "HealthCheckChallenge"
// service "getSummaryStats" endpoint HTTP response body.
type GetSummaryStatsResponseBody struct {
	// HCSummaryStats represents health check challenge summary of metrics stats
	HcSummaryStats *HCSummaryStatsResponseBody `form:"hc_summary_stats,omitempty" json:"hc_summary_stats,omitempty" xml:"hc_summary_stats,omitempty"`
}

// GetDetailedLogsResponseBody is the type of the "HealthCheckChallenge"
// service "getDetailedLogs" endpoint HTTP response body.
type GetDetailedLogsResponseBody []*HcDetailedLogsMessageResponse

// GetSummaryStatsUnauthorizedResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "Unauthorized" error.
type GetSummaryStatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsBadRequestResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "BadRequest" error.
type GetSummaryStatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsNotFoundResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "NotFound" error.
type GetSummaryStatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsInternalServerErrorResponseBody is the type of the
// "HealthCheckChallenge" service "getSummaryStats" endpoint HTTP response body
// for the "InternalServerError" error.
type GetSummaryStatsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsUnauthorizedResponseBody is the type of the
// "HealthCheckChallenge" service "getDetailedLogs" endpoint HTTP response body
// for the "Unauthorized" error.
type GetDetailedLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsBadRequestResponseBody is the type of the
// "HealthCheckChallenge" service "getDetailedLogs" endpoint HTTP response body
// for the "BadRequest" error.
type GetDetailedLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsNotFoundResponseBody is the type of the
// "HealthCheckChallenge" service "getDetailedLogs" endpoint HTTP response body
// for the "NotFound" error.
type GetDetailedLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsInternalServerErrorResponseBody is the type of the
// "HealthCheckChallenge" service "getDetailedLogs" endpoint HTTP response body
// for the "InternalServerError" error.
type GetDetailedLogsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HCSummaryStatsResponseBody is used to define fields on response body types.
type HCSummaryStatsResponseBody struct {
	// Total number of challenges issued
	TotalChallengesIssued *int `form:"total_challenges_issued,omitempty" json:"total_challenges_issued,omitempty" xml:"total_challenges_issued,omitempty"`
	// Total number of challenges processed by the recipient node
	TotalChallengesProcessedByRecipient *int `form:"total_challenges_processed_by_recipient,omitempty" json:"total_challenges_processed_by_recipient,omitempty" xml:"total_challenges_processed_by_recipient,omitempty"`
	// Total number of challenges evaluated by the challenger node
	TotalChallengesEvaluatedByChallenger *int `form:"total_challenges_evaluated_by_challenger,omitempty" json:"total_challenges_evaluated_by_challenger,omitempty" xml:"total_challenges_evaluated_by_challenger,omitempty"`
	// Total number of challenges verified by observers
	TotalChallengesVerified *int `form:"total_challenges_verified,omitempty" json:"total_challenges_verified,omitempty" xml:"total_challenges_verified,omitempty"`
	// challenges failed due to slow-responses evaluated by observers
	NoOfSlowResponsesObservedByObservers *int `form:"no_of_slow_responses_observed_by_observers,omitempty" json:"no_of_slow_responses_observed_by_observers,omitempty" xml:"no_of_slow_responses_observed_by_observers,omitempty"`
	// challenges failed due to invalid signatures evaluated by observers
	NoOfInvalidSignaturesObservedByObservers *int `form:"no_of_invalid_signatures_observed_by_observers,omitempty" json:"no_of_invalid_signatures_observed_by_observers,omitempty" xml:"no_of_invalid_signatures_observed_by_observers,omitempty"`
	// challenges failed due to invalid evaluation evaluated by observers
	NoOfInvalidEvaluationObservedByObservers *int `form:"no_of_invalid_evaluation_observed_by_observers,omitempty" json:"no_of_invalid_evaluation_observed_by_observers,omitempty" xml:"no_of_invalid_evaluation_observed_by_observers,omitempty"`
}

// HcDetailedLogsMessageResponse is used to define fields on response body
// types.
type HcDetailedLogsMessageResponse struct {
	// ID of the challenge
	ChallengeID *string `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	// type of the message
	MessageType *string `form:"message_type,omitempty" json:"message_type,omitempty" xml:"message_type,omitempty"`
	// ID of the sender's node
	SenderID *string `form:"sender_id,omitempty" json:"sender_id,omitempty" xml:"sender_id,omitempty"`
	// signature of the sender
	SenderSignature *string `form:"sender_signature,omitempty" json:"sender_signature,omitempty" xml:"sender_signature,omitempty"`
	// ID of the challenger
	ChallengerID *string `form:"challenger_id,omitempty" json:"challenger_id,omitempty" xml:"challenger_id,omitempty"`
	// Challenge data
	Challenge *HCChallengeDataResponse `form:"challenge,omitempty" json:"challenge,omitempty" xml:"challenge,omitempty"`
	// List of observer IDs
	Observers []string `form:"observers,omitempty" json:"observers,omitempty" xml:"observers,omitempty"`
	// ID of the recipient
	RecipientID *string `form:"recipient_id,omitempty" json:"recipient_id,omitempty" xml:"recipient_id,omitempty"`
	// Response data
	Response *HCResponseDataResponse `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
	// Challenger evaluation data
	ChallengerEvaluation *HCEvaluationDataResponse `form:"challenger_evaluation,omitempty" json:"challenger_evaluation,omitempty" xml:"challenger_evaluation,omitempty"`
	// Observer evaluation data
	ObserverEvaluation *HCObserverEvaluationDataResponse `form:"observer_evaluation,omitempty" json:"observer_evaluation,omitempty" xml:"observer_evaluation,omitempty"`
}

// HCChallengeDataResponse is used to define fields on response body types.
type HCChallengeDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// Timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// HCResponseDataResponse is used to define fields on response body types.
type HCResponseDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// Timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// HCEvaluationDataResponse is used to define fields on response body types.
type HCEvaluationDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// Timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// IsVerified
	IsVerified *bool `form:"is_verified,omitempty" json:"is_verified,omitempty" xml:"is_verified,omitempty"`
}

// HCObserverEvaluationDataResponse is used to define fields on response body
// types.
type HCObserverEvaluationDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// IsChallengeTimestampOK
	IsChallengeTimestampOK *bool `form:"is_challenge_timestamp_ok,omitempty" json:"is_challenge_timestamp_ok,omitempty" xml:"is_challenge_timestamp_ok,omitempty"`
	// IsProcessTimestampOK
	IsProcessTimestampOK *bool `form:"is_process_timestamp_ok,omitempty" json:"is_process_timestamp_ok,omitempty" xml:"is_process_timestamp_ok,omitempty"`
	// IsEvaluationTimestampOK
	IsEvaluationTimestampOK *bool `form:"is_evaluation_timestamp_ok,omitempty" json:"is_evaluation_timestamp_ok,omitempty" xml:"is_evaluation_timestamp_ok,omitempty"`
	// IsRecipientSignatureOK
	IsRecipientSignatureOK *bool `form:"is_recipient_signature_ok,omitempty" json:"is_recipient_signature_ok,omitempty" xml:"is_recipient_signature_ok,omitempty"`
	// IsChallengerSignatureOK
	IsChallengerSignatureOK *bool `form:"is_challenger_signature_ok,omitempty" json:"is_challenger_signature_ok,omitempty" xml:"is_challenger_signature_ok,omitempty"`
	// IsEvaluationResultOK
	IsEvaluationResultOK *bool `form:"is_evaluation_result_ok,omitempty" json:"is_evaluation_result_ok,omitempty" xml:"is_evaluation_result_ok,omitempty"`
	// Timestamp
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

// NewGetSummaryStatsHcSummaryStatsResultOK builds a "HealthCheckChallenge"
// service "getSummaryStats" endpoint result from a HTTP "OK" response.
func NewGetSummaryStatsHcSummaryStatsResultOK(body *GetSummaryStatsResponseBody) *healthcheckchallengeviews.HcSummaryStatsResultView {
	v := &healthcheckchallengeviews.HcSummaryStatsResultView{}
	v.HcSummaryStats = unmarshalHCSummaryStatsResponseBodyToHealthcheckchallengeviewsHCSummaryStatsView(body.HcSummaryStats)

	return v
}

// NewGetSummaryStatsUnauthorized builds a HealthCheckChallenge service
// getSummaryStats endpoint Unauthorized error.
func NewGetSummaryStatsUnauthorized(body *GetSummaryStatsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsBadRequest builds a HealthCheckChallenge service
// getSummaryStats endpoint BadRequest error.
func NewGetSummaryStatsBadRequest(body *GetSummaryStatsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsNotFound builds a HealthCheckChallenge service
// getSummaryStats endpoint NotFound error.
func NewGetSummaryStatsNotFound(body *GetSummaryStatsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsInternalServerError builds a HealthCheckChallenge service
// getSummaryStats endpoint InternalServerError error.
func NewGetSummaryStatsInternalServerError(body *GetSummaryStatsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsHcDetailedLogsMessageOK builds a "HealthCheckChallenge"
// service "getDetailedLogs" endpoint result from a HTTP "OK" response.
func NewGetDetailedLogsHcDetailedLogsMessageOK(body []*HcDetailedLogsMessageResponse) []*healthcheckchallenge.HcDetailedLogsMessage {
	v := make([]*healthcheckchallenge.HcDetailedLogsMessage, len(body))
	for i, val := range body {
		v[i] = unmarshalHcDetailedLogsMessageResponseToHealthcheckchallengeHcDetailedLogsMessage(val)
	}

	return v
}

// NewGetDetailedLogsUnauthorized builds a HealthCheckChallenge service
// getDetailedLogs endpoint Unauthorized error.
func NewGetDetailedLogsUnauthorized(body *GetDetailedLogsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsBadRequest builds a HealthCheckChallenge service
// getDetailedLogs endpoint BadRequest error.
func NewGetDetailedLogsBadRequest(body *GetDetailedLogsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsNotFound builds a HealthCheckChallenge service
// getDetailedLogs endpoint NotFound error.
func NewGetDetailedLogsNotFound(body *GetDetailedLogsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsInternalServerError builds a HealthCheckChallenge service
// getDetailedLogs endpoint InternalServerError error.
func NewGetDetailedLogsInternalServerError(body *GetDetailedLogsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetSummaryStatsUnauthorizedResponseBody runs the validations defined
// on getSummaryStats_Unauthorized_response_body
func ValidateGetSummaryStatsUnauthorizedResponseBody(body *GetSummaryStatsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsBadRequestResponseBody runs the validations defined
// on getSummaryStats_BadRequest_response_body
func ValidateGetSummaryStatsBadRequestResponseBody(body *GetSummaryStatsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsNotFoundResponseBody runs the validations defined on
// getSummaryStats_NotFound_response_body
func ValidateGetSummaryStatsNotFoundResponseBody(body *GetSummaryStatsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsInternalServerErrorResponseBody runs the validations
// defined on getSummaryStats_InternalServerError_response_body
func ValidateGetSummaryStatsInternalServerErrorResponseBody(body *GetSummaryStatsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsUnauthorizedResponseBody runs the validations defined
// on getDetailedLogs_Unauthorized_response_body
func ValidateGetDetailedLogsUnauthorizedResponseBody(body *GetDetailedLogsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsBadRequestResponseBody runs the validations defined
// on getDetailedLogs_BadRequest_response_body
func ValidateGetDetailedLogsBadRequestResponseBody(body *GetDetailedLogsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsNotFoundResponseBody runs the validations defined on
// getDetailedLogs_NotFound_response_body
func ValidateGetDetailedLogsNotFoundResponseBody(body *GetDetailedLogsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsInternalServerErrorResponseBody runs the validations
// defined on getDetailedLogs_InternalServerError_response_body
func ValidateGetDetailedLogsInternalServerErrorResponseBody(body *GetDetailedLogsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHCSummaryStatsResponseBody runs the validations defined on
// HCSummaryStatsResponseBody
func ValidateHCSummaryStatsResponseBody(body *HCSummaryStatsResponseBody) (err error) {
	if body.TotalChallengesIssued == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_issued", "body"))
	}
	if body.TotalChallengesProcessedByRecipient == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_processed_by_recipient", "body"))
	}
	if body.TotalChallengesEvaluatedByChallenger == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_evaluated_by_challenger", "body"))
	}
	if body.TotalChallengesVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_verified", "body"))
	}
	if body.NoOfSlowResponsesObservedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("no_of_slow_responses_observed_by_observers", "body"))
	}
	if body.NoOfInvalidSignaturesObservedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("no_of_invalid_signatures_observed_by_observers", "body"))
	}
	if body.NoOfInvalidEvaluationObservedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("no_of_invalid_evaluation_observed_by_observers", "body"))
	}
	return
}

// ValidateHcDetailedLogsMessageResponse runs the validations defined on
// Hc_detailed_logsMessageResponse
func ValidateHcDetailedLogsMessageResponse(body *HcDetailedLogsMessageResponse) (err error) {
	if body.ChallengeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge_id", "body"))
	}
	if body.MessageType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message_type", "body"))
	}
	if body.SenderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sender_id", "body"))
	}
	if body.ChallengerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenger_id", "body"))
	}
	if body.Observers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("observers", "body"))
	}
	if body.RecipientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("recipient_id", "body"))
	}
	if body.Challenge != nil {
		if err2 := ValidateHCChallengeDataResponse(body.Challenge); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Response != nil {
		if err2 := ValidateHCResponseDataResponse(body.Response); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ChallengerEvaluation != nil {
		if err2 := ValidateHCEvaluationDataResponse(body.ChallengerEvaluation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.ObserverEvaluation != nil {
		if err2 := ValidateHCObserverEvaluationDataResponse(body.ObserverEvaluation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateHCChallengeDataResponse runs the validations defined on
// HCChallengeDataResponse
func ValidateHCChallengeDataResponse(body *HCChallengeDataResponse) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	return
}

// ValidateHCResponseDataResponse runs the validations defined on
// HCResponseDataResponse
func ValidateHCResponseDataResponse(body *HCResponseDataResponse) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	return
}

// ValidateHCEvaluationDataResponse runs the validations defined on
// HCEvaluationDataResponse
func ValidateHCEvaluationDataResponse(body *HCEvaluationDataResponse) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.IsVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_verified", "body"))
	}
	return
}

// ValidateHCObserverEvaluationDataResponse runs the validations defined on
// HCObserverEvaluationDataResponse
func ValidateHCObserverEvaluationDataResponse(body *HCObserverEvaluationDataResponse) (err error) {
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.IsChallengeTimestampOK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_challenge_timestamp_ok", "body"))
	}
	if body.IsProcessTimestampOK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_process_timestamp_ok", "body"))
	}
	if body.IsEvaluationTimestampOK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_evaluation_timestamp_ok", "body"))
	}
	if body.IsRecipientSignatureOK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_recipient_signature_ok", "body"))
	}
	if body.IsChallengerSignatureOK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_challenger_signature_ok", "body"))
	}
	if body.IsEvaluationResultOK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_evaluation_result_ok", "body"))
	}
	return
}
