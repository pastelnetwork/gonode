// Code generated by goa v3.15.0, DO NOT EDIT.
//
// cascade HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"unicode/utf8"

	cascade "github.com/pastelnetwork/gonode/walletnode/api/gen/cascade"
	cascadeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/cascade/views"
	goa "goa.design/goa/v3/pkg"
)

// UploadAssetRequestBody is the type of the "cascade" service "uploadAsset"
// endpoint HTTP request body.
type UploadAssetRequestBody struct {
	// File to upload
	Bytes []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
	// For internal use
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// For internal use
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// For internal use
	Size *int64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
}

// UploadAssetV2RequestBody is the type of the "cascade" service
// "uploadAssetV2" endpoint HTTP request body.
type UploadAssetV2RequestBody struct {
	// File to upload
	Bytes []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
	// -For internal use-
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// For internal use
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// For internal use
	Size *int64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
}

// StartProcessingRequestBody is the type of the "cascade" service
// "startProcessing" endpoint HTTP request body.
type StartProcessingRequestBody struct {
	// Burn transaction ID
	BurnTxid *string `form:"burn_txid,omitempty" json:"burn_txid,omitempty" xml:"burn_txid,omitempty"`
	// List of Burn transaction IDs for multi-volume registration
	BurnTxids []string `form:"burn_txids,omitempty" json:"burn_txids,omitempty" xml:"burn_txids,omitempty"`
	// App PastelID
	AppPastelID *string `form:"app_pastelid,omitempty" json:"app_pastelid,omitempty" xml:"app_pastelid,omitempty"`
	// To make it publicly accessible
	MakePubliclyAccessible *bool `form:"make_publicly_accessible,omitempty" json:"make_publicly_accessible,omitempty" xml:"make_publicly_accessible,omitempty"`
	// Address to use for registration fee
	SpendableAddress *string `form:"spendable_address,omitempty" json:"spendable_address,omitempty" xml:"spendable_address,omitempty"`
}

// RestoreRequestBody is the type of the "cascade" service "restore" endpoint
// HTTP request body.
type RestoreRequestBody struct {
	// App PastelID
	AppPastelID *string `form:"app_pastelId,omitempty" json:"app_pastelId,omitempty" xml:"app_pastelId,omitempty"`
	// To make it publicly accessible
	MakePubliclyAccessible *bool `form:"make_publicly_accessible,omitempty" json:"make_publicly_accessible,omitempty" xml:"make_publicly_accessible,omitempty"`
	// Address to use for registration fee
	SpendableAddress *string `form:"spendable_address,omitempty" json:"spendable_address,omitempty" xml:"spendable_address,omitempty"`
}

// UploadAssetResponseBody is the type of the "cascade" service "uploadAsset"
// endpoint HTTP response body.
type UploadAssetResponseBody struct {
	// Uploaded file ID
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
	// File expiration
	ExpiresIn string `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// Estimated fee
	TotalEstimatedFee float64 `form:"total_estimated_fee" json:"total_estimated_fee" xml:"total_estimated_fee"`
	// The amount that's required to be preburned
	RequiredPreburnAmount float64 `form:"required_preburn_amount" json:"required_preburn_amount" xml:"required_preburn_amount"`
}

// UploadAssetV2ResponseBody is the type of the "cascade" service
// "uploadAssetV2" endpoint HTTP response body.
type UploadAssetV2ResponseBody struct {
	// Uploaded file ID
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
	// Estimated fee
	TotalEstimatedFee float64 `form:"total_estimated_fee" json:"total_estimated_fee" xml:"total_estimated_fee"`
	// The amounts that's required to be preburned - one per transaction
	RequiredPreburnTransactionAmounts []float64 `form:"required_preburn_transaction_amounts,omitempty" json:"required_preburn_transaction_amounts,omitempty" xml:"required_preburn_transaction_amounts,omitempty"`
}

// StartProcessingResponseBody is the type of the "cascade" service
// "startProcessing" endpoint HTTP response body.
type StartProcessingResponseBody struct {
	// Task ID of processing task
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// RegisterTaskStateResponseBody is the type of the "cascade" service
// "registerTaskState" endpoint HTTP response body.
type RegisterTaskStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// GetTaskHistoryResponseBody is the type of the "cascade" service
// "getTaskHistory" endpoint HTTP response body.
type GetTaskHistoryResponseBody []*TaskHistoryResponse

// DownloadResponseBody is the type of the "cascade" service "download"
// endpoint HTTP response body.
type DownloadResponseBody struct {
	// File path
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
}

// RegistrationDetailsResponseBody is the type of the "cascade" service
// "registrationDetails" endpoint HTTP response body.
type RegistrationDetailsResponseBody struct {
	// List of files
	Files []*FileResponseBody `form:"files" json:"files" xml:"files"`
}

// RestoreResponseBody is the type of the "cascade" service "restore" endpoint
// HTTP response body.
type RestoreResponseBody struct {
	// Total volumes of selected file
	TotalVolumes int `form:"total_volumes" json:"total_volumes" xml:"total_volumes"`
	// Total registered volumes
	RegisteredVolumes int `form:"registered_volumes" json:"registered_volumes" xml:"registered_volumes"`
	// Total volumes with pending registration
	VolumesWithPendingRegistration int `form:"volumes_with_pending_registration" json:"volumes_with_pending_registration" xml:"volumes_with_pending_registration"`
	// Total volumes with in-progress registration
	VolumesRegistrationInProgress int `form:"volumes_registration_in_progress" json:"volumes_registration_in_progress" xml:"volumes_registration_in_progress"`
	// Total volumes that are activated
	ActivatedVolumes int `form:"activated_volumes" json:"activated_volumes" xml:"activated_volumes"`
	// Total volumes that are activated in restore process
	VolumesActivatedInRecoveryFlow int `form:"volumes_activated_in_recovery_flow" json:"volumes_activated_in_recovery_flow" xml:"volumes_activated_in_recovery_flow"`
}

// UploadAssetBadRequestResponseBody is the type of the "cascade" service
// "uploadAsset" endpoint HTTP response body for the "BadRequest" error.
type UploadAssetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadAssetInternalServerErrorResponseBody is the type of the "cascade"
// service "uploadAsset" endpoint HTTP response body for the
// "InternalServerError" error.
type UploadAssetInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadAssetV2BadRequestResponseBody is the type of the "cascade" service
// "uploadAssetV2" endpoint HTTP response body for the "BadRequest" error.
type UploadAssetV2BadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadAssetV2InternalServerErrorResponseBody is the type of the "cascade"
// service "uploadAssetV2" endpoint HTTP response body for the
// "InternalServerError" error.
type UploadAssetV2InternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartProcessingUnAuthorizedResponseBody is the type of the "cascade" service
// "startProcessing" endpoint HTTP response body for the "UnAuthorized" error.
type StartProcessingUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartProcessingBadRequestResponseBody is the type of the "cascade" service
// "startProcessing" endpoint HTTP response body for the "BadRequest" error.
type StartProcessingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartProcessingInternalServerErrorResponseBody is the type of the "cascade"
// service "startProcessing" endpoint HTTP response body for the
// "InternalServerError" error.
type StartProcessingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateNotFoundResponseBody is the type of the "cascade" service
// "registerTaskState" endpoint HTTP response body for the "NotFound" error.
type RegisterTaskStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateInternalServerErrorResponseBody is the type of the
// "cascade" service "registerTaskState" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTaskStateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTaskHistoryNotFoundResponseBody is the type of the "cascade" service
// "getTaskHistory" endpoint HTTP response body for the "NotFound" error.
type GetTaskHistoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTaskHistoryInternalServerErrorResponseBody is the type of the "cascade"
// service "getTaskHistory" endpoint HTTP response body for the
// "InternalServerError" error.
type GetTaskHistoryInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadUnAuthorizedResponseBody is the type of the "cascade" service
// "download" endpoint HTTP response body for the "UnAuthorized" error.
type DownloadUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadNotFoundResponseBody is the type of the "cascade" service "download"
// endpoint HTTP response body for the "NotFound" error.
type DownloadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadInternalServerErrorResponseBody is the type of the "cascade" service
// "download" endpoint HTTP response body for the "InternalServerError" error.
type DownloadInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegistrationDetailsUnAuthorizedResponseBody is the type of the "cascade"
// service "registrationDetails" endpoint HTTP response body for the
// "UnAuthorized" error.
type RegistrationDetailsUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegistrationDetailsBadRequestResponseBody is the type of the "cascade"
// service "registrationDetails" endpoint HTTP response body for the
// "BadRequest" error.
type RegistrationDetailsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegistrationDetailsInternalServerErrorResponseBody is the type of the
// "cascade" service "registrationDetails" endpoint HTTP response body for the
// "InternalServerError" error.
type RegistrationDetailsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreUnAuthorizedResponseBody is the type of the "cascade" service
// "restore" endpoint HTTP response body for the "UnAuthorized" error.
type RestoreUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreBadRequestResponseBody is the type of the "cascade" service "restore"
// endpoint HTTP response body for the "BadRequest" error.
type RestoreBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RestoreInternalServerErrorResponseBody is the type of the "cascade" service
// "restore" endpoint HTTP response body for the "InternalServerError" error.
type RestoreInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TaskHistoryResponse is used to define fields on response body types.
type TaskHistoryResponse struct {
	// Timestamp of the status creation
	Timestamp *string `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// past status string
	Status string `form:"status" json:"status" xml:"status"`
	// message string (if any)
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// details of the status
	Details *DetailsResponse `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
}

// DetailsResponse is used to define fields on response body types.
type DetailsResponse struct {
	// details regarding the status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// important fields regarding status history
	Fields map[string]any `form:"fields,omitempty" json:"fields,omitempty" xml:"fields,omitempty"`
}

// FileResponseBody is used to define fields on response body types.
type FileResponseBody struct {
	// File ID
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
	// Upload Timestamp in datetime format
	UploadTimestamp string `form:"upload_timestamp" json:"upload_timestamp" xml:"upload_timestamp"`
	// Index of the file
	FileIndex *string `form:"file_index,omitempty" json:"file_index,omitempty" xml:"file_index,omitempty"`
	// Base File ID
	BaseFileID string `form:"base_file_id" json:"base_file_id" xml:"base_file_id"`
	// Task ID
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
	// Registration Transaction ID
	RegTxid *string `form:"reg_txid,omitempty" json:"reg_txid,omitempty" xml:"reg_txid,omitempty"`
	// Activation Transaction ID
	ActivationTxid *string `form:"activation_txid,omitempty" json:"activation_txid,omitempty" xml:"activation_txid,omitempty"`
	// Required Burn Transaction Amount
	ReqBurnTxnAmount float64 `form:"req_burn_txn_amount" json:"req_burn_txn_amount" xml:"req_burn_txn_amount"`
	// Burn Transaction ID
	BurnTxnID *string `form:"burn_txn_id,omitempty" json:"burn_txn_id,omitempty" xml:"burn_txn_id,omitempty"`
	// Required Amount
	ReqAmount float64 `form:"req_amount" json:"req_amount" xml:"req_amount"`
	// Indicates if the process is concluded
	IsConcluded *bool `form:"is_concluded,omitempty" json:"is_concluded,omitempty" xml:"is_concluded,omitempty"`
	// Cascade Metadata Ticket ID
	CascadeMetadataTicketID string `form:"cascade_metadata_ticket_id" json:"cascade_metadata_ticket_id" xml:"cascade_metadata_ticket_id"`
	// UUID Key
	UUIDKey *string `form:"uuid_key,omitempty" json:"uuid_key,omitempty" xml:"uuid_key,omitempty"`
	// Hash of the Original Big File
	HashOfOriginalBigFile string `form:"hash_of_original_big_file" json:"hash_of_original_big_file" xml:"hash_of_original_big_file"`
	// Name of the Original Big File with Extension
	NameOfOriginalBigFileWithExt string `form:"name_of_original_big_file_with_ext" json:"name_of_original_big_file_with_ext" xml:"name_of_original_big_file_with_ext"`
	// Size of the Original Big File
	SizeOfOriginalBigFile float64 `form:"size_of_original_big_file" json:"size_of_original_big_file" xml:"size_of_original_big_file"`
	// Start Block
	StartBlock *int32 `form:"start_block,omitempty" json:"start_block,omitempty" xml:"start_block,omitempty"`
	// Done Block
	DoneBlock *int `form:"done_block,omitempty" json:"done_block,omitempty" xml:"done_block,omitempty"`
	// List of registration attempts
	RegistrationAttempts []*RegistrationAttemptResponseBody `form:"registration_attempts" json:"registration_attempts" xml:"registration_attempts"`
	// List of activation attempts
	ActivationAttempts []*ActivationAttemptResponseBody `form:"activation_attempts" json:"activation_attempts" xml:"activation_attempts"`
}

// RegistrationAttemptResponseBody is used to define fields on response body
// types.
type RegistrationAttemptResponseBody struct {
	// ID
	ID int `form:"id" json:"id" xml:"id"`
	// File ID
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
	// Registration Started At in datetime format
	RegStartedAt string `form:"reg_started_at" json:"reg_started_at" xml:"reg_started_at"`
	// Processor SNS
	ProcessorSns *string `form:"processor_sns,omitempty" json:"processor_sns,omitempty" xml:"processor_sns,omitempty"`
	// Finished At in datetime format
	FinishedAt string `form:"finished_at" json:"finished_at" xml:"finished_at"`
	// Indicates if the registration was successful
	IsSuccessful *bool `form:"is_successful,omitempty" json:"is_successful,omitempty" xml:"is_successful,omitempty"`
	// Error Message
	ErrorMessage *string `form:"error_message,omitempty" json:"error_message,omitempty" xml:"error_message,omitempty"`
}

// ActivationAttemptResponseBody is used to define fields on response body
// types.
type ActivationAttemptResponseBody struct {
	// ID
	ID int `form:"id" json:"id" xml:"id"`
	// File ID
	FileID string `form:"file_id" json:"file_id" xml:"file_id"`
	// Activation Attempt At in datetime format
	ActivationAttemptAt string `form:"activation_attempt_at" json:"activation_attempt_at" xml:"activation_attempt_at"`
	// Indicates if the activation was successful
	IsSuccessful *bool `form:"is_successful,omitempty" json:"is_successful,omitempty" xml:"is_successful,omitempty"`
	// Error Message
	ErrorMessage *string `form:"error_message,omitempty" json:"error_message,omitempty" xml:"error_message,omitempty"`
}

// NewUploadAssetResponseBody builds the HTTP response body from the result of
// the "uploadAsset" endpoint of the "cascade" service.
func NewUploadAssetResponseBody(res *cascadeviews.AssetView) *UploadAssetResponseBody {
	body := &UploadAssetResponseBody{
		FileID:            *res.FileID,
		ExpiresIn:         *res.ExpiresIn,
		TotalEstimatedFee: *res.TotalEstimatedFee,
	}
	if res.RequiredPreburnAmount != nil {
		body.RequiredPreburnAmount = *res.RequiredPreburnAmount
	}
	if res.RequiredPreburnAmount == nil {
		body.RequiredPreburnAmount = 1
	}
	return body
}

// NewUploadAssetV2ResponseBody builds the HTTP response body from the result
// of the "uploadAssetV2" endpoint of the "cascade" service.
func NewUploadAssetV2ResponseBody(res *cascadeviews.AssetV2View) *UploadAssetV2ResponseBody {
	body := &UploadAssetV2ResponseBody{
		FileID:            *res.FileID,
		TotalEstimatedFee: *res.TotalEstimatedFee,
	}
	if res.RequiredPreburnTransactionAmounts != nil {
		body.RequiredPreburnTransactionAmounts = make([]float64, len(res.RequiredPreburnTransactionAmounts))
		for i, val := range res.RequiredPreburnTransactionAmounts {
			body.RequiredPreburnTransactionAmounts[i] = val
		}
	}
	return body
}

// NewStartProcessingResponseBody builds the HTTP response body from the result
// of the "startProcessing" endpoint of the "cascade" service.
func NewStartProcessingResponseBody(res *cascadeviews.StartProcessingResultView) *StartProcessingResponseBody {
	body := &StartProcessingResponseBody{
		TaskID: *res.TaskID,
	}
	return body
}

// NewRegisterTaskStateResponseBody builds the HTTP response body from the
// result of the "registerTaskState" endpoint of the "cascade" service.
func NewRegisterTaskStateResponseBody(res *cascade.TaskState) *RegisterTaskStateResponseBody {
	body := &RegisterTaskStateResponseBody{
		Date:   res.Date,
		Status: res.Status,
	}
	return body
}

// NewGetTaskHistoryResponseBody builds the HTTP response body from the result
// of the "getTaskHistory" endpoint of the "cascade" service.
func NewGetTaskHistoryResponseBody(res []*cascade.TaskHistory) GetTaskHistoryResponseBody {
	body := make([]*TaskHistoryResponse, len(res))
	for i, val := range res {
		body[i] = marshalCascadeTaskHistoryToTaskHistoryResponse(val)
	}
	return body
}

// NewDownloadResponseBody builds the HTTP response body from the result of the
// "download" endpoint of the "cascade" service.
func NewDownloadResponseBody(res *cascade.FileDownloadResult) *DownloadResponseBody {
	body := &DownloadResponseBody{
		FileID: res.FileID,
	}
	return body
}

// NewRegistrationDetailsResponseBody builds the HTTP response body from the
// result of the "registrationDetails" endpoint of the "cascade" service.
func NewRegistrationDetailsResponseBody(res *cascadeviews.RegistrationView) *RegistrationDetailsResponseBody {
	body := &RegistrationDetailsResponseBody{}
	if res.Files != nil {
		body.Files = make([]*FileResponseBody, len(res.Files))
		for i, val := range res.Files {
			body.Files[i] = marshalCascadeviewsFileViewToFileResponseBody(val)
		}
	} else {
		body.Files = []*FileResponseBody{}
	}
	return body
}

// NewRestoreResponseBody builds the HTTP response body from the result of the
// "restore" endpoint of the "cascade" service.
func NewRestoreResponseBody(res *cascadeviews.RestoreFileView) *RestoreResponseBody {
	body := &RestoreResponseBody{
		TotalVolumes:                   *res.TotalVolumes,
		RegisteredVolumes:              *res.RegisteredVolumes,
		VolumesWithPendingRegistration: *res.VolumesWithPendingRegistration,
		VolumesRegistrationInProgress:  *res.VolumesRegistrationInProgress,
		ActivatedVolumes:               *res.ActivatedVolumes,
		VolumesActivatedInRecoveryFlow: *res.VolumesActivatedInRecoveryFlow,
	}
	return body
}

// NewUploadAssetBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadAsset" endpoint of the "cascade" service.
func NewUploadAssetBadRequestResponseBody(res *goa.ServiceError) *UploadAssetBadRequestResponseBody {
	body := &UploadAssetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadAssetInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "uploadAsset" endpoint of the "cascade" service.
func NewUploadAssetInternalServerErrorResponseBody(res *goa.ServiceError) *UploadAssetInternalServerErrorResponseBody {
	body := &UploadAssetInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadAssetV2BadRequestResponseBody builds the HTTP response body from
// the result of the "uploadAssetV2" endpoint of the "cascade" service.
func NewUploadAssetV2BadRequestResponseBody(res *goa.ServiceError) *UploadAssetV2BadRequestResponseBody {
	body := &UploadAssetV2BadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadAssetV2InternalServerErrorResponseBody builds the HTTP response
// body from the result of the "uploadAssetV2" endpoint of the "cascade"
// service.
func NewUploadAssetV2InternalServerErrorResponseBody(res *goa.ServiceError) *UploadAssetV2InternalServerErrorResponseBody {
	body := &UploadAssetV2InternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartProcessingUnAuthorizedResponseBody builds the HTTP response body
// from the result of the "startProcessing" endpoint of the "cascade" service.
func NewStartProcessingUnAuthorizedResponseBody(res *goa.ServiceError) *StartProcessingUnAuthorizedResponseBody {
	body := &StartProcessingUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartProcessingBadRequestResponseBody builds the HTTP response body from
// the result of the "startProcessing" endpoint of the "cascade" service.
func NewStartProcessingBadRequestResponseBody(res *goa.ServiceError) *StartProcessingBadRequestResponseBody {
	body := &StartProcessingBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartProcessingInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "startProcessing" endpoint of the "cascade"
// service.
func NewStartProcessingInternalServerErrorResponseBody(res *goa.ServiceError) *StartProcessingInternalServerErrorResponseBody {
	body := &StartProcessingInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateNotFoundResponseBody builds the HTTP response body from
// the result of the "registerTaskState" endpoint of the "cascade" service.
func NewRegisterTaskStateNotFoundResponseBody(res *goa.ServiceError) *RegisterTaskStateNotFoundResponseBody {
	body := &RegisterTaskStateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerTaskState" endpoint of the "cascade"
// service.
func NewRegisterTaskStateInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTaskStateInternalServerErrorResponseBody {
	body := &RegisterTaskStateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTaskHistoryNotFoundResponseBody builds the HTTP response body from the
// result of the "getTaskHistory" endpoint of the "cascade" service.
func NewGetTaskHistoryNotFoundResponseBody(res *goa.ServiceError) *GetTaskHistoryNotFoundResponseBody {
	body := &GetTaskHistoryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTaskHistoryInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getTaskHistory" endpoint of the "cascade"
// service.
func NewGetTaskHistoryInternalServerErrorResponseBody(res *goa.ServiceError) *GetTaskHistoryInternalServerErrorResponseBody {
	body := &GetTaskHistoryInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadUnAuthorizedResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "cascade" service.
func NewDownloadUnAuthorizedResponseBody(res *goa.ServiceError) *DownloadUnAuthorizedResponseBody {
	body := &DownloadUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadNotFoundResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "cascade" service.
func NewDownloadNotFoundResponseBody(res *goa.ServiceError) *DownloadNotFoundResponseBody {
	body := &DownloadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "download" endpoint of the "cascade" service.
func NewDownloadInternalServerErrorResponseBody(res *goa.ServiceError) *DownloadInternalServerErrorResponseBody {
	body := &DownloadInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegistrationDetailsUnAuthorizedResponseBody builds the HTTP response body
// from the result of the "registrationDetails" endpoint of the "cascade"
// service.
func NewRegistrationDetailsUnAuthorizedResponseBody(res *goa.ServiceError) *RegistrationDetailsUnAuthorizedResponseBody {
	body := &RegistrationDetailsUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegistrationDetailsBadRequestResponseBody builds the HTTP response body
// from the result of the "registrationDetails" endpoint of the "cascade"
// service.
func NewRegistrationDetailsBadRequestResponseBody(res *goa.ServiceError) *RegistrationDetailsBadRequestResponseBody {
	body := &RegistrationDetailsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegistrationDetailsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "registrationDetails" endpoint of the
// "cascade" service.
func NewRegistrationDetailsInternalServerErrorResponseBody(res *goa.ServiceError) *RegistrationDetailsInternalServerErrorResponseBody {
	body := &RegistrationDetailsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreUnAuthorizedResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "cascade" service.
func NewRestoreUnAuthorizedResponseBody(res *goa.ServiceError) *RestoreUnAuthorizedResponseBody {
	body := &RestoreUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreBadRequestResponseBody builds the HTTP response body from the
// result of the "restore" endpoint of the "cascade" service.
func NewRestoreBadRequestResponseBody(res *goa.ServiceError) *RestoreBadRequestResponseBody {
	body := &RestoreBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRestoreInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "restore" endpoint of the "cascade" service.
func NewRestoreInternalServerErrorResponseBody(res *goa.ServiceError) *RestoreInternalServerErrorResponseBody {
	body := &RestoreInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadAssetPayload builds a cascade service uploadAsset endpoint payload.
func NewUploadAssetPayload(body *UploadAssetRequestBody) *cascade.UploadAssetPayload {
	v := &cascade.UploadAssetPayload{
		Bytes:    body.Bytes,
		Filename: body.Filename,
		Hash:     body.Hash,
		Size:     body.Size,
	}

	return v
}

// NewUploadAssetV2Payload builds a cascade service uploadAssetV2 endpoint
// payload.
func NewUploadAssetV2Payload(body *UploadAssetV2RequestBody) *cascade.UploadAssetV2Payload {
	v := &cascade.UploadAssetV2Payload{
		Bytes:    body.Bytes,
		Filename: body.Filename,
		Hash:     body.Hash,
		Size:     body.Size,
	}

	return v
}

// NewStartProcessingPayload builds a cascade service startProcessing endpoint
// payload.
func NewStartProcessingPayload(body *StartProcessingRequestBody, fileID string, key string) *cascade.StartProcessingPayload {
	v := &cascade.StartProcessingPayload{
		BurnTxid:         body.BurnTxid,
		AppPastelID:      *body.AppPastelID,
		SpendableAddress: body.SpendableAddress,
	}
	if body.MakePubliclyAccessible != nil {
		v.MakePubliclyAccessible = *body.MakePubliclyAccessible
	}
	if body.BurnTxids != nil {
		v.BurnTxids = make([]string, len(body.BurnTxids))
		for i, val := range body.BurnTxids {
			v.BurnTxids[i] = val
		}
	}
	if body.MakePubliclyAccessible == nil {
		v.MakePubliclyAccessible = false
	}
	v.FileID = fileID
	v.Key = key

	return v
}

// NewRegisterTaskStatePayload builds a cascade service registerTaskState
// endpoint payload.
func NewRegisterTaskStatePayload(taskID string) *cascade.RegisterTaskStatePayload {
	v := &cascade.RegisterTaskStatePayload{}
	v.TaskID = taskID

	return v
}

// NewGetTaskHistoryPayload builds a cascade service getTaskHistory endpoint
// payload.
func NewGetTaskHistoryPayload(taskID string) *cascade.GetTaskHistoryPayload {
	v := &cascade.GetTaskHistoryPayload{}
	v.TaskID = taskID

	return v
}

// NewDownloadPayload builds a cascade service download endpoint payload.
func NewDownloadPayload(txid string, pid string, key string) *cascade.DownloadPayload {
	v := &cascade.DownloadPayload{}
	v.Txid = txid
	v.Pid = pid
	v.Key = key

	return v
}

// NewRegistrationDetailsPayload builds a cascade service registrationDetails
// endpoint payload.
func NewRegistrationDetailsPayload(baseFileID string) *cascade.RegistrationDetailsPayload {
	v := &cascade.RegistrationDetailsPayload{}
	v.BaseFileID = baseFileID

	return v
}

// NewRestorePayload builds a cascade service restore endpoint payload.
func NewRestorePayload(body *RestoreRequestBody, baseFileID string, key string) *cascade.RestorePayload {
	v := &cascade.RestorePayload{
		AppPastelID:      *body.AppPastelID,
		SpendableAddress: body.SpendableAddress,
	}
	if body.MakePubliclyAccessible != nil {
		v.MakePubliclyAccessible = *body.MakePubliclyAccessible
	}
	if body.MakePubliclyAccessible == nil {
		v.MakePubliclyAccessible = false
	}
	v.BaseFileID = baseFileID
	v.Key = key

	return v
}

// ValidateUploadAssetRequestBody runs the validations defined on
// UploadAssetRequestBody
func ValidateUploadAssetRequestBody(body *UploadAssetRequestBody) (err error) {
	if body.Bytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}

// ValidateUploadAssetV2RequestBody runs the validations defined on
// UploadAssetV2RequestBody
func ValidateUploadAssetV2RequestBody(body *UploadAssetV2RequestBody) (err error) {
	if body.Bytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}

// ValidateStartProcessingRequestBody runs the validations defined on
// StartProcessingRequestBody
func ValidateStartProcessingRequestBody(body *StartProcessingRequestBody) (err error) {
	if body.AppPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("app_pastelid", "body"))
	}
	if body.BurnTxid != nil {
		if utf8.RuneCountInString(*body.BurnTxid) < 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.burn_txid", *body.BurnTxid, utf8.RuneCountInString(*body.BurnTxid), 64, true))
		}
	}
	if body.BurnTxid != nil {
		if utf8.RuneCountInString(*body.BurnTxid) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.burn_txid", *body.BurnTxid, utf8.RuneCountInString(*body.BurnTxid), 64, false))
		}
	}
	if body.AppPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.app_pastelid", *body.AppPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.AppPastelID != nil {
		if utf8.RuneCountInString(*body.AppPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", *body.AppPastelID, utf8.RuneCountInString(*body.AppPastelID), 86, true))
		}
	}
	if body.AppPastelID != nil {
		if utf8.RuneCountInString(*body.AppPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", *body.AppPastelID, utf8.RuneCountInString(*body.AppPastelID), 86, false))
		}
	}
	if body.SpendableAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", *body.SpendableAddress, "^[a-zA-Z0-9]+$"))
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, true))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, false))
		}
	}
	return
}

// ValidateRestoreRequestBody runs the validations defined on RestoreRequestBody
func ValidateRestoreRequestBody(body *RestoreRequestBody) (err error) {
	if body.AppPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("app_pastelId", "body"))
	}
	if body.AppPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.app_pastelId", *body.AppPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.AppPastelID != nil {
		if utf8.RuneCountInString(*body.AppPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelId", *body.AppPastelID, utf8.RuneCountInString(*body.AppPastelID), 86, true))
		}
	}
	if body.AppPastelID != nil {
		if utf8.RuneCountInString(*body.AppPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelId", *body.AppPastelID, utf8.RuneCountInString(*body.AppPastelID), 86, false))
		}
	}
	if body.SpendableAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", *body.SpendableAddress, "^[a-zA-Z0-9]+$"))
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, true))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, false))
		}
	}
	return
}
