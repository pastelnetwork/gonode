// Code generated by goa v3.5.3, DO NOT EDIT.
//
// sense HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	sense "github.com/pastelnetwork/gonode/walletnode/api/gen/sense"
	goa "goa.design/goa/v3/pkg"
)

// BuildUploadImagePayload builds the payload for the sense uploadImage
// endpoint from CLI flags.
func BuildUploadImagePayload(senseUploadImageBody string) (*sense.UploadImagePayload, error) {
	var err error
	var body UploadImageRequestBody
	{
		err = json.Unmarshal([]byte(senseUploadImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file\": \"UmVydW0gb21uaXMgcXVpIHF1byBldCBvZGlvLg==\"\n   }'")
		}
		if body.Bytes == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &sense.UploadImagePayload{
		Bytes:    body.Bytes,
		Filename: body.Filename,
	}

	return v, nil
}

// BuildActionDetailsPayload builds the payload for the sense actionDetails
// endpoint from CLI flags.
func BuildActionDetailsPayload(senseActionDetailsBody string, senseActionDetailsImageID string) (*sense.ActionDetailsPayload, error) {
	var err error
	var body ActionDetailsRequestBody
	{
		err = json.Unmarshal([]byte(senseActionDetailsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"action_data_hash\": \"7ae3874ff2df92df38cce7586c08fe8f3687884edf3b0543f8d9420f4df31265\",\n      \"action_data_signature\": \"4qd\",\n      \"app_pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.app_pastelid", body.PastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.PastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", body.PastelID, utf8.RuneCountInString(body.PastelID), 86, true))
		}
		if utf8.RuneCountInString(body.PastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", body.PastelID, utf8.RuneCountInString(body.PastelID), 86, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.action_data_hash", body.ActionDataHash, "^[a-fA-F0-9]"))
		if utf8.RuneCountInString(body.ActionDataHash) < 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.action_data_hash", body.ActionDataHash, utf8.RuneCountInString(body.ActionDataHash), 64, true))
		}
		if utf8.RuneCountInString(body.ActionDataHash) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.action_data_hash", body.ActionDataHash, utf8.RuneCountInString(body.ActionDataHash), 64, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.action_data_signature", body.ActionDataSignature, "^[a-fA-F0-9]"))
		if utf8.RuneCountInString(body.ActionDataSignature) < 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.action_data_signature", body.ActionDataSignature, utf8.RuneCountInString(body.ActionDataSignature), 64, true))
		}
		if utf8.RuneCountInString(body.ActionDataSignature) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.action_data_signature", body.ActionDataSignature, utf8.RuneCountInString(body.ActionDataSignature), 64, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var imageID string
	{
		imageID = senseActionDetailsImageID
		if utf8.RuneCountInString(imageID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("imageID", imageID, utf8.RuneCountInString(imageID), 8, true))
		}
		if utf8.RuneCountInString(imageID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("imageID", imageID, utf8.RuneCountInString(imageID), 8, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &sense.ActionDetailsPayload{
		PastelID:            body.PastelID,
		ActionDataHash:      body.ActionDataHash,
		ActionDataSignature: body.ActionDataSignature,
	}
	v.ImageID = imageID

	return v, nil
}
