// Code generated by goa v3.13.1, DO NOT EDIT.
//
// collection HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	collection "github.com/pastelnetwork/gonode/walletnode/api/gen/collection"
	collectionviews "github.com/pastelnetwork/gonode/walletnode/api/gen/collection/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterCollectionRequest instantiates a HTTP request object with
// method and path set to call the "collection" service "registerCollection"
// endpoint
func (c *Client) BuildRegisterCollectionRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterCollectionCollectionPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "registerCollection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterCollectionRequest returns an encoder for requests sent to the
// collection registerCollection server.
func EncodeRegisterCollectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*collection.RegisterCollectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "registerCollection", "*collection.RegisterCollectionPayload", v)
		}
		if p.Key != nil {
			head := *p.Key
			req.Header.Set("Authorization", head)
		}
		body := NewRegisterCollectionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("collection", "registerCollection", err)
		}
		return nil
	}
}

// DecodeRegisterCollectionResponse returns a decoder for responses returned by
// the collection registerCollection endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRegisterCollectionResponse may return the following errors:
//   - "UnAuthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeRegisterCollectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterCollectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			p := NewRegisterCollectionResponseViewOK(&body)
			view := "default"
			vres := &collectionviews.RegisterCollectionResponse{Projected: p, View: view}
			if err = collectionviews.ValidateRegisterCollectionResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			res := collection.NewRegisterCollectionResponse(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RegisterCollectionUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionUnAuthorized(&body)
		case http.StatusBadRequest:
			var (
				body RegisterCollectionBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RegisterCollectionNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body RegisterCollectionInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "registerCollection", resp.StatusCode, string(body))
		}
	}
}

// BuildRegisterTaskStateRequest instantiates a HTTP request object with method
// and path set to call the "collection" service "registerTaskState" endpoint
func (c *Client) BuildRegisterTaskStateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*collection.RegisterTaskStatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "registerTaskState", "*collection.RegisterTaskStatePayload", v)
		}
		taskID = p.TaskID
	}
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: RegisterTaskStateCollectionPath(taskID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "registerTaskState", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRegisterTaskStateResponse returns a decoder for responses returned by
// the collection registerTaskState endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRegisterTaskStateResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeRegisterTaskStateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterTaskStateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerTaskState", err)
			}
			err = ValidateRegisterTaskStateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerTaskState", err)
			}
			res := NewRegisterTaskStateTaskStateOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body RegisterTaskStateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerTaskState", err)
			}
			err = ValidateRegisterTaskStateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerTaskState", err)
			}
			return nil, NewRegisterTaskStateNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body RegisterTaskStateInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerTaskState", err)
			}
			err = ValidateRegisterTaskStateInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerTaskState", err)
			}
			return nil, NewRegisterTaskStateInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "registerTaskState", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTaskHistoryRequest instantiates a HTTP request object with method
// and path set to call the "collection" service "getTaskHistory" endpoint
func (c *Client) BuildGetTaskHistoryRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*collection.GetTaskHistoryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "getTaskHistory", "*collection.GetTaskHistoryPayload", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTaskHistoryCollectionPath(taskID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "getTaskHistory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetTaskHistoryResponse returns a decoder for responses returned by the
// collection getTaskHistory endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetTaskHistoryResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetTaskHistoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTaskHistoryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "getTaskHistory", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateTaskHistoryResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "getTaskHistory", err)
			}
			res := NewGetTaskHistoryTaskHistoryOK(body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetTaskHistoryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "getTaskHistory", err)
			}
			err = ValidateGetTaskHistoryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "getTaskHistory", err)
			}
			return nil, NewGetTaskHistoryNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetTaskHistoryInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "getTaskHistory", err)
			}
			err = ValidateGetTaskHistoryInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "getTaskHistory", err)
			}
			return nil, NewGetTaskHistoryInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "getTaskHistory", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTaskHistoryResponseToCollectionTaskHistory builds a value of type
// *collection.TaskHistory from a value of type *TaskHistoryResponse.
func unmarshalTaskHistoryResponseToCollectionTaskHistory(v *TaskHistoryResponse) *collection.TaskHistory {
	res := &collection.TaskHistory{
		Timestamp: v.Timestamp,
		Status:    *v.Status,
		Message:   v.Message,
	}
	if v.Details != nil {
		res.Details = unmarshalDetailsResponseToCollectionDetails(v.Details)
	}

	return res
}

// unmarshalDetailsResponseToCollectionDetails builds a value of type
// *collection.Details from a value of type *DetailsResponse.
func unmarshalDetailsResponseToCollectionDetails(v *DetailsResponse) *collection.Details {
	if v == nil {
		return nil
	}
	res := &collection.Details{
		Message: v.Message,
	}
	if v.Fields != nil {
		res.Fields = make(map[string]any, len(v.Fields))
		for key, val := range v.Fields {
			tk := key
			tv := val
			res.Fields[tk] = tv
		}
	}

	return res
}
