// Code generated by goa v3.7.6, DO NOT EDIT.
//
// collection HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	collection "github.com/pastelnetwork/gonode/walletnode/api/gen/collection"
	collectionviews "github.com/pastelnetwork/gonode/walletnode/api/gen/collection/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterCollectionRequest instantiates a HTTP request object with
// method and path set to call the "collection" service "registerCollection"
// endpoint
func (c *Client) BuildRegisterCollectionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterCollectionCollectionPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "registerCollection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterCollectionRequest returns an encoder for requests sent to the
// collection registerCollection server.
func EncodeRegisterCollectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.RegisterCollectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "registerCollection", "*collection.RegisterCollectionPayload", v)
		}
		if p.Key != nil {
			head := *p.Key
			req.Header.Set("Authorization", head)
		}
		body := NewRegisterCollectionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("collection", "registerCollection", err)
		}
		return nil
	}
}

// DecodeRegisterCollectionResponse returns a decoder for responses returned by
// the collection registerCollection endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRegisterCollectionResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeRegisterCollectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterCollectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			p := NewRegisterCollectionResponseViewOK(&body)
			view := "default"
			vres := &collectionviews.RegisterCollectionResponse{Projected: p, View: view}
			if err = collectionviews.ValidateRegisterCollectionResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			res := collection.NewRegisterCollectionResponse(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RegisterCollectionBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RegisterCollectionNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body RegisterCollectionInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "registerCollection", err)
			}
			err = ValidateRegisterCollectionInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "registerCollection", err)
			}
			return nil, NewRegisterCollectionInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "registerCollection", resp.StatusCode, string(body))
		}
	}
}
