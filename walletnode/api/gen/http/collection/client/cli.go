// Code generated by goa v3.7.6, DO NOT EDIT.
//
// collection HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	collection "github.com/pastelnetwork/gonode/walletnode/api/gen/collection"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterCollectionPayload builds the payload for the collection
// registerCollection endpoint from CLI flags.
func BuildRegisterCollectionPayload(collectionRegisterCollectionBody string, collectionRegisterCollectionKey string) (*collection.RegisterCollectionPayload, error) {
	var err error
	var body RegisterCollectionRequestBody
	{
		err = json.Unmarshal([]byte(collectionRegisterCollectionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"app_pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"collection_final_allowed_block_height\": 5,\n      \"collection_item_copy_count\": 10,\n      \"collection_name\": \"galaxies\",\n      \"green\": false,\n      \"list_of_pastelids_of_authorized_contributors\": [\n         \"apple\",\n         \"banana\",\n         \"orange\"\n      ],\n      \"max_collection_entries\": 5000,\n      \"royalty\": 2.32\n   }'")
		}
		if body.ListOfPastelidsOfAuthorizedContributors == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("list_of_pastelids_of_authorized_contributors", "body"))
		}
		if body.MaxCollectionEntries < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_collection_entries", body.MaxCollectionEntries, 1, true))
		}
		if body.MaxCollectionEntries > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_collection_entries", body.MaxCollectionEntries, 10000, false))
		}
		if body.CollectionFinalAllowedBlockHeight < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.collection_final_allowed_block_height", body.CollectionFinalAllowedBlockHeight, 1, true))
		}
		if body.CollectionFinalAllowedBlockHeight > 7 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.collection_final_allowed_block_height", body.CollectionFinalAllowedBlockHeight, 7, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.app_pastelid", body.AppPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.AppPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", body.AppPastelID, utf8.RuneCountInString(body.AppPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.AppPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", body.AppPastelID, utf8.RuneCountInString(body.AppPastelID), 86, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var key *string
	{
		if collectionRegisterCollectionKey != "" {
			key = &collectionRegisterCollectionKey
		}
	}
	v := &collection.RegisterCollectionPayload{
		CollectionName:                    body.CollectionName,
		MaxCollectionEntries:              body.MaxCollectionEntries,
		CollectionFinalAllowedBlockHeight: body.CollectionFinalAllowedBlockHeight,
		CollectionItemCopyCount:           body.CollectionItemCopyCount,
		Royalty:                           body.Royalty,
		Green:                             body.Green,
		AppPastelID:                       body.AppPastelID,
	}
	if body.ListOfPastelidsOfAuthorizedContributors != nil {
		v.ListOfPastelidsOfAuthorizedContributors = make([]string, len(body.ListOfPastelidsOfAuthorizedContributors))
		for i, val := range body.ListOfPastelidsOfAuthorizedContributors {
			v.ListOfPastelidsOfAuthorizedContributors[i] = val
		}
	}
	{
		var zero int
		if v.CollectionFinalAllowedBlockHeight == zero {
			v.CollectionFinalAllowedBlockHeight = 7
		}
	}
	v.Key = key

	return v, nil
}
