// Code generated by goa v3.12.4, DO NOT EDIT.
//
// collection HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	collection "github.com/pastelnetwork/gonode/walletnode/api/gen/collection"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterCollectionPayload builds the payload for the collection
// registerCollection endpoint from CLI flags.
func BuildRegisterCollectionPayload(collectionRegisterCollectionBody string, collectionRegisterCollectionKey string) (*collection.RegisterCollectionPayload, error) {
	var err error
	var body RegisterCollectionRequestBody
	{
		err = json.Unmarshal([]byte(collectionRegisterCollectionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"app_pastelid\": \"jXYJud3rmrR1Sk2scvR47N4E4J5Vv48uCC6se2nzHrBRdjaKj3ybPoi1Y2VVoRqi1GnQrYKjSxQAC7NBtvtEdS\",\n      \"collection_item_copy_count\": 10,\n      \"collection_name\": \"galaxies\",\n      \"green\": false,\n      \"item_type\": \"sense\",\n      \"list_of_pastelids_of_authorized_contributors\": [\n         \"apple\",\n         \"banana\",\n         \"orange\"\n      ],\n      \"max_collection_entries\": 5000,\n      \"max_permitted_open_nsfw_score\": 0.5,\n      \"minimum_similarity_score_to_first_entry_in_collection\": 0.5,\n      \"no_of_days_to_finalize_collection\": 5,\n      \"royalty\": 2.32,\n      \"spendable_address\": \"PtiqRXn2VQwBjp1K8QXR2uW2w2oZ3Ns7N6j\"\n   }'")
		}
		if body.ListOfPastelidsOfAuthorizedContributors == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("list_of_pastelids_of_authorized_contributors", "body"))
		}
		if !(body.ItemType == "sense" || body.ItemType == "nft") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.item_type", body.ItemType, []any{"sense", "nft"}))
		}
		if body.MaxCollectionEntries < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_collection_entries", body.MaxCollectionEntries, 1, true))
		}
		if body.MaxCollectionEntries > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_collection_entries", body.MaxCollectionEntries, 10000, false))
		}
		if body.NoOfDaysToFinalizeCollection < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_of_days_to_finalize_collection", body.NoOfDaysToFinalizeCollection, 1, true))
		}
		if body.NoOfDaysToFinalizeCollection > 7 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_of_days_to_finalize_collection", body.NoOfDaysToFinalizeCollection, 7, false))
		}
		if body.CollectionItemCopyCount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.collection_item_copy_count", body.CollectionItemCopyCount, 1, true))
		}
		if body.CollectionItemCopyCount > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.collection_item_copy_count", body.CollectionItemCopyCount, 1000, false))
		}
		if body.Royalty < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.royalty", body.Royalty, 0, true))
		}
		if body.Royalty > 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.royalty", body.Royalty, 20, false))
		}
		if body.MaxPermittedOpenNsfwScore < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_permitted_open_nsfw_score", body.MaxPermittedOpenNsfwScore, 0, true))
		}
		if body.MaxPermittedOpenNsfwScore > 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_permitted_open_nsfw_score", body.MaxPermittedOpenNsfwScore, 1, false))
		}
		if body.MinimumSimilarityScoreToFirstEntryInCollection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minimum_similarity_score_to_first_entry_in_collection", body.MinimumSimilarityScoreToFirstEntryInCollection, 0, true))
		}
		if body.MinimumSimilarityScoreToFirstEntryInCollection > 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minimum_similarity_score_to_first_entry_in_collection", body.MinimumSimilarityScoreToFirstEntryInCollection, 1, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.app_pastelid", body.AppPastelID, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.AppPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", body.AppPastelID, utf8.RuneCountInString(body.AppPastelID), 86, true))
		}
		if utf8.RuneCountInString(body.AppPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", body.AppPastelID, utf8.RuneCountInString(body.AppPastelID), 86, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", body.SpendableAddress, "^[a-zA-Z0-9]+$"))
		if utf8.RuneCountInString(body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", body.SpendableAddress, utf8.RuneCountInString(body.SpendableAddress), 35, true))
		}
		if utf8.RuneCountInString(body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", body.SpendableAddress, utf8.RuneCountInString(body.SpendableAddress), 35, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var key *string
	{
		if collectionRegisterCollectionKey != "" {
			key = &collectionRegisterCollectionKey
		}
	}
	v := &collection.RegisterCollectionPayload{
		CollectionName:               body.CollectionName,
		ItemType:                     body.ItemType,
		MaxCollectionEntries:         body.MaxCollectionEntries,
		NoOfDaysToFinalizeCollection: body.NoOfDaysToFinalizeCollection,
		CollectionItemCopyCount:      body.CollectionItemCopyCount,
		Royalty:                      body.Royalty,
		Green:                        body.Green,
		MaxPermittedOpenNsfwScore:    body.MaxPermittedOpenNsfwScore,
		MinimumSimilarityScoreToFirstEntryInCollection: body.MinimumSimilarityScoreToFirstEntryInCollection,
		AppPastelID:      body.AppPastelID,
		SpendableAddress: body.SpendableAddress,
	}
	if body.ListOfPastelidsOfAuthorizedContributors != nil {
		v.ListOfPastelidsOfAuthorizedContributors = make([]string, len(body.ListOfPastelidsOfAuthorizedContributors))
		for i, val := range body.ListOfPastelidsOfAuthorizedContributors {
			v.ListOfPastelidsOfAuthorizedContributors[i] = val
		}
	} else {
		v.ListOfPastelidsOfAuthorizedContributors = []string{}
	}
	{
		var zero int
		if v.NoOfDaysToFinalizeCollection == zero {
			v.NoOfDaysToFinalizeCollection = 7
		}
	}
	{
		var zero int
		if v.CollectionItemCopyCount == zero {
			v.CollectionItemCopyCount = 1
		}
	}
	{
		var zero float64
		if v.Royalty == zero {
			v.Royalty = 0
		}
	}
	{
		var zero bool
		if v.Green == zero {
			v.Green = false
		}
	}
	v.Key = key

	return v, nil
}

// BuildRegisterTaskStatePayload builds the payload for the collection
// registerTaskState endpoint from CLI flags.
func BuildRegisterTaskStatePayload(collectionRegisterTaskStateTaskID string) (*collection.RegisterTaskStatePayload, error) {
	var err error
	var taskID string
	{
		taskID = collectionRegisterTaskStateTaskID
		if utf8.RuneCountInString(taskID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("taskId", taskID, utf8.RuneCountInString(taskID), 8, true))
		}
		if utf8.RuneCountInString(taskID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("taskId", taskID, utf8.RuneCountInString(taskID), 8, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &collection.RegisterTaskStatePayload{}
	v.TaskID = taskID

	return v, nil
}

// BuildGetTaskHistoryPayload builds the payload for the collection
// getTaskHistory endpoint from CLI flags.
func BuildGetTaskHistoryPayload(collectionGetTaskHistoryTaskID string) (*collection.GetTaskHistoryPayload, error) {
	var err error
	var taskID string
	{
		taskID = collectionGetTaskHistoryTaskID
		if utf8.RuneCountInString(taskID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("taskId", taskID, utf8.RuneCountInString(taskID), 8, true))
		}
		if utf8.RuneCountInString(taskID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("taskId", taskID, utf8.RuneCountInString(taskID), 8, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &collection.GetTaskHistoryPayload{}
	v.TaskID = taskID

	return v, nil
}
