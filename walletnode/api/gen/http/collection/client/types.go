// Code generated by goa v3.7.6, DO NOT EDIT.
//
// collection HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	collection "github.com/pastelnetwork/gonode/walletnode/api/gen/collection"
	collectionviews "github.com/pastelnetwork/gonode/walletnode/api/gen/collection/views"
	goa "goa.design/goa/v3/pkg"
)

// RegisterCollectionRequestBody is the type of the "collection" service
// "registerCollection" endpoint HTTP request body.
type RegisterCollectionRequestBody struct {
	// name of the collection
	CollectionName string `form:"collection_name" json:"collection_name" xml:"collection_name"`
	// list of authorized contributors
	ListOfPastelidsOfAuthorizedContributors []string `form:"list_of_pastelids_of_authorized_contributors" json:"list_of_pastelids_of_authorized_contributors" xml:"list_of_pastelids_of_authorized_contributors"`
	// max no of entries in the collection
	MaxCollectionEntries int `form:"max_collection_entries" json:"max_collection_entries" xml:"max_collection_entries"`
	// final allowed block height in days
	CollectionFinalAllowedBlockHeight int `form:"collection_final_allowed_block_height" json:"collection_final_allowed_block_height" xml:"collection_final_allowed_block_height"`
	// item copy count in the collection
	CollectionItemCopyCount *int `form:"collection_item_copy_count,omitempty" json:"collection_item_copy_count,omitempty" xml:"collection_item_copy_count,omitempty"`
	// royalty fee
	Royalty *float32 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// green
	Green *bool `form:"green,omitempty" json:"green,omitempty" xml:"green,omitempty"`
	// App PastelID
	AppPastelID string `form:"app_pastelid" json:"app_pastelid" xml:"app_pastelid"`
}

// RegisterCollectionResponseBody is the type of the "collection" service
// "registerCollection" endpoint HTTP response body.
type RegisterCollectionResponseBody struct {
	// Uploaded file ID
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
}

// RegisterCollectionBadRequestResponseBody is the type of the "collection"
// service "registerCollection" endpoint HTTP response body for the
// "BadRequest" error.
type RegisterCollectionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RegisterCollectionNotFoundResponseBody is the type of the "collection"
// service "registerCollection" endpoint HTTP response body for the "NotFound"
// error.
type RegisterCollectionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RegisterCollectionInternalServerErrorResponseBody is the type of the
// "collection" service "registerCollection" endpoint HTTP response body for
// the "InternalServerError" error.
type RegisterCollectionInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewRegisterCollectionRequestBody builds the HTTP request body from the
// payload of the "registerCollection" endpoint of the "collection" service.
func NewRegisterCollectionRequestBody(p *collection.RegisterCollectionPayload) *RegisterCollectionRequestBody {
	body := &RegisterCollectionRequestBody{
		CollectionName:                    p.CollectionName,
		MaxCollectionEntries:              p.MaxCollectionEntries,
		CollectionFinalAllowedBlockHeight: p.CollectionFinalAllowedBlockHeight,
		CollectionItemCopyCount:           p.CollectionItemCopyCount,
		Royalty:                           p.Royalty,
		Green:                             p.Green,
		AppPastelID:                       p.AppPastelID,
	}
	if p.ListOfPastelidsOfAuthorizedContributors != nil {
		body.ListOfPastelidsOfAuthorizedContributors = make([]string, len(p.ListOfPastelidsOfAuthorizedContributors))
		for i, val := range p.ListOfPastelidsOfAuthorizedContributors {
			body.ListOfPastelidsOfAuthorizedContributors[i] = val
		}
	}
	{
		var zero int
		if body.CollectionFinalAllowedBlockHeight == zero {
			body.CollectionFinalAllowedBlockHeight = 7
		}
	}
	return body
}

// NewRegisterCollectionResponseViewOK builds a "collection" service
// "registerCollection" endpoint result from a HTTP "OK" response.
func NewRegisterCollectionResponseViewOK(body *RegisterCollectionResponseBody) *collectionviews.RegisterCollectionResponseView {
	v := &collectionviews.RegisterCollectionResponseView{
		TaskID: body.TaskID,
	}

	return v
}

// NewRegisterCollectionBadRequest builds a collection service
// registerCollection endpoint BadRequest error.
func NewRegisterCollectionBadRequest(body *RegisterCollectionBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRegisterCollectionNotFound builds a collection service registerCollection
// endpoint NotFound error.
func NewRegisterCollectionNotFound(body *RegisterCollectionNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRegisterCollectionInternalServerError builds a collection service
// registerCollection endpoint InternalServerError error.
func NewRegisterCollectionInternalServerError(body *RegisterCollectionInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRegisterCollectionBadRequestResponseBody runs the validations
// defined on registerCollection_BadRequest_response_body
func ValidateRegisterCollectionBadRequestResponseBody(body *RegisterCollectionBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRegisterCollectionNotFoundResponseBody runs the validations defined
// on registerCollection_NotFound_response_body
func ValidateRegisterCollectionNotFoundResponseBody(body *RegisterCollectionNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRegisterCollectionInternalServerErrorResponseBody runs the
// validations defined on registerCollection_InternalServerError_response_body
func ValidateRegisterCollectionInternalServerErrorResponseBody(body *RegisterCollectionInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
