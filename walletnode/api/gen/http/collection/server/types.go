// Code generated by goa v3.7.6, DO NOT EDIT.
//
// collection HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"unicode/utf8"

	collection "github.com/pastelnetwork/gonode/walletnode/api/gen/collection"
	collectionviews "github.com/pastelnetwork/gonode/walletnode/api/gen/collection/views"
	goa "goa.design/goa/v3/pkg"
)

// RegisterCollectionRequestBody is the type of the "collection" service
// "registerCollection" endpoint HTTP request body.
type RegisterCollectionRequestBody struct {
	// name of the collection
	CollectionName *string `form:"collection_name,omitempty" json:"collection_name,omitempty" xml:"collection_name,omitempty"`
	// list of authorized contributors
	ListOfPastelidsOfAuthorizedContributors []string `form:"list_of_pastelids_of_authorized_contributors,omitempty" json:"list_of_pastelids_of_authorized_contributors,omitempty" xml:"list_of_pastelids_of_authorized_contributors,omitempty"`
	// max no of entries in the collection
	MaxCollectionEntries *int `form:"max_collection_entries,omitempty" json:"max_collection_entries,omitempty" xml:"max_collection_entries,omitempty"`
	// final allowed block height in days
	CollectionFinalAllowedBlockHeight *int `form:"collection_final_allowed_block_height,omitempty" json:"collection_final_allowed_block_height,omitempty" xml:"collection_final_allowed_block_height,omitempty"`
	// item copy count in the collection
	CollectionItemCopyCount *int `form:"collection_item_copy_count,omitempty" json:"collection_item_copy_count,omitempty" xml:"collection_item_copy_count,omitempty"`
	// royalty fee
	Royalty *float32 `form:"royalty,omitempty" json:"royalty,omitempty" xml:"royalty,omitempty"`
	// green
	Green *bool `form:"green,omitempty" json:"green,omitempty" xml:"green,omitempty"`
	// App PastelID
	AppPastelID *string `form:"app_pastelid,omitempty" json:"app_pastelid,omitempty" xml:"app_pastelid,omitempty"`
}

// RegisterCollectionResponseBody is the type of the "collection" service
// "registerCollection" endpoint HTTP response body.
type RegisterCollectionResponseBody struct {
	// Uploaded file ID
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// RegisterTaskStateResponseBody is the type of the "collection" service
// "registerTaskState" endpoint HTTP response body.
type RegisterTaskStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// RegisterCollectionBadRequestResponseBody is the type of the "collection"
// service "registerCollection" endpoint HTTP response body for the
// "BadRequest" error.
type RegisterCollectionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterCollectionNotFoundResponseBody is the type of the "collection"
// service "registerCollection" endpoint HTTP response body for the "NotFound"
// error.
type RegisterCollectionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterCollectionInternalServerErrorResponseBody is the type of the
// "collection" service "registerCollection" endpoint HTTP response body for
// the "InternalServerError" error.
type RegisterCollectionInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateNotFoundResponseBody is the type of the "collection"
// service "registerTaskState" endpoint HTTP response body for the "NotFound"
// error.
type RegisterTaskStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterTaskStateInternalServerErrorResponseBody is the type of the
// "collection" service "registerTaskState" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterTaskStateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewRegisterCollectionResponseBody builds the HTTP response body from the
// result of the "registerCollection" endpoint of the "collection" service.
func NewRegisterCollectionResponseBody(res *collectionviews.RegisterCollectionResponseView) *RegisterCollectionResponseBody {
	body := &RegisterCollectionResponseBody{
		TaskID: *res.TaskID,
	}
	return body
}

// NewRegisterTaskStateResponseBody builds the HTTP response body from the
// result of the "registerTaskState" endpoint of the "collection" service.
func NewRegisterTaskStateResponseBody(res *collection.TaskState) *RegisterTaskStateResponseBody {
	body := &RegisterTaskStateResponseBody{
		Date:   res.Date,
		Status: res.Status,
	}
	return body
}

// NewRegisterCollectionBadRequestResponseBody builds the HTTP response body
// from the result of the "registerCollection" endpoint of the "collection"
// service.
func NewRegisterCollectionBadRequestResponseBody(res *goa.ServiceError) *RegisterCollectionBadRequestResponseBody {
	body := &RegisterCollectionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterCollectionNotFoundResponseBody builds the HTTP response body from
// the result of the "registerCollection" endpoint of the "collection" service.
func NewRegisterCollectionNotFoundResponseBody(res *goa.ServiceError) *RegisterCollectionNotFoundResponseBody {
	body := &RegisterCollectionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterCollectionInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "registerCollection" endpoint of the
// "collection" service.
func NewRegisterCollectionInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterCollectionInternalServerErrorResponseBody {
	body := &RegisterCollectionInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateNotFoundResponseBody builds the HTTP response body from
// the result of the "registerTaskState" endpoint of the "collection" service.
func NewRegisterTaskStateNotFoundResponseBody(res *goa.ServiceError) *RegisterTaskStateNotFoundResponseBody {
	body := &RegisterTaskStateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterTaskStateInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerTaskState" endpoint of the "collection"
// service.
func NewRegisterTaskStateInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterTaskStateInternalServerErrorResponseBody {
	body := &RegisterTaskStateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterCollectionPayload builds a collection service registerCollection
// endpoint payload.
func NewRegisterCollectionPayload(body *RegisterCollectionRequestBody, key *string) *collection.RegisterCollectionPayload {
	v := &collection.RegisterCollectionPayload{
		CollectionName:          *body.CollectionName,
		MaxCollectionEntries:    *body.MaxCollectionEntries,
		CollectionItemCopyCount: body.CollectionItemCopyCount,
		Royalty:                 body.Royalty,
		Green:                   body.Green,
		AppPastelID:             *body.AppPastelID,
	}
	if body.CollectionFinalAllowedBlockHeight != nil {
		v.CollectionFinalAllowedBlockHeight = *body.CollectionFinalAllowedBlockHeight
	}
	v.ListOfPastelidsOfAuthorizedContributors = make([]string, len(body.ListOfPastelidsOfAuthorizedContributors))
	for i, val := range body.ListOfPastelidsOfAuthorizedContributors {
		v.ListOfPastelidsOfAuthorizedContributors[i] = val
	}
	if body.CollectionFinalAllowedBlockHeight == nil {
		v.CollectionFinalAllowedBlockHeight = 7
	}
	v.Key = key

	return v
}

// NewRegisterTaskStatePayload builds a collection service registerTaskState
// endpoint payload.
func NewRegisterTaskStatePayload(taskID string) *collection.RegisterTaskStatePayload {
	v := &collection.RegisterTaskStatePayload{}
	v.TaskID = taskID

	return v
}

// ValidateRegisterCollectionRequestBody runs the validations defined on
// RegisterCollectionRequestBody
func ValidateRegisterCollectionRequestBody(body *RegisterCollectionRequestBody) (err error) {
	if body.CollectionName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("collection_name", "body"))
	}
	if body.ListOfPastelidsOfAuthorizedContributors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list_of_pastelids_of_authorized_contributors", "body"))
	}
	if body.MaxCollectionEntries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("max_collection_entries", "body"))
	}
	if body.AppPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("app_pastelid", "body"))
	}
	if body.MaxCollectionEntries != nil {
		if *body.MaxCollectionEntries < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_collection_entries", *body.MaxCollectionEntries, 1, true))
		}
	}
	if body.MaxCollectionEntries != nil {
		if *body.MaxCollectionEntries > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_collection_entries", *body.MaxCollectionEntries, 10000, false))
		}
	}
	if body.CollectionFinalAllowedBlockHeight != nil {
		if *body.CollectionFinalAllowedBlockHeight < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.collection_final_allowed_block_height", *body.CollectionFinalAllowedBlockHeight, 1, true))
		}
	}
	if body.CollectionFinalAllowedBlockHeight != nil {
		if *body.CollectionFinalAllowedBlockHeight > 7 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.collection_final_allowed_block_height", *body.CollectionFinalAllowedBlockHeight, 7, false))
		}
	}
	if body.AppPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.app_pastelid", *body.AppPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.AppPastelID != nil {
		if utf8.RuneCountInString(*body.AppPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", *body.AppPastelID, utf8.RuneCountInString(*body.AppPastelID), 86, true))
		}
	}
	if body.AppPastelID != nil {
		if utf8.RuneCountInString(*body.AppPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.app_pastelid", *body.AppPastelID, utf8.RuneCountInString(*body.AppPastelID), 86, false))
		}
	}
	return
}
