// Code generated by goa v3.15.0, DO NOT EDIT.
//
// Score HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	score "github.com/pastelnetwork/gonode/walletnode/api/gen/score"
	goa "goa.design/goa/v3/pkg"
)

// GetAggregatedChallengesScoresResponseBody is the type of the "Score" service
// "getAggregatedChallengesScores" endpoint HTTP response body.
type GetAggregatedChallengesScoresResponseBody []*ChallengesScoresResponse

// GetAggregatedChallengesScoresUnauthorizedResponseBody is the type of the
// "Score" service "getAggregatedChallengesScores" endpoint HTTP response body
// for the "Unauthorized" error.
type GetAggregatedChallengesScoresUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAggregatedChallengesScoresBadRequestResponseBody is the type of the
// "Score" service "getAggregatedChallengesScores" endpoint HTTP response body
// for the "BadRequest" error.
type GetAggregatedChallengesScoresBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAggregatedChallengesScoresNotFoundResponseBody is the type of the "Score"
// service "getAggregatedChallengesScores" endpoint HTTP response body for the
// "NotFound" error.
type GetAggregatedChallengesScoresNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAggregatedChallengesScoresInternalServerErrorResponseBody is the type of
// the "Score" service "getAggregatedChallengesScores" endpoint HTTP response
// body for the "InternalServerError" error.
type GetAggregatedChallengesScoresInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChallengesScoresResponse is used to define fields on response body types.
type ChallengesScoresResponse struct {
	// Specific node id
	NodeID string `form:"node_id" json:"node_id" xml:"node_id"`
	// IPAddress of the node
	IPAddress *string `form:"ip_address,omitempty" json:"ip_address,omitempty" xml:"ip_address,omitempty"`
	// Total accumulated SC challenge score
	StorageChallengeScore float64 `form:"storage_challenge_score" json:"storage_challenge_score" xml:"storage_challenge_score"`
	// Total accumulated HC challenge score
	HealthCheckChallengeScore float64 `form:"health_check_challenge_score" json:"health_check_challenge_score" xml:"health_check_challenge_score"`
}

// NewGetAggregatedChallengesScoresResponseBody builds the HTTP response body
// from the result of the "getAggregatedChallengesScores" endpoint of the
// "Score" service.
func NewGetAggregatedChallengesScoresResponseBody(res []*score.ChallengesScores) GetAggregatedChallengesScoresResponseBody {
	body := make([]*ChallengesScoresResponse, len(res))
	for i, val := range res {
		body[i] = marshalScoreChallengesScoresToChallengesScoresResponse(val)
	}
	return body
}

// NewGetAggregatedChallengesScoresUnauthorizedResponseBody builds the HTTP
// response body from the result of the "getAggregatedChallengesScores"
// endpoint of the "Score" service.
func NewGetAggregatedChallengesScoresUnauthorizedResponseBody(res *goa.ServiceError) *GetAggregatedChallengesScoresUnauthorizedResponseBody {
	body := &GetAggregatedChallengesScoresUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAggregatedChallengesScoresBadRequestResponseBody builds the HTTP
// response body from the result of the "getAggregatedChallengesScores"
// endpoint of the "Score" service.
func NewGetAggregatedChallengesScoresBadRequestResponseBody(res *goa.ServiceError) *GetAggregatedChallengesScoresBadRequestResponseBody {
	body := &GetAggregatedChallengesScoresBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAggregatedChallengesScoresNotFoundResponseBody builds the HTTP
// response body from the result of the "getAggregatedChallengesScores"
// endpoint of the "Score" service.
func NewGetAggregatedChallengesScoresNotFoundResponseBody(res *goa.ServiceError) *GetAggregatedChallengesScoresNotFoundResponseBody {
	body := &GetAggregatedChallengesScoresNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAggregatedChallengesScoresInternalServerErrorResponseBody builds the
// HTTP response body from the result of the "getAggregatedChallengesScores"
// endpoint of the "Score" service.
func NewGetAggregatedChallengesScoresInternalServerErrorResponseBody(res *goa.ServiceError) *GetAggregatedChallengesScoresInternalServerErrorResponseBody {
	body := &GetAggregatedChallengesScoresInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAggregatedChallengesScoresPayload builds a Score service
// getAggregatedChallengesScores endpoint payload.
func NewGetAggregatedChallengesScoresPayload(pid string, key string) *score.GetAggregatedChallengesScoresPayload {
	v := &score.GetAggregatedChallengesScoresPayload{}
	v.Pid = pid
	v.Key = key

	return v
}
