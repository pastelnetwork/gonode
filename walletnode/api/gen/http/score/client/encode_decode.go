// Code generated by goa v3.15.0, DO NOT EDIT.
//
// Score HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	score "github.com/pastelnetwork/gonode/walletnode/api/gen/score"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetAggregatedChallengesScoresRequest instantiates a HTTP request object
// with method and path set to call the "Score" service
// "getAggregatedChallengesScores" endpoint
func (c *Client) BuildGetAggregatedChallengesScoresRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAggregatedChallengesScoresScorePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Score", "getAggregatedChallengesScores", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAggregatedChallengesScoresRequest returns an encoder for requests
// sent to the Score getAggregatedChallengesScores server.
func EncodeGetAggregatedChallengesScoresRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*score.GetAggregatedChallengesScoresPayload)
		if !ok {
			return goahttp.ErrInvalidType("Score", "getAggregatedChallengesScores", "*score.GetAggregatedChallengesScoresPayload", v)
		}
		{
			head := p.Key
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		values.Add("pid", p.Pid)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetAggregatedChallengesScoresResponse returns a decoder for responses
// returned by the Score getAggregatedChallengesScores endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetAggregatedChallengesScoresResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetAggregatedChallengesScoresResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAggregatedChallengesScoresResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "getAggregatedChallengesScores", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateChallengesScoresResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "getAggregatedChallengesScores", err)
			}
			res := NewGetAggregatedChallengesScoresChallengesScoresOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetAggregatedChallengesScoresUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "getAggregatedChallengesScores", err)
			}
			err = ValidateGetAggregatedChallengesScoresUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "getAggregatedChallengesScores", err)
			}
			return nil, NewGetAggregatedChallengesScoresUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body GetAggregatedChallengesScoresBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "getAggregatedChallengesScores", err)
			}
			err = ValidateGetAggregatedChallengesScoresBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "getAggregatedChallengesScores", err)
			}
			return nil, NewGetAggregatedChallengesScoresBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetAggregatedChallengesScoresNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "getAggregatedChallengesScores", err)
			}
			err = ValidateGetAggregatedChallengesScoresNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "getAggregatedChallengesScores", err)
			}
			return nil, NewGetAggregatedChallengesScoresNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetAggregatedChallengesScoresInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Score", "getAggregatedChallengesScores", err)
			}
			err = ValidateGetAggregatedChallengesScoresInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Score", "getAggregatedChallengesScores", err)
			}
			return nil, NewGetAggregatedChallengesScoresInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Score", "getAggregatedChallengesScores", resp.StatusCode, string(body))
		}
	}
}

// unmarshalChallengesScoresResponseToScoreChallengesScores builds a value of
// type *score.ChallengesScores from a value of type *ChallengesScoresResponse.
func unmarshalChallengesScoresResponseToScoreChallengesScores(v *ChallengesScoresResponse) *score.ChallengesScores {
	res := &score.ChallengesScores{
		NodeID:                    *v.NodeID,
		IPAddress:                 v.IPAddress,
		StorageChallengeScore:     *v.StorageChallengeScore,
		HealthCheckChallengeScore: *v.HealthCheckChallengeScore,
	}

	return res
}
