// Code generated by goa v3.15.0, DO NOT EDIT.
//
// metrics HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"fmt"
	"strconv"

	metrics "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetDetailedLogsPayload builds the payload for the metrics
// getDetailedLogs endpoint from CLI flags.
func BuildGetDetailedLogsPayload(metricsGetDetailedLogsPid string, metricsGetDetailedLogsEventID string, metricsGetDetailedLogsCount string, metricsGetDetailedLogsKey string) (*metrics.GetDetailedLogsPayload, error) {
	var err error
	var pid string
	{
		pid = metricsGetDetailedLogsPid
	}
	var eventID *string
	{
		if metricsGetDetailedLogsEventID != "" {
			eventID = &metricsGetDetailedLogsEventID
		}
	}
	var count *int
	{
		if metricsGetDetailedLogsCount != "" {
			var v int64
			v, err = strconv.ParseInt(metricsGetDetailedLogsCount, 10, strconv.IntSize)
			val := int(v)
			count = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for count, must be INT")
			}
		}
	}
	var key string
	{
		key = metricsGetDetailedLogsKey
	}
	v := &metrics.GetDetailedLogsPayload{}
	v.Pid = pid
	v.EventID = eventID
	v.Count = count
	v.Key = key

	return v, nil
}

// BuildGetSummaryStatsPayload builds the payload for the metrics
// getSummaryStats endpoint from CLI flags.
func BuildGetSummaryStatsPayload(metricsGetSummaryStatsFrom string, metricsGetSummaryStatsTo string, metricsGetSummaryStatsPid string, metricsGetSummaryStatsKey string) (*metrics.GetSummaryStatsPayload, error) {
	var err error
	var from *string
	{
		if metricsGetSummaryStatsFrom != "" {
			from = &metricsGetSummaryStatsFrom
			err = goa.MergeErrors(err, goa.ValidateFormat("from", *from, goa.FormatDateTime))
			if err != nil {
				return nil, err
			}
		}
	}
	var to *string
	{
		if metricsGetSummaryStatsTo != "" {
			to = &metricsGetSummaryStatsTo
			err = goa.MergeErrors(err, goa.ValidateFormat("to", *to, goa.FormatDateTime))
			if err != nil {
				return nil, err
			}
		}
	}
	var pid string
	{
		pid = metricsGetSummaryStatsPid
	}
	var key string
	{
		key = metricsGetSummaryStatsKey
	}
	v := &metrics.GetSummaryStatsPayload{}
	v.From = from
	v.To = to
	v.Pid = pid
	v.Key = key

	return v, nil
}
