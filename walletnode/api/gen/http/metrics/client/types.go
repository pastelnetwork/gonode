// Code generated by goa v3.15.0, DO NOT EDIT.
//
// metrics HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	metrics "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics"
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
)

// GetDetailedLogsResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body.
type GetDetailedLogsResponseBody struct {
	// Map of challenge ID to SelfHealingReport
	Reports []*SelfHealingReportKVResponseBody `form:"reports,omitempty" json:"reports,omitempty" xml:"reports,omitempty"`
}

// GetSummaryStatsResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body.
type GetSummaryStatsResponseBody struct {
	// Self-healing trigger stats
	SelfHealingTriggerEventsStats []*SHTriggerStatsResponseBody `form:"self_healing_trigger_events_stats,omitempty" json:"self_healing_trigger_events_stats,omitempty" xml:"self_healing_trigger_events_stats,omitempty"`
	// Self-healing execution stats
	SelfHealingExecutionEventsStats *SHExecutionStatsResponseBody `form:"self_healing_execution_events_stats,omitempty" json:"self_healing_execution_events_stats,omitempty" xml:"self_healing_execution_events_stats,omitempty"`
}

// GetDetailedLogsUnauthorizedResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body for the "Unauthorized" error.
type GetDetailedLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsBadRequestResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body for the "BadRequest" error.
type GetDetailedLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsNotFoundResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body for the "NotFound" error.
type GetDetailedLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetDetailedLogsInternalServerErrorResponseBody is the type of the "metrics"
// service "getDetailedLogs" endpoint HTTP response body for the
// "InternalServerError" error.
type GetDetailedLogsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsUnauthorizedResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body for the "Unauthorized" error.
type GetSummaryStatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsBadRequestResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body for the "BadRequest" error.
type GetSummaryStatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsNotFoundResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body for the "NotFound" error.
type GetSummaryStatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSummaryStatsInternalServerErrorResponseBody is the type of the "metrics"
// service "getSummaryStats" endpoint HTTP response body for the
// "InternalServerError" error.
type GetSummaryStatsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SelfHealingReportKVResponseBody is used to define fields on response body
// types.
type SelfHealingReportKVResponseBody struct {
	// Challenge ID
	EventID *string `form:"event_id,omitempty" json:"event_id,omitempty" xml:"event_id,omitempty"`
	// Self-healing report
	Report *SelfHealingReportResponseBody `form:"report,omitempty" json:"report,omitempty" xml:"report,omitempty"`
}

// SelfHealingReportResponseBody is used to define fields on response body
// types.
type SelfHealingReportResponseBody struct {
	// Map of message type to SelfHealingMessages
	Messages []*SelfHealingMessageKVResponseBody `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
}

// SelfHealingMessageKVResponseBody is used to define fields on response body
// types.
type SelfHealingMessageKVResponseBody struct {
	// Message type
	MessageType *string `form:"message_type,omitempty" json:"message_type,omitempty" xml:"message_type,omitempty"`
	// Self-healing messages
	Messages []*SelfHealingMessageResponseBody `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
}

// SelfHealingMessageResponseBody is used to define fields on response body
// types.
type SelfHealingMessageResponseBody struct {
	TriggerID       *string                             `form:"trigger_id,omitempty" json:"trigger_id,omitempty" xml:"trigger_id,omitempty"`
	MessageType     *string                             `form:"message_type,omitempty" json:"message_type,omitempty" xml:"message_type,omitempty"`
	Data            *SelfHealingMessageDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	SenderID        *string                             `form:"sender_id,omitempty" json:"sender_id,omitempty" xml:"sender_id,omitempty"`
	SenderSignature []byte                              `form:"sender_signature,omitempty" json:"sender_signature,omitempty" xml:"sender_signature,omitempty"`
}

// SelfHealingMessageDataResponseBody is used to define fields on response body
// types.
type SelfHealingMessageDataResponseBody struct {
	ChallengerID *string                                  `form:"challenger_id,omitempty" json:"challenger_id,omitempty" xml:"challenger_id,omitempty"`
	RecipientID  *string                                  `form:"recipient_id,omitempty" json:"recipient_id,omitempty" xml:"recipient_id,omitempty"`
	Challenge    *SelfHealingChallengeDataResponseBody    `form:"challenge,omitempty" json:"challenge,omitempty" xml:"challenge,omitempty"`
	Response     *SelfHealingResponseDataResponseBody     `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
	Verification *SelfHealingVerificationDataResponseBody `form:"verification,omitempty" json:"verification,omitempty" xml:"verification,omitempty"`
}

// SelfHealingChallengeDataResponseBody is used to define fields on response
// body types.
type SelfHealingChallengeDataResponseBody struct {
	Block            *int32                         `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	Merkelroot       *string                        `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	Timestamp        *string                        `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	ChallengeTickets []*ChallengeTicketResponseBody `form:"challenge_tickets,omitempty" json:"challenge_tickets,omitempty" xml:"challenge_tickets,omitempty"`
	NodesOnWatchlist *string                        `form:"nodes_on_watchlist,omitempty" json:"nodes_on_watchlist,omitempty" xml:"nodes_on_watchlist,omitempty"`
}

// ChallengeTicketResponseBody is used to define fields on response body types.
type ChallengeTicketResponseBody struct {
	TxID        *string  `form:"tx_id,omitempty" json:"tx_id,omitempty" xml:"tx_id,omitempty"`
	TicketType  *string  `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	MissingKeys []string `form:"missing_keys,omitempty" json:"missing_keys,omitempty" xml:"missing_keys,omitempty"`
	DataHash    []byte   `form:"data_hash,omitempty" json:"data_hash,omitempty" xml:"data_hash,omitempty"`
	Recipient   *string  `form:"recipient,omitempty" json:"recipient,omitempty" xml:"recipient,omitempty"`
}

// SelfHealingResponseDataResponseBody is used to define fields on response
// body types.
type SelfHealingResponseDataResponseBody struct {
	ChallengeID     *string                      `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	Block           *int32                       `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	Merkelroot      *string                      `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	Timestamp       *string                      `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	RespondedTicket *RespondedTicketResponseBody `form:"responded_ticket,omitempty" json:"responded_ticket,omitempty" xml:"responded_ticket,omitempty"`
	Verifiers       []string                     `form:"verifiers,omitempty" json:"verifiers,omitempty" xml:"verifiers,omitempty"`
}

// RespondedTicketResponseBody is used to define fields on response body types.
type RespondedTicketResponseBody struct {
	TxID                     *string  `form:"tx_id,omitempty" json:"tx_id,omitempty" xml:"tx_id,omitempty"`
	TicketType               *string  `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	MissingKeys              []string `form:"missing_keys,omitempty" json:"missing_keys,omitempty" xml:"missing_keys,omitempty"`
	ReconstructedFileHash    []byte   `form:"reconstructed_file_hash,omitempty" json:"reconstructed_file_hash,omitempty" xml:"reconstructed_file_hash,omitempty"`
	SenseFileIds             []string `form:"sense_file_ids,omitempty" json:"sense_file_ids,omitempty" xml:"sense_file_ids,omitempty"`
	RaptorQSymbols           []byte   `form:"raptor_q_symbols,omitempty" json:"raptor_q_symbols,omitempty" xml:"raptor_q_symbols,omitempty"`
	IsReconstructionRequired *bool    `form:"is_reconstruction_required,omitempty" json:"is_reconstruction_required,omitempty" xml:"is_reconstruction_required,omitempty"`
}

// SelfHealingVerificationDataResponseBody is used to define fields on response
// body types.
type SelfHealingVerificationDataResponseBody struct {
	ChallengeID    *string                     `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	Block          *int32                      `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	Merkelroot     *string                     `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	Timestamp      *string                     `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	VerifiedTicket *VerifiedTicketResponseBody `form:"verified_ticket,omitempty" json:"verified_ticket,omitempty" xml:"verified_ticket,omitempty"`
	VerifiersData  map[string][]byte           `form:"verifiers_data,omitempty" json:"verifiers_data,omitempty" xml:"verifiers_data,omitempty"`
}

// VerifiedTicketResponseBody is used to define fields on response body types.
type VerifiedTicketResponseBody struct {
	TxID                     *string  `form:"tx_id,omitempty" json:"tx_id,omitempty" xml:"tx_id,omitempty"`
	TicketType               *string  `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	MissingKeys              []string `form:"missing_keys,omitempty" json:"missing_keys,omitempty" xml:"missing_keys,omitempty"`
	ReconstructedFileHash    []byte   `form:"reconstructed_file_hash,omitempty" json:"reconstructed_file_hash,omitempty" xml:"reconstructed_file_hash,omitempty"`
	IsReconstructionRequired *bool    `form:"is_reconstruction_required,omitempty" json:"is_reconstruction_required,omitempty" xml:"is_reconstruction_required,omitempty"`
	RaptorQSymbols           []byte   `form:"raptor_q_symbols,omitempty" json:"raptor_q_symbols,omitempty" xml:"raptor_q_symbols,omitempty"`
	SenseFileIds             []string `form:"sense_file_ids,omitempty" json:"sense_file_ids,omitempty" xml:"sense_file_ids,omitempty"`
	IsVerified               *bool    `form:"is_verified,omitempty" json:"is_verified,omitempty" xml:"is_verified,omitempty"`
	Message                  *string  `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SHTriggerStatsResponseBody is used to define fields on response body types.
type SHTriggerStatsResponseBody struct {
	// Unique identifier for the trigger
	TriggerID *string `form:"trigger_id,omitempty" json:"trigger_id,omitempty" xml:"trigger_id,omitempty"`
	// Number of nodes offline
	NodesOffline *int `form:"nodes_offline,omitempty" json:"nodes_offline,omitempty" xml:"nodes_offline,omitempty"`
	// Comma-separated list of offline nodes
	ListOfNodes *string `form:"list_of_nodes,omitempty" json:"list_of_nodes,omitempty" xml:"list_of_nodes,omitempty"`
	// Total number of files identified for self-healing
	TotalFilesIdentified *int `form:"total_files_identified,omitempty" json:"total_files_identified,omitempty" xml:"total_files_identified,omitempty"`
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified *int `form:"total_tickets_identified,omitempty" json:"total_tickets_identified,omitempty" xml:"total_tickets_identified,omitempty"`
}

// SHExecutionStatsResponseBody is used to define fields on response body types.
type SHExecutionStatsResponseBody struct {
	// Total number of self-healing events issued
	TotalSelfHealingEventsIssued *int `form:"total_self_healing_events_issued,omitempty" json:"total_self_healing_events_issued,omitempty" xml:"total_self_healing_events_issued,omitempty"`
	// Total number of events acknowledged by the healer node
	TotalSelfHealingEventsAcknowledged *int `form:"total_self_healing_events_acknowledged,omitempty" json:"total_self_healing_events_acknowledged,omitempty" xml:"total_self_healing_events_acknowledged,omitempty"`
	// Total number of events rejected (healer node evaluated that reconstruction
	// is not required)
	TotalSelfHealingEventsRejected *int `form:"total_self_healing_events_rejected,omitempty" json:"total_self_healing_events_rejected,omitempty" xml:"total_self_healing_events_rejected,omitempty"`
	// Total number of events accepted (healer node evaluated that reconstruction
	// is required)
	TotalSelfHealingEventsAccepted *int `form:"total_self_healing_events_accepted,omitempty" json:"total_self_healing_events_accepted,omitempty" xml:"total_self_healing_events_accepted,omitempty"`
	// Total number of challenges verified
	TotalSelfHealingEventsEvaluationsVerified *int `form:"total_self_healing_events_evaluations_verified,omitempty" json:"total_self_healing_events_evaluations_verified,omitempty" xml:"total_self_healing_events_evaluations_verified,omitempty"`
	// Total number of reconstructions approved by verifier nodes
	TotalReconstructionRequiredEvaluationsApproved *int `form:"total_reconstruction_required_evaluations_approved,omitempty" json:"total_reconstruction_required_evaluations_approved,omitempty" xml:"total_reconstruction_required_evaluations_approved,omitempty"`
	// Total number of reconstructions not required approved by verifier nodes
	TotalReconstructionNotRequiredEvaluationsApproved *int `form:"total_reconstruction_not_required_evaluations_approved,omitempty" json:"total_reconstruction_not_required_evaluations_approved,omitempty" xml:"total_reconstruction_not_required_evaluations_approved,omitempty"`
	// Total number of challenge evaluations unverified by verifier nodes
	TotalSelfHealingEventsEvaluationsUnverified *int `form:"total_self_healing_events_evaluations_unverified,omitempty" json:"total_self_healing_events_evaluations_unverified,omitempty" xml:"total_self_healing_events_evaluations_unverified,omitempty"`
	// Total number of reconstructions not approved by verifier nodes
	TotalReconstructionRequiredEvaluationsNotApproved *int `form:"total_reconstruction_required_evaluations_not_approved,omitempty" json:"total_reconstruction_required_evaluations_not_approved,omitempty" xml:"total_reconstruction_required_evaluations_not_approved,omitempty"`
	// Total number of reconstructions not required evaluation not approved by
	// verifier nodes
	TotalReconstructionsNotRequiredEvaluationsNotApproved *int `form:"total_reconstructions_not_required_evaluations_not_approved,omitempty" json:"total_reconstructions_not_required_evaluations_not_approved,omitempty" xml:"total_reconstructions_not_required_evaluations_not_approved,omitempty"`
	// Total number of reconstructions required with hash mismatch
	TotalReconstructionRequiredHashMismatch *int `form:"total_reconstruction_required_hash_mismatch,omitempty" json:"total_reconstruction_required_hash_mismatch,omitempty" xml:"total_reconstruction_required_hash_mismatch,omitempty"`
	// Total number of files healed
	TotalFilesHealed *int `form:"total_files_healed,omitempty" json:"total_files_healed,omitempty" xml:"total_files_healed,omitempty"`
	// Total number of file healings that failed
	TotalFileHealingFailed *int `form:"total_file_healing_failed,omitempty" json:"total_file_healing_failed,omitempty" xml:"total_file_healing_failed,omitempty"`
}

// NewGetDetailedLogsSelfHealingReportsOK builds a "metrics" service
// "getDetailedLogs" endpoint result from a HTTP "OK" response.
func NewGetDetailedLogsSelfHealingReportsOK(body *GetDetailedLogsResponseBody) *metrics.SelfHealingReports {
	v := &metrics.SelfHealingReports{}
	if body.Reports != nil {
		v.Reports = make([]*metrics.SelfHealingReportKV, len(body.Reports))
		for i, val := range body.Reports {
			v.Reports[i] = unmarshalSelfHealingReportKVResponseBodyToMetricsSelfHealingReportKV(val)
		}
	}

	return v
}

// NewGetDetailedLogsUnauthorized builds a metrics service getDetailedLogs
// endpoint Unauthorized error.
func NewGetDetailedLogsUnauthorized(body *GetDetailedLogsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsBadRequest builds a metrics service getDetailedLogs
// endpoint BadRequest error.
func NewGetDetailedLogsBadRequest(body *GetDetailedLogsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsNotFound builds a metrics service getDetailedLogs endpoint
// NotFound error.
func NewGetDetailedLogsNotFound(body *GetDetailedLogsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetDetailedLogsInternalServerError builds a metrics service
// getDetailedLogs endpoint InternalServerError error.
func NewGetDetailedLogsInternalServerError(body *GetDetailedLogsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsMetricsResultOK builds a "metrics" service
// "getSummaryStats" endpoint result from a HTTP "OK" response.
func NewGetSummaryStatsMetricsResultOK(body *GetSummaryStatsResponseBody) *metricsviews.MetricsResultView {
	v := &metricsviews.MetricsResultView{}
	v.SelfHealingTriggerEventsStats = make([]*metricsviews.SHTriggerStatsView, len(body.SelfHealingTriggerEventsStats))
	for i, val := range body.SelfHealingTriggerEventsStats {
		v.SelfHealingTriggerEventsStats[i] = unmarshalSHTriggerStatsResponseBodyToMetricsviewsSHTriggerStatsView(val)
	}
	v.SelfHealingExecutionEventsStats = unmarshalSHExecutionStatsResponseBodyToMetricsviewsSHExecutionStatsView(body.SelfHealingExecutionEventsStats)

	return v
}

// NewGetSummaryStatsUnauthorized builds a metrics service getSummaryStats
// endpoint Unauthorized error.
func NewGetSummaryStatsUnauthorized(body *GetSummaryStatsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsBadRequest builds a metrics service getSummaryStats
// endpoint BadRequest error.
func NewGetSummaryStatsBadRequest(body *GetSummaryStatsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsNotFound builds a metrics service getSummaryStats endpoint
// NotFound error.
func NewGetSummaryStatsNotFound(body *GetSummaryStatsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSummaryStatsInternalServerError builds a metrics service
// getSummaryStats endpoint InternalServerError error.
func NewGetSummaryStatsInternalServerError(body *GetSummaryStatsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetDetailedLogsUnauthorizedResponseBody runs the validations defined
// on getDetailedLogs_Unauthorized_response_body
func ValidateGetDetailedLogsUnauthorizedResponseBody(body *GetDetailedLogsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsBadRequestResponseBody runs the validations defined
// on getDetailedLogs_BadRequest_response_body
func ValidateGetDetailedLogsBadRequestResponseBody(body *GetDetailedLogsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsNotFoundResponseBody runs the validations defined on
// getDetailedLogs_NotFound_response_body
func ValidateGetDetailedLogsNotFoundResponseBody(body *GetDetailedLogsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetDetailedLogsInternalServerErrorResponseBody runs the validations
// defined on getDetailedLogs_InternalServerError_response_body
func ValidateGetDetailedLogsInternalServerErrorResponseBody(body *GetDetailedLogsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsUnauthorizedResponseBody runs the validations defined
// on getSummaryStats_Unauthorized_response_body
func ValidateGetSummaryStatsUnauthorizedResponseBody(body *GetSummaryStatsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsBadRequestResponseBody runs the validations defined
// on getSummaryStats_BadRequest_response_body
func ValidateGetSummaryStatsBadRequestResponseBody(body *GetSummaryStatsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsNotFoundResponseBody runs the validations defined on
// getSummaryStats_NotFound_response_body
func ValidateGetSummaryStatsNotFoundResponseBody(body *GetSummaryStatsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSummaryStatsInternalServerErrorResponseBody runs the validations
// defined on getSummaryStats_InternalServerError_response_body
func ValidateGetSummaryStatsInternalServerErrorResponseBody(body *GetSummaryStatsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSHTriggerStatsResponseBody runs the validations defined on
// SHTriggerStatsResponseBody
func ValidateSHTriggerStatsResponseBody(body *SHTriggerStatsResponseBody) (err error) {
	if body.TriggerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trigger_id", "body"))
	}
	if body.NodesOffline == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nodes_offline", "body"))
	}
	if body.ListOfNodes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list_of_nodes", "body"))
	}
	if body.TotalFilesIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_identified", "body"))
	}
	if body.TotalTicketsIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_tickets_identified", "body"))
	}
	return
}

// ValidateSHExecutionStatsResponseBody runs the validations defined on
// SHExecutionStatsResponseBody
func ValidateSHExecutionStatsResponseBody(body *SHExecutionStatsResponseBody) (err error) {
	if body.TotalSelfHealingEventsIssued == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_issued", "body"))
	}
	if body.TotalSelfHealingEventsAcknowledged == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_acknowledged", "body"))
	}
	if body.TotalSelfHealingEventsRejected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_rejected", "body"))
	}
	if body.TotalSelfHealingEventsAccepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_accepted", "body"))
	}
	if body.TotalSelfHealingEventsEvaluationsVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_evaluations_verified", "body"))
	}
	if body.TotalReconstructionRequiredEvaluationsApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_required_evaluations_approved", "body"))
	}
	if body.TotalReconstructionNotRequiredEvaluationsApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_not_required_evaluations_approved", "body"))
	}
	if body.TotalSelfHealingEventsEvaluationsUnverified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_self_healing_events_evaluations_unverified", "body"))
	}
	if body.TotalReconstructionRequiredEvaluationsNotApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstruction_required_evaluations_not_approved", "body"))
	}
	if body.TotalReconstructionsNotRequiredEvaluationsNotApproved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_reconstructions_not_required_evaluations_not_approved", "body"))
	}
	if body.TotalFilesHealed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_healed", "body"))
	}
	if body.TotalFileHealingFailed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_file_healing_failed", "body"))
	}
	return
}
