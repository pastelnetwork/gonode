// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
)

// GetMetricsResponseBody is the type of the "metrics" service "getMetrics"
// endpoint HTTP response body.
type GetMetricsResponseBody struct {
	// SCMetrics represents serialized metrics data
	ScMetrics []byte `form:"sc_metrics,omitempty" json:"sc_metrics,omitempty" xml:"sc_metrics,omitempty"`
	// Self-healing trigger metrics
	ShTriggerMetrics []*SHTriggerMetricResponseBody `form:"sh_trigger_metrics,omitempty" json:"sh_trigger_metrics,omitempty" xml:"sh_trigger_metrics,omitempty"`
	// Self-healing execution metrics
	ShExecutionMetrics *SHExecutionMetricsResponseBody `form:"sh_execution_metrics,omitempty" json:"sh_execution_metrics,omitempty" xml:"sh_execution_metrics,omitempty"`
}

// GetMetricsUnauthorizedResponseBody is the type of the "metrics" service
// "getMetrics" endpoint HTTP response body for the "Unauthorized" error.
type GetMetricsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetMetricsBadRequestResponseBody is the type of the "metrics" service
// "getMetrics" endpoint HTTP response body for the "BadRequest" error.
type GetMetricsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetMetricsNotFoundResponseBody is the type of the "metrics" service
// "getMetrics" endpoint HTTP response body for the "NotFound" error.
type GetMetricsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetMetricsInternalServerErrorResponseBody is the type of the "metrics"
// service "getMetrics" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMetricsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SHTriggerMetricResponseBody is used to define fields on response body types.
type SHTriggerMetricResponseBody struct {
	// Unique identifier for the trigger
	TriggerID *string `form:"trigger_id,omitempty" json:"trigger_id,omitempty" xml:"trigger_id,omitempty"`
	// Number of nodes offline
	NodesOffline *int `form:"nodes_offline,omitempty" json:"nodes_offline,omitempty" xml:"nodes_offline,omitempty"`
	// Comma-separated list of offline nodes
	ListOfNodes *string `form:"list_of_nodes,omitempty" json:"list_of_nodes,omitempty" xml:"list_of_nodes,omitempty"`
	// Total number of files identified for self-healing
	TotalFilesIdentified *int `form:"total_files_identified,omitempty" json:"total_files_identified,omitempty" xml:"total_files_identified,omitempty"`
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified *int `form:"total_tickets_identified,omitempty" json:"total_tickets_identified,omitempty" xml:"total_tickets_identified,omitempty"`
}

// SHExecutionMetricsResponseBody is used to define fields on response body
// types.
type SHExecutionMetricsResponseBody struct {
	// Total number of challenges issued
	TotalChallengesIssued *int `form:"total_challenges_issued,omitempty" json:"total_challenges_issued,omitempty" xml:"total_challenges_issued,omitempty"`
	// Total number of challenges rejected
	TotalChallengesRejected *int `form:"total_challenges_rejected,omitempty" json:"total_challenges_rejected,omitempty" xml:"total_challenges_rejected,omitempty"`
	// Total number of challenges accepted
	TotalChallengesAccepted *int `form:"total_challenges_accepted,omitempty" json:"total_challenges_accepted,omitempty" xml:"total_challenges_accepted,omitempty"`
	// Total number of challenges failed
	TotalChallengesFailed *int `form:"total_challenges_failed,omitempty" json:"total_challenges_failed,omitempty" xml:"total_challenges_failed,omitempty"`
	// Total number of challenges successful
	TotalChallengesSuccessful *int `form:"total_challenges_successful,omitempty" json:"total_challenges_successful,omitempty" xml:"total_challenges_successful,omitempty"`
	// Total number of files healed
	TotalFilesHealed *int `form:"total_files_healed,omitempty" json:"total_files_healed,omitempty" xml:"total_files_healed,omitempty"`
	// Total number of file healings that failed
	TotalFileHealingFailed *int `form:"total_file_healing_failed,omitempty" json:"total_file_healing_failed,omitempty" xml:"total_file_healing_failed,omitempty"`
}

// NewGetMetricsMetricsResultOK builds a "metrics" service "getMetrics"
// endpoint result from a HTTP "OK" response.
func NewGetMetricsMetricsResultOK(body *GetMetricsResponseBody) *metricsviews.MetricsResultView {
	v := &metricsviews.MetricsResultView{
		ScMetrics: body.ScMetrics,
	}
	v.ShTriggerMetrics = make([]*metricsviews.SHTriggerMetricView, len(body.ShTriggerMetrics))
	for i, val := range body.ShTriggerMetrics {
		v.ShTriggerMetrics[i] = unmarshalSHTriggerMetricResponseBodyToMetricsviewsSHTriggerMetricView(val)
	}
	v.ShExecutionMetrics = unmarshalSHExecutionMetricsResponseBodyToMetricsviewsSHExecutionMetricsView(body.ShExecutionMetrics)

	return v
}

// NewGetMetricsUnauthorized builds a metrics service getMetrics endpoint
// Unauthorized error.
func NewGetMetricsUnauthorized(body *GetMetricsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetMetricsBadRequest builds a metrics service getMetrics endpoint
// BadRequest error.
func NewGetMetricsBadRequest(body *GetMetricsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetMetricsNotFound builds a metrics service getMetrics endpoint NotFound
// error.
func NewGetMetricsNotFound(body *GetMetricsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetMetricsInternalServerError builds a metrics service getMetrics
// endpoint InternalServerError error.
func NewGetMetricsInternalServerError(body *GetMetricsInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetMetricsUnauthorizedResponseBody runs the validations defined on
// getMetrics_Unauthorized_response_body
func ValidateGetMetricsUnauthorizedResponseBody(body *GetMetricsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetMetricsBadRequestResponseBody runs the validations defined on
// getMetrics_BadRequest_response_body
func ValidateGetMetricsBadRequestResponseBody(body *GetMetricsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetMetricsNotFoundResponseBody runs the validations defined on
// getMetrics_NotFound_response_body
func ValidateGetMetricsNotFoundResponseBody(body *GetMetricsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetMetricsInternalServerErrorResponseBody runs the validations
// defined on getMetrics_InternalServerError_response_body
func ValidateGetMetricsInternalServerErrorResponseBody(body *GetMetricsInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSHTriggerMetricResponseBody runs the validations defined on
// SHTriggerMetricResponseBody
func ValidateSHTriggerMetricResponseBody(body *SHTriggerMetricResponseBody) (err error) {
	if body.TriggerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trigger_id", "body"))
	}
	if body.NodesOffline == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nodes_offline", "body"))
	}
	if body.ListOfNodes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("list_of_nodes", "body"))
	}
	if body.TotalFilesIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_identified", "body"))
	}
	if body.TotalTicketsIdentified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_tickets_identified", "body"))
	}
	return
}

// ValidateSHExecutionMetricsResponseBody runs the validations defined on
// SHExecutionMetricsResponseBody
func ValidateSHExecutionMetricsResponseBody(body *SHExecutionMetricsResponseBody) (err error) {
	if body.TotalChallengesIssued == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_issued", "body"))
	}
	if body.TotalChallengesRejected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_rejected", "body"))
	}
	if body.TotalChallengesAccepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_accepted", "body"))
	}
	if body.TotalChallengesFailed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_failed", "body"))
	}
	if body.TotalChallengesSuccessful == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_successful", "body"))
	}
	if body.TotalFilesHealed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_files_healed", "body"))
	}
	if body.TotalFileHealingFailed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_file_healing_failed", "body"))
	}
	return
}
