// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
)

// SelfHealingResponseBody is the type of the "metrics" service "selfHealing"
// endpoint HTTP response body.
type SelfHealingResponseBody struct {
	// Tickets send for self-healing
	TotalTicketsSendForSelfHealing *int `form:"total_tickets_send_for_self_healing,omitempty" json:"total_tickets_send_for_self_healing,omitempty" xml:"total_tickets_send_for_self_healing,omitempty"`
	// Total estimated missing keys
	EstimatedMissingKeys *int `form:"estimated_missing_keys,omitempty" json:"estimated_missing_keys,omitempty" xml:"estimated_missing_keys,omitempty"`
	// Tickets required self healing
	TicketsRequiredSelfHealing *int `form:"tickets_required_self_healing,omitempty" json:"tickets_required_self_healing,omitempty" xml:"tickets_required_self_healing,omitempty"`
	// Tickets self-healed successfully
	TicketsSelfHealedSuccessfully *int `form:"tickets_self_healed_successfully,omitempty" json:"tickets_self_healed_successfully,omitempty" xml:"tickets_self_healed_successfully,omitempty"`
	// Tickets verified successfully
	TicketsVerifiedSuccessfully *int `form:"tickets_verified_successfully,omitempty" json:"tickets_verified_successfully,omitempty" xml:"tickets_verified_successfully,omitempty"`
}

// SelfHealingBadRequestResponseBody is the type of the "metrics" service
// "selfHealing" endpoint HTTP response body for the "BadRequest" error.
type SelfHealingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SelfHealingInternalServerErrorResponseBody is the type of the "metrics"
// service "selfHealing" endpoint HTTP response body for the
// "InternalServerError" error.
type SelfHealingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewSelfHealingMetricsViewCreated builds a "metrics" service "selfHealing"
// endpoint result from a HTTP "Created" response.
func NewSelfHealingMetricsViewCreated(body *SelfHealingResponseBody) *metricsviews.SelfHealingMetricsView {
	v := &metricsviews.SelfHealingMetricsView{
		TotalTicketsSendForSelfHealing: body.TotalTicketsSendForSelfHealing,
		EstimatedMissingKeys:           body.EstimatedMissingKeys,
		TicketsRequiredSelfHealing:     body.TicketsRequiredSelfHealing,
		TicketsSelfHealedSuccessfully:  body.TicketsSelfHealedSuccessfully,
		TicketsVerifiedSuccessfully:    body.TicketsVerifiedSuccessfully,
	}

	return v
}

// NewSelfHealingBadRequest builds a metrics service selfHealing endpoint
// BadRequest error.
func NewSelfHealingBadRequest(body *SelfHealingBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSelfHealingInternalServerError builds a metrics service selfHealing
// endpoint InternalServerError error.
func NewSelfHealingInternalServerError(body *SelfHealingInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateSelfHealingBadRequestResponseBody runs the validations defined on
// selfHealing_BadRequest_response_body
func ValidateSelfHealingBadRequestResponseBody(body *SelfHealingBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSelfHealingInternalServerErrorResponseBody runs the validations
// defined on selfHealing_InternalServerError_response_body
func ValidateSelfHealingInternalServerErrorResponseBody(body *SelfHealingInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
