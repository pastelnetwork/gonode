// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	metrics "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics"
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetMetricsRequest instantiates a HTTP request object with method and
// path set to call the "metrics" service "getMetrics" endpoint
func (c *Client) BuildGetMetricsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetMetricsMetricsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("metrics", "getMetrics", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetMetricsRequest returns an encoder for requests sent to the metrics
// getMetrics server.
func EncodeGetMetricsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*metrics.GetMetricsPayload)
		if !ok {
			return goahttp.ErrInvalidType("metrics", "getMetrics", "*metrics.GetMetricsPayload", v)
		}
		{
			head := p.Key
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		if p.From != nil {
			values.Add("from", *p.From)
		}
		if p.To != nil {
			values.Add("to", *p.To)
		}
		values.Add("pid", p.Pid)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetMetricsResponse returns a decoder for responses returned by the
// metrics getMetrics endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetMetricsResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetMetricsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetMetricsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "getMetrics", err)
			}
			p := NewGetMetricsMetricsResultOK(&body)
			view := "default"
			vres := &metricsviews.MetricsResult{Projected: p, View: view}
			if err = metricsviews.ValidateMetricsResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("metrics", "getMetrics", err)
			}
			res := metrics.NewMetricsResult(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetMetricsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "getMetrics", err)
			}
			err = ValidateGetMetricsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("metrics", "getMetrics", err)
			}
			return nil, NewGetMetricsUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body GetMetricsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "getMetrics", err)
			}
			err = ValidateGetMetricsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("metrics", "getMetrics", err)
			}
			return nil, NewGetMetricsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetMetricsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "getMetrics", err)
			}
			err = ValidateGetMetricsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("metrics", "getMetrics", err)
			}
			return nil, NewGetMetricsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetMetricsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "getMetrics", err)
			}
			err = ValidateGetMetricsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("metrics", "getMetrics", err)
			}
			return nil, NewGetMetricsInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("metrics", "getMetrics", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSHTriggerMetricResponseBodyToMetricsviewsSHTriggerMetricView builds
// a value of type *metricsviews.SHTriggerMetricView from a value of type
// *SHTriggerMetricResponseBody.
func unmarshalSHTriggerMetricResponseBodyToMetricsviewsSHTriggerMetricView(v *SHTriggerMetricResponseBody) *metricsviews.SHTriggerMetricView {
	res := &metricsviews.SHTriggerMetricView{
		TriggerID:              v.TriggerID,
		NodesOffline:           v.NodesOffline,
		ListOfNodes:            v.ListOfNodes,
		TotalFilesIdentified:   v.TotalFilesIdentified,
		TotalTicketsIdentified: v.TotalTicketsIdentified,
	}

	return res
}

// unmarshalSHExecutionMetricsResponseBodyToMetricsviewsSHExecutionMetricsView
// builds a value of type *metricsviews.SHExecutionMetricsView from a value of
// type *SHExecutionMetricsResponseBody.
func unmarshalSHExecutionMetricsResponseBodyToMetricsviewsSHExecutionMetricsView(v *SHExecutionMetricsResponseBody) *metricsviews.SHExecutionMetricsView {
	res := &metricsviews.SHExecutionMetricsView{
		TotalChallengesIssued:     v.TotalChallengesIssued,
		TotalChallengesRejected:   v.TotalChallengesRejected,
		TotalChallengesAccepted:   v.TotalChallengesAccepted,
		TotalChallengesFailed:     v.TotalChallengesFailed,
		TotalChallengesSuccessful: v.TotalChallengesSuccessful,
		TotalFilesHealed:          v.TotalFilesHealed,
		TotalFileHealingFailed:    v.TotalFileHealingFailed,
	}

	return res
}
