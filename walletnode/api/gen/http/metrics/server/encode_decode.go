// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"context"
	"errors"
	"net/http"
	"strings"

	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetMetricsResponse returns an encoder for responses returned by the
// metrics getMetrics endpoint.
func EncodeGetMetricsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*metricsviews.MetricsResult)
		enc := encoder(ctx, w)
		body := NewGetMetricsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetMetricsRequest returns a decoder for requests sent to the metrics
// getMetrics endpoint.
func DecodeGetMetricsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			from *string
			to   *string
			pid  string
			key  string
			err  error
		)
		fromRaw := r.URL.Query().Get("from")
		if fromRaw != "" {
			from = &fromRaw
		}
		if from != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("from", *from, goa.FormatDateTime))
		}
		toRaw := r.URL.Query().Get("to")
		if toRaw != "" {
			to = &toRaw
		}
		if to != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("to", *to, goa.FormatDateTime))
		}
		pid = r.URL.Query().Get("pid")
		if pid == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("pid", "query string"))
		}
		key = r.Header.Get("Authorization")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("key", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetMetricsPayload(from, to, pid, key)
		if strings.Contains(payload.Key, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Key, " ", 2)[1]
			payload.Key = cred
		}

		return payload, nil
	}
}

// EncodeGetMetricsError returns an encoder for errors returned by the
// getMetrics metrics endpoint.
func EncodeGetMetricsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "Unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetMetricsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "BadRequest":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetMetricsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetMetricsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "InternalServerError":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetMetricsInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalMetricsviewsSHTriggerMetricViewToSHTriggerMetricResponseBody builds a
// value of type *SHTriggerMetricResponseBody from a value of type
// *metricsviews.SHTriggerMetricView.
func marshalMetricsviewsSHTriggerMetricViewToSHTriggerMetricResponseBody(v *metricsviews.SHTriggerMetricView) *SHTriggerMetricResponseBody {
	res := &SHTriggerMetricResponseBody{
		TriggerID:              *v.TriggerID,
		NodesOffline:           *v.NodesOffline,
		ListOfNodes:            *v.ListOfNodes,
		TotalFilesIdentified:   *v.TotalFilesIdentified,
		TotalTicketsIdentified: *v.TotalTicketsIdentified,
	}

	return res
}

// marshalMetricsviewsSHExecutionMetricsViewToSHExecutionMetricsResponseBody
// builds a value of type *SHExecutionMetricsResponseBody from a value of type
// *metricsviews.SHExecutionMetricsView.
func marshalMetricsviewsSHExecutionMetricsViewToSHExecutionMetricsResponseBody(v *metricsviews.SHExecutionMetricsView) *SHExecutionMetricsResponseBody {
	res := &SHExecutionMetricsResponseBody{
		TotalChallengesIssued:     *v.TotalChallengesIssued,
		TotalChallengesRejected:   *v.TotalChallengesRejected,
		TotalChallengesAccepted:   *v.TotalChallengesAccepted,
		TotalChallengesFailed:     *v.TotalChallengesFailed,
		TotalChallengesSuccessful: *v.TotalChallengesSuccessful,
		TotalFilesHealed:          *v.TotalFilesHealed,
		TotalFileHealingFailed:    *v.TotalFileHealingFailed,
	}

	return res
}
