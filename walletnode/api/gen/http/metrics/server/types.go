// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	metrics "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics"
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
)

// SelfHealingResponseBody is the type of the "metrics" service "selfHealing"
// endpoint HTTP response body.
type SelfHealingResponseBody struct {
	// Tickets send for self-healing
	TotalTicketsSendForSelfHealing *int `form:"total_tickets_send_for_self_healing,omitempty" json:"total_tickets_send_for_self_healing,omitempty" xml:"total_tickets_send_for_self_healing,omitempty"`
	// Total estimated missing keys
	EstimatedMissingKeys *int `form:"estimated_missing_keys,omitempty" json:"estimated_missing_keys,omitempty" xml:"estimated_missing_keys,omitempty"`
	// Tickets required self healing
	TicketsRequiredSelfHealing *int `form:"tickets_required_self_healing,omitempty" json:"tickets_required_self_healing,omitempty" xml:"tickets_required_self_healing,omitempty"`
	// Tickets self-healed successfully
	TicketsSelfHealedSuccessfully *int `form:"tickets_self_healed_successfully,omitempty" json:"tickets_self_healed_successfully,omitempty" xml:"tickets_self_healed_successfully,omitempty"`
	// Tickets verified successfully
	TicketsVerifiedSuccessfully *int `form:"tickets_verified_successfully,omitempty" json:"tickets_verified_successfully,omitempty" xml:"tickets_verified_successfully,omitempty"`
}

// SelfHealingBadRequestResponseBody is the type of the "metrics" service
// "selfHealing" endpoint HTTP response body for the "BadRequest" error.
type SelfHealingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SelfHealingInternalServerErrorResponseBody is the type of the "metrics"
// service "selfHealing" endpoint HTTP response body for the
// "InternalServerError" error.
type SelfHealingInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewSelfHealingResponseBody builds the HTTP response body from the result of
// the "selfHealing" endpoint of the "metrics" service.
func NewSelfHealingResponseBody(res *metricsviews.SelfHealingMetricsView) *SelfHealingResponseBody {
	body := &SelfHealingResponseBody{
		TotalTicketsSendForSelfHealing: res.TotalTicketsSendForSelfHealing,
		EstimatedMissingKeys:           res.EstimatedMissingKeys,
		TicketsRequiredSelfHealing:     res.TicketsRequiredSelfHealing,
		TicketsSelfHealedSuccessfully:  res.TicketsSelfHealedSuccessfully,
		TicketsVerifiedSuccessfully:    res.TicketsVerifiedSuccessfully,
	}
	return body
}

// NewSelfHealingBadRequestResponseBody builds the HTTP response body from the
// result of the "selfHealing" endpoint of the "metrics" service.
func NewSelfHealingBadRequestResponseBody(res *goa.ServiceError) *SelfHealingBadRequestResponseBody {
	body := &SelfHealingBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSelfHealingInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "selfHealing" endpoint of the "metrics" service.
func NewSelfHealingInternalServerErrorResponseBody(res *goa.ServiceError) *SelfHealingInternalServerErrorResponseBody {
	body := &SelfHealingInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSelfHealingMetricsPayload builds a metrics service selfHealing endpoint
// payload.
func NewSelfHealingMetricsPayload(pid string, key string) *metrics.MetricsPayload {
	v := &metrics.MetricsPayload{}
	v.Pid = pid
	v.Key = key

	return v
}
