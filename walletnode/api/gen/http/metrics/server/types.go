// Code generated by goa v3.14.0, DO NOT EDIT.
//
// metrics HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	metrics "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics"
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
)

// GetMetricsResponseBody is the type of the "metrics" service "getMetrics"
// endpoint HTTP response body.
type GetMetricsResponseBody struct {
	// SCMetrics represents serialized metrics data
	ScMetrics []byte `form:"sc_metrics" json:"sc_metrics" xml:"sc_metrics"`
	// Self-healing trigger metrics
	ShTriggerMetrics []*SHTriggerMetricResponseBody `form:"sh_trigger_metrics" json:"sh_trigger_metrics" xml:"sh_trigger_metrics"`
	// Self-healing execution metrics
	ShExecutionMetrics *SHExecutionMetricsResponseBody `form:"sh_execution_metrics" json:"sh_execution_metrics" xml:"sh_execution_metrics"`
}

// GetMetricsUnauthorizedResponseBody is the type of the "metrics" service
// "getMetrics" endpoint HTTP response body for the "Unauthorized" error.
type GetMetricsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMetricsBadRequestResponseBody is the type of the "metrics" service
// "getMetrics" endpoint HTTP response body for the "BadRequest" error.
type GetMetricsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMetricsNotFoundResponseBody is the type of the "metrics" service
// "getMetrics" endpoint HTTP response body for the "NotFound" error.
type GetMetricsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetMetricsInternalServerErrorResponseBody is the type of the "metrics"
// service "getMetrics" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMetricsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SHTriggerMetricResponseBody is used to define fields on response body types.
type SHTriggerMetricResponseBody struct {
	// Unique identifier for the trigger
	TriggerID string `form:"trigger_id" json:"trigger_id" xml:"trigger_id"`
	// Number of nodes offline
	NodesOffline int `form:"nodes_offline" json:"nodes_offline" xml:"nodes_offline"`
	// Comma-separated list of offline nodes
	ListOfNodes string `form:"list_of_nodes" json:"list_of_nodes" xml:"list_of_nodes"`
	// Total number of files identified for self-healing
	TotalFilesIdentified int `form:"total_files_identified" json:"total_files_identified" xml:"total_files_identified"`
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified int `form:"total_tickets_identified" json:"total_tickets_identified" xml:"total_tickets_identified"`
}

// SHExecutionMetricsResponseBody is used to define fields on response body
// types.
type SHExecutionMetricsResponseBody struct {
	// Total number of challenges issued
	TotalChallengesIssued int `form:"total_challenges_issued" json:"total_challenges_issued" xml:"total_challenges_issued"`
	// Total number of challenges rejected
	TotalChallengesRejected int `form:"total_challenges_rejected" json:"total_challenges_rejected" xml:"total_challenges_rejected"`
	// Total number of challenges accepted
	TotalChallengesAccepted int `form:"total_challenges_accepted" json:"total_challenges_accepted" xml:"total_challenges_accepted"`
	// Total number of challenges failed
	TotalChallengesFailed int `form:"total_challenges_failed" json:"total_challenges_failed" xml:"total_challenges_failed"`
	// Total number of challenges successful
	TotalChallengesSuccessful int `form:"total_challenges_successful" json:"total_challenges_successful" xml:"total_challenges_successful"`
	// Total number of files healed
	TotalFilesHealed int `form:"total_files_healed" json:"total_files_healed" xml:"total_files_healed"`
	// Total number of file healings that failed
	TotalFileHealingFailed int `form:"total_file_healing_failed" json:"total_file_healing_failed" xml:"total_file_healing_failed"`
}

// NewGetMetricsResponseBody builds the HTTP response body from the result of
// the "getMetrics" endpoint of the "metrics" service.
func NewGetMetricsResponseBody(res *metricsviews.MetricsResultView) *GetMetricsResponseBody {
	body := &GetMetricsResponseBody{
		ScMetrics: res.ScMetrics,
	}
	if res.ShTriggerMetrics != nil {
		body.ShTriggerMetrics = make([]*SHTriggerMetricResponseBody, len(res.ShTriggerMetrics))
		for i, val := range res.ShTriggerMetrics {
			body.ShTriggerMetrics[i] = marshalMetricsviewsSHTriggerMetricViewToSHTriggerMetricResponseBody(val)
		}
	} else {
		body.ShTriggerMetrics = []*SHTriggerMetricResponseBody{}
	}
	if res.ShExecutionMetrics != nil {
		body.ShExecutionMetrics = marshalMetricsviewsSHExecutionMetricsViewToSHExecutionMetricsResponseBody(res.ShExecutionMetrics)
	}
	return body
}

// NewGetMetricsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "getMetrics" endpoint of the "metrics" service.
func NewGetMetricsUnauthorizedResponseBody(res *goa.ServiceError) *GetMetricsUnauthorizedResponseBody {
	body := &GetMetricsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMetricsBadRequestResponseBody builds the HTTP response body from the
// result of the "getMetrics" endpoint of the "metrics" service.
func NewGetMetricsBadRequestResponseBody(res *goa.ServiceError) *GetMetricsBadRequestResponseBody {
	body := &GetMetricsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMetricsNotFoundResponseBody builds the HTTP response body from the
// result of the "getMetrics" endpoint of the "metrics" service.
func NewGetMetricsNotFoundResponseBody(res *goa.ServiceError) *GetMetricsNotFoundResponseBody {
	body := &GetMetricsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMetricsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "getMetrics" endpoint of the "metrics" service.
func NewGetMetricsInternalServerErrorResponseBody(res *goa.ServiceError) *GetMetricsInternalServerErrorResponseBody {
	body := &GetMetricsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetMetricsPayload builds a metrics service getMetrics endpoint payload.
func NewGetMetricsPayload(from *string, to *string, pid string, key string) *metrics.GetMetricsPayload {
	v := &metrics.GetMetricsPayload{}
	v.From = from
	v.To = to
	v.Pid = pid
	v.Key = key

	return v
}
