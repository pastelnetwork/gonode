// Code generated by goa v3.15.0, DO NOT EDIT.
//
// metrics HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	metrics "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics"
	metricsviews "github.com/pastelnetwork/gonode/walletnode/api/gen/metrics/views"
	goa "goa.design/goa/v3/pkg"
)

// GetDetailedLogsResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body.
type GetDetailedLogsResponseBody struct {
	// Map of challenge ID to SelfHealingReport
	Reports []*SelfHealingReportKVResponseBody `form:"reports,omitempty" json:"reports,omitempty" xml:"reports,omitempty"`
}

// GetSummaryStatsResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body.
type GetSummaryStatsResponseBody struct {
	// Self-healing trigger stats
	SelfHealingTriggerEventsStats []*SHTriggerStatsResponseBody `form:"self_healing_trigger_events_stats" json:"self_healing_trigger_events_stats" xml:"self_healing_trigger_events_stats"`
	// Self-healing execution stats
	SelfHealingExecutionEventsStats *SHExecutionStatsResponseBody `form:"self_healing_execution_events_stats" json:"self_healing_execution_events_stats" xml:"self_healing_execution_events_stats"`
}

// GetDetailedLogsUnauthorizedResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body for the "Unauthorized" error.
type GetDetailedLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsBadRequestResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body for the "BadRequest" error.
type GetDetailedLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsNotFoundResponseBody is the type of the "metrics" service
// "getDetailedLogs" endpoint HTTP response body for the "NotFound" error.
type GetDetailedLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsInternalServerErrorResponseBody is the type of the "metrics"
// service "getDetailedLogs" endpoint HTTP response body for the
// "InternalServerError" error.
type GetDetailedLogsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsUnauthorizedResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body for the "Unauthorized" error.
type GetSummaryStatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsBadRequestResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body for the "BadRequest" error.
type GetSummaryStatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsNotFoundResponseBody is the type of the "metrics" service
// "getSummaryStats" endpoint HTTP response body for the "NotFound" error.
type GetSummaryStatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsInternalServerErrorResponseBody is the type of the "metrics"
// service "getSummaryStats" endpoint HTTP response body for the
// "InternalServerError" error.
type GetSummaryStatsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SelfHealingReportKVResponseBody is used to define fields on response body
// types.
type SelfHealingReportKVResponseBody struct {
	// Challenge ID
	EventID *string `form:"event_id,omitempty" json:"event_id,omitempty" xml:"event_id,omitempty"`
	// Self-healing report
	Report *SelfHealingReportResponseBody `form:"report,omitempty" json:"report,omitempty" xml:"report,omitempty"`
}

// SelfHealingReportResponseBody is used to define fields on response body
// types.
type SelfHealingReportResponseBody struct {
	// Map of message type to SelfHealingMessages
	Messages []*SelfHealingMessageKVResponseBody `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
}

// SelfHealingMessageKVResponseBody is used to define fields on response body
// types.
type SelfHealingMessageKVResponseBody struct {
	// Message type
	MessageType *string `form:"message_type,omitempty" json:"message_type,omitempty" xml:"message_type,omitempty"`
	// Self-healing messages
	Messages []*SelfHealingMessageResponseBody `form:"messages,omitempty" json:"messages,omitempty" xml:"messages,omitempty"`
}

// SelfHealingMessageResponseBody is used to define fields on response body
// types.
type SelfHealingMessageResponseBody struct {
	TriggerID       *string                             `form:"trigger_id,omitempty" json:"trigger_id,omitempty" xml:"trigger_id,omitempty"`
	MessageType     *string                             `form:"message_type,omitempty" json:"message_type,omitempty" xml:"message_type,omitempty"`
	Data            *SelfHealingMessageDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	SenderID        *string                             `form:"sender_id,omitempty" json:"sender_id,omitempty" xml:"sender_id,omitempty"`
	SenderSignature []byte                              `form:"sender_signature,omitempty" json:"sender_signature,omitempty" xml:"sender_signature,omitempty"`
}

// SelfHealingMessageDataResponseBody is used to define fields on response body
// types.
type SelfHealingMessageDataResponseBody struct {
	ChallengerID *string                                  `form:"challenger_id,omitempty" json:"challenger_id,omitempty" xml:"challenger_id,omitempty"`
	RecipientID  *string                                  `form:"recipient_id,omitempty" json:"recipient_id,omitempty" xml:"recipient_id,omitempty"`
	Challenge    *SelfHealingChallengeDataResponseBody    `form:"challenge,omitempty" json:"challenge,omitempty" xml:"challenge,omitempty"`
	Response     *SelfHealingResponseDataResponseBody     `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
	Verification *SelfHealingVerificationDataResponseBody `form:"verification,omitempty" json:"verification,omitempty" xml:"verification,omitempty"`
}

// SelfHealingChallengeDataResponseBody is used to define fields on response
// body types.
type SelfHealingChallengeDataResponseBody struct {
	Block            *int32                         `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	Merkelroot       *string                        `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	Timestamp        *string                        `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	ChallengeTickets []*ChallengeTicketResponseBody `form:"challenge_tickets,omitempty" json:"challenge_tickets,omitempty" xml:"challenge_tickets,omitempty"`
	NodesOnWatchlist *string                        `form:"nodes_on_watchlist,omitempty" json:"nodes_on_watchlist,omitempty" xml:"nodes_on_watchlist,omitempty"`
}

// ChallengeTicketResponseBody is used to define fields on response body types.
type ChallengeTicketResponseBody struct {
	TxID        *string  `form:"tx_id,omitempty" json:"tx_id,omitempty" xml:"tx_id,omitempty"`
	TicketType  *string  `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	MissingKeys []string `form:"missing_keys,omitempty" json:"missing_keys,omitempty" xml:"missing_keys,omitempty"`
	DataHash    []byte   `form:"data_hash,omitempty" json:"data_hash,omitempty" xml:"data_hash,omitempty"`
	Recipient   *string  `form:"recipient,omitempty" json:"recipient,omitempty" xml:"recipient,omitempty"`
}

// SelfHealingResponseDataResponseBody is used to define fields on response
// body types.
type SelfHealingResponseDataResponseBody struct {
	ChallengeID     *string                      `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	Block           *int32                       `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	Merkelroot      *string                      `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	Timestamp       *string                      `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	RespondedTicket *RespondedTicketResponseBody `form:"responded_ticket,omitempty" json:"responded_ticket,omitempty" xml:"responded_ticket,omitempty"`
	Verifiers       []string                     `form:"verifiers,omitempty" json:"verifiers,omitempty" xml:"verifiers,omitempty"`
}

// RespondedTicketResponseBody is used to define fields on response body types.
type RespondedTicketResponseBody struct {
	TxID                     *string  `form:"tx_id,omitempty" json:"tx_id,omitempty" xml:"tx_id,omitempty"`
	TicketType               *string  `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	MissingKeys              []string `form:"missing_keys,omitempty" json:"missing_keys,omitempty" xml:"missing_keys,omitempty"`
	ReconstructedFileHash    []byte   `form:"reconstructed_file_hash,omitempty" json:"reconstructed_file_hash,omitempty" xml:"reconstructed_file_hash,omitempty"`
	SenseFileIds             []string `form:"sense_file_ids,omitempty" json:"sense_file_ids,omitempty" xml:"sense_file_ids,omitempty"`
	RaptorQSymbols           []byte   `form:"raptor_q_symbols,omitempty" json:"raptor_q_symbols,omitempty" xml:"raptor_q_symbols,omitempty"`
	IsReconstructionRequired *bool    `form:"is_reconstruction_required,omitempty" json:"is_reconstruction_required,omitempty" xml:"is_reconstruction_required,omitempty"`
}

// SelfHealingVerificationDataResponseBody is used to define fields on response
// body types.
type SelfHealingVerificationDataResponseBody struct {
	ChallengeID    *string                     `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	Block          *int32                      `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	Merkelroot     *string                     `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	Timestamp      *string                     `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	VerifiedTicket *VerifiedTicketResponseBody `form:"verified_ticket,omitempty" json:"verified_ticket,omitempty" xml:"verified_ticket,omitempty"`
	VerifiersData  map[string][]byte           `form:"verifiers_data,omitempty" json:"verifiers_data,omitempty" xml:"verifiers_data,omitempty"`
}

// VerifiedTicketResponseBody is used to define fields on response body types.
type VerifiedTicketResponseBody struct {
	TxID                     *string  `form:"tx_id,omitempty" json:"tx_id,omitempty" xml:"tx_id,omitempty"`
	TicketType               *string  `form:"ticket_type,omitempty" json:"ticket_type,omitempty" xml:"ticket_type,omitempty"`
	MissingKeys              []string `form:"missing_keys,omitempty" json:"missing_keys,omitempty" xml:"missing_keys,omitempty"`
	ReconstructedFileHash    []byte   `form:"reconstructed_file_hash,omitempty" json:"reconstructed_file_hash,omitempty" xml:"reconstructed_file_hash,omitempty"`
	IsReconstructionRequired *bool    `form:"is_reconstruction_required,omitempty" json:"is_reconstruction_required,omitempty" xml:"is_reconstruction_required,omitempty"`
	RaptorQSymbols           []byte   `form:"raptor_q_symbols,omitempty" json:"raptor_q_symbols,omitempty" xml:"raptor_q_symbols,omitempty"`
	SenseFileIds             []string `form:"sense_file_ids,omitempty" json:"sense_file_ids,omitempty" xml:"sense_file_ids,omitempty"`
	IsVerified               *bool    `form:"is_verified,omitempty" json:"is_verified,omitempty" xml:"is_verified,omitempty"`
	Message                  *string  `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SHTriggerStatsResponseBody is used to define fields on response body types.
type SHTriggerStatsResponseBody struct {
	// Unique identifier for the trigger
	TriggerID string `form:"trigger_id" json:"trigger_id" xml:"trigger_id"`
	// Number of nodes offline
	NodesOffline int `form:"nodes_offline" json:"nodes_offline" xml:"nodes_offline"`
	// Comma-separated list of offline nodes
	ListOfNodes string `form:"list_of_nodes" json:"list_of_nodes" xml:"list_of_nodes"`
	// Total number of files identified for self-healing
	TotalFilesIdentified int `form:"total_files_identified" json:"total_files_identified" xml:"total_files_identified"`
	// Total number of tickets identified for self-healing
	TotalTicketsIdentified int `form:"total_tickets_identified" json:"total_tickets_identified" xml:"total_tickets_identified"`
}

// SHExecutionStatsResponseBody is used to define fields on response body types.
type SHExecutionStatsResponseBody struct {
	// Total number of self-healing events issued
	TotalSelfHealingEventsIssued int `form:"total_self_healing_events_issued" json:"total_self_healing_events_issued" xml:"total_self_healing_events_issued"`
	// Total number of events acknowledged by the healer node
	TotalSelfHealingEventsAcknowledged int `form:"total_self_healing_events_acknowledged" json:"total_self_healing_events_acknowledged" xml:"total_self_healing_events_acknowledged"`
	// Total number of events rejected (healer node evaluated that reconstruction
	// is not required)
	TotalSelfHealingEventsRejected int `form:"total_self_healing_events_rejected" json:"total_self_healing_events_rejected" xml:"total_self_healing_events_rejected"`
	// Total number of events accepted (healer node evaluated that reconstruction
	// is required)
	TotalSelfHealingEventsAccepted int `form:"total_self_healing_events_accepted" json:"total_self_healing_events_accepted" xml:"total_self_healing_events_accepted"`
	// Total number of challenges verified
	TotalSelfHealingEventsEvaluationsVerified int `form:"total_self_healing_events_evaluations_verified" json:"total_self_healing_events_evaluations_verified" xml:"total_self_healing_events_evaluations_verified"`
	// Total number of reconstructions approved by verifier nodes
	TotalReconstructionRequiredEvaluationsApproved int `form:"total_reconstruction_required_evaluations_approved" json:"total_reconstruction_required_evaluations_approved" xml:"total_reconstruction_required_evaluations_approved"`
	// Total number of reconstructions not required approved by verifier nodes
	TotalReconstructionNotRequiredEvaluationsApproved int `form:"total_reconstruction_not_required_evaluations_approved" json:"total_reconstruction_not_required_evaluations_approved" xml:"total_reconstruction_not_required_evaluations_approved"`
	// Total number of challenge evaluations unverified by verifier nodes
	TotalSelfHealingEventsEvaluationsUnverified int `form:"total_self_healing_events_evaluations_unverified" json:"total_self_healing_events_evaluations_unverified" xml:"total_self_healing_events_evaluations_unverified"`
	// Total number of reconstructions not approved by verifier nodes
	TotalReconstructionRequiredEvaluationsNotApproved int `form:"total_reconstruction_required_evaluations_not_approved" json:"total_reconstruction_required_evaluations_not_approved" xml:"total_reconstruction_required_evaluations_not_approved"`
	// Total number of reconstructions not required evaluation not approved by
	// verifier nodes
	TotalReconstructionsNotRequiredEvaluationsNotApproved int `form:"total_reconstructions_not_required_evaluations_not_approved" json:"total_reconstructions_not_required_evaluations_not_approved" xml:"total_reconstructions_not_required_evaluations_not_approved"`
	// Total number of reconstructions required with hash mismatch
	TotalReconstructionRequiredHashMismatch *int `form:"total_reconstruction_required_hash_mismatch,omitempty" json:"total_reconstruction_required_hash_mismatch,omitempty" xml:"total_reconstruction_required_hash_mismatch,omitempty"`
	// Total number of files healed
	TotalFilesHealed int `form:"total_files_healed" json:"total_files_healed" xml:"total_files_healed"`
	// Total number of file healings that failed
	TotalFileHealingFailed int `form:"total_file_healing_failed" json:"total_file_healing_failed" xml:"total_file_healing_failed"`
}

// NewGetDetailedLogsResponseBody builds the HTTP response body from the result
// of the "getDetailedLogs" endpoint of the "metrics" service.
func NewGetDetailedLogsResponseBody(res *metrics.SelfHealingReports) *GetDetailedLogsResponseBody {
	body := &GetDetailedLogsResponseBody{}
	if res.Reports != nil {
		body.Reports = make([]*SelfHealingReportKVResponseBody, len(res.Reports))
		for i, val := range res.Reports {
			body.Reports[i] = marshalMetricsSelfHealingReportKVToSelfHealingReportKVResponseBody(val)
		}
	}
	return body
}

// NewGetSummaryStatsResponseBody builds the HTTP response body from the result
// of the "getSummaryStats" endpoint of the "metrics" service.
func NewGetSummaryStatsResponseBody(res *metricsviews.MetricsResultView) *GetSummaryStatsResponseBody {
	body := &GetSummaryStatsResponseBody{}
	if res.SelfHealingTriggerEventsStats != nil {
		body.SelfHealingTriggerEventsStats = make([]*SHTriggerStatsResponseBody, len(res.SelfHealingTriggerEventsStats))
		for i, val := range res.SelfHealingTriggerEventsStats {
			body.SelfHealingTriggerEventsStats[i] = marshalMetricsviewsSHTriggerStatsViewToSHTriggerStatsResponseBody(val)
		}
	} else {
		body.SelfHealingTriggerEventsStats = []*SHTriggerStatsResponseBody{}
	}
	if res.SelfHealingExecutionEventsStats != nil {
		body.SelfHealingExecutionEventsStats = marshalMetricsviewsSHExecutionStatsViewToSHExecutionStatsResponseBody(res.SelfHealingExecutionEventsStats)
	}
	return body
}

// NewGetDetailedLogsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getDetailedLogs" endpoint of the "metrics" service.
func NewGetDetailedLogsUnauthorizedResponseBody(res *goa.ServiceError) *GetDetailedLogsUnauthorizedResponseBody {
	body := &GetDetailedLogsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsBadRequestResponseBody builds the HTTP response body from
// the result of the "getDetailedLogs" endpoint of the "metrics" service.
func NewGetDetailedLogsBadRequestResponseBody(res *goa.ServiceError) *GetDetailedLogsBadRequestResponseBody {
	body := &GetDetailedLogsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsNotFoundResponseBody builds the HTTP response body from
// the result of the "getDetailedLogs" endpoint of the "metrics" service.
func NewGetDetailedLogsNotFoundResponseBody(res *goa.ServiceError) *GetDetailedLogsNotFoundResponseBody {
	body := &GetDetailedLogsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getDetailedLogs" endpoint of the "metrics"
// service.
func NewGetDetailedLogsInternalServerErrorResponseBody(res *goa.ServiceError) *GetDetailedLogsInternalServerErrorResponseBody {
	body := &GetDetailedLogsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getSummaryStats" endpoint of the "metrics" service.
func NewGetSummaryStatsUnauthorizedResponseBody(res *goa.ServiceError) *GetSummaryStatsUnauthorizedResponseBody {
	body := &GetSummaryStatsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsBadRequestResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "metrics" service.
func NewGetSummaryStatsBadRequestResponseBody(res *goa.ServiceError) *GetSummaryStatsBadRequestResponseBody {
	body := &GetSummaryStatsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsNotFoundResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "metrics" service.
func NewGetSummaryStatsNotFoundResponseBody(res *goa.ServiceError) *GetSummaryStatsNotFoundResponseBody {
	body := &GetSummaryStatsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getSummaryStats" endpoint of the "metrics"
// service.
func NewGetSummaryStatsInternalServerErrorResponseBody(res *goa.ServiceError) *GetSummaryStatsInternalServerErrorResponseBody {
	body := &GetSummaryStatsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsPayload builds a metrics service getDetailedLogs endpoint
// payload.
func NewGetDetailedLogsPayload(pid string, eventID *string, count *int, key string) *metrics.GetDetailedLogsPayload {
	v := &metrics.GetDetailedLogsPayload{}
	v.Pid = pid
	v.EventID = eventID
	v.Count = count
	v.Key = key

	return v
}

// NewGetSummaryStatsPayload builds a metrics service getSummaryStats endpoint
// payload.
func NewGetSummaryStatsPayload(from *string, to *string, pid string, key string) *metrics.GetSummaryStatsPayload {
	v := &metrics.GetSummaryStatsPayload{}
	v.From = from
	v.To = to
	v.Pid = pid
	v.Key = key

	return v
}
