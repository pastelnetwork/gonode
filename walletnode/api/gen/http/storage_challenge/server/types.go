// Code generated by goa v3.14.0, DO NOT EDIT.
//
// StorageChallenge HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	storagechallenge "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge"
	storagechallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// GetSummaryStatsResponseBody is the type of the "StorageChallenge" service
// "getSummaryStats" endpoint HTTP response body.
type GetSummaryStatsResponseBody struct {
	// SCSummaryStats represents storage challenge summary of metrics stats
	ScSummaryStats *SCSummaryStatsResponseBody `form:"sc_summary_stats" json:"sc_summary_stats" xml:"sc_summary_stats"`
}

// GetSummaryStatsUnauthorizedResponseBody is the type of the
// "StorageChallenge" service "getSummaryStats" endpoint HTTP response body for
// the "Unauthorized" error.
type GetSummaryStatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsBadRequestResponseBody is the type of the "StorageChallenge"
// service "getSummaryStats" endpoint HTTP response body for the "BadRequest"
// error.
type GetSummaryStatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsNotFoundResponseBody is the type of the "StorageChallenge"
// service "getSummaryStats" endpoint HTTP response body for the "NotFound"
// error.
type GetSummaryStatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsInternalServerErrorResponseBody is the type of the
// "StorageChallenge" service "getSummaryStats" endpoint HTTP response body for
// the "InternalServerError" error.
type GetSummaryStatsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SCSummaryStatsResponseBody is used to define fields on response body types.
type SCSummaryStatsResponseBody struct {
	// Total number of challenges issued
	TotalChallengesIssued int `form:"total_challenges_issued" json:"total_challenges_issued" xml:"total_challenges_issued"`
	// Total number of challenges processed by the recipient node
	TotalChallengesProcessed int `form:"total_challenges_processed" json:"total_challenges_processed" xml:"total_challenges_processed"`
	// Total number of challenges verified by the challenger node
	TotalChallengesVerifiedByChallenger int `form:"total_challenges_verified_by_challenger" json:"total_challenges_verified_by_challenger" xml:"total_challenges_verified_by_challenger"`
	// Total number of challenges verified by observers
	TotalChallengesVerifiedByObservers int `form:"total_challenges_verified_by_observers" json:"total_challenges_verified_by_observers" xml:"total_challenges_verified_by_observers"`
	// challenges failed due to slow-responses evaluated by observers
	NoOfSlowResponsesObservedByObservers int `form:"no_of_slow_responses_observed_by_observers" json:"no_of_slow_responses_observed_by_observers" xml:"no_of_slow_responses_observed_by_observers"`
	// challenges failed due to invalid signatures evaluated by observers
	NoOfInvalidSignaturesObservedByObservers int `form:"no_of_invalid_signatures_observed_by_observers" json:"no_of_invalid_signatures_observed_by_observers" xml:"no_of_invalid_signatures_observed_by_observers"`
	// challenges failed due to invalid evaluation evaluated by observers
	NoOfInvalidEvaluationObservedByObservers int `form:"no_of_invalid_evaluation_observed_by_observers" json:"no_of_invalid_evaluation_observed_by_observers" xml:"no_of_invalid_evaluation_observed_by_observers"`
}

// NewGetSummaryStatsResponseBody builds the HTTP response body from the result
// of the "getSummaryStats" endpoint of the "StorageChallenge" service.
func NewGetSummaryStatsResponseBody(res *storagechallengeviews.SummaryStatsResultView) *GetSummaryStatsResponseBody {
	body := &GetSummaryStatsResponseBody{}
	if res.ScSummaryStats != nil {
		body.ScSummaryStats = marshalStoragechallengeviewsSCSummaryStatsViewToSCSummaryStatsResponseBody(res.ScSummaryStats)
	}
	return body
}

// NewGetSummaryStatsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getSummaryStats" endpoint of the "StorageChallenge"
// service.
func NewGetSummaryStatsUnauthorizedResponseBody(res *goa.ServiceError) *GetSummaryStatsUnauthorizedResponseBody {
	body := &GetSummaryStatsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsBadRequestResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "StorageChallenge"
// service.
func NewGetSummaryStatsBadRequestResponseBody(res *goa.ServiceError) *GetSummaryStatsBadRequestResponseBody {
	body := &GetSummaryStatsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsNotFoundResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "StorageChallenge"
// service.
func NewGetSummaryStatsNotFoundResponseBody(res *goa.ServiceError) *GetSummaryStatsNotFoundResponseBody {
	body := &GetSummaryStatsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getSummaryStats" endpoint of the
// "StorageChallenge" service.
func NewGetSummaryStatsInternalServerErrorResponseBody(res *goa.ServiceError) *GetSummaryStatsInternalServerErrorResponseBody {
	body := &GetSummaryStatsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsPayload builds a StorageChallenge service getSummaryStats
// endpoint payload.
func NewGetSummaryStatsPayload(from *string, to *string, pid string, key string) *storagechallenge.GetSummaryStatsPayload {
	v := &storagechallenge.GetSummaryStatsPayload{}
	v.From = from
	v.To = to
	v.Pid = pid
	v.Key = key

	return v
}
