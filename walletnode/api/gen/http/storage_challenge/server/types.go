// Code generated by goa v3.15.0, DO NOT EDIT.
//
// StorageChallenge HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	storagechallenge "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge"
	storagechallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// GetSummaryStatsResponseBody is the type of the "StorageChallenge" service
// "getSummaryStats" endpoint HTTP response body.
type GetSummaryStatsResponseBody struct {
	// SCSummaryStats represents storage challenge summary of metrics stats
	ScSummaryStats *SCSummaryStatsResponseBody `form:"sc_summary_stats" json:"sc_summary_stats" xml:"sc_summary_stats"`
}

// GetDetailedLogsResponseBody is the type of the "StorageChallenge" service
// "getDetailedLogs" endpoint HTTP response body.
type GetDetailedLogsResponseBody []*StorageMessageResponse

// GetSummaryStatsUnauthorizedResponseBody is the type of the
// "StorageChallenge" service "getSummaryStats" endpoint HTTP response body for
// the "Unauthorized" error.
type GetSummaryStatsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsBadRequestResponseBody is the type of the "StorageChallenge"
// service "getSummaryStats" endpoint HTTP response body for the "BadRequest"
// error.
type GetSummaryStatsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsNotFoundResponseBody is the type of the "StorageChallenge"
// service "getSummaryStats" endpoint HTTP response body for the "NotFound"
// error.
type GetSummaryStatsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSummaryStatsInternalServerErrorResponseBody is the type of the
// "StorageChallenge" service "getSummaryStats" endpoint HTTP response body for
// the "InternalServerError" error.
type GetSummaryStatsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsUnauthorizedResponseBody is the type of the
// "StorageChallenge" service "getDetailedLogs" endpoint HTTP response body for
// the "Unauthorized" error.
type GetDetailedLogsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsBadRequestResponseBody is the type of the "StorageChallenge"
// service "getDetailedLogs" endpoint HTTP response body for the "BadRequest"
// error.
type GetDetailedLogsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsNotFoundResponseBody is the type of the "StorageChallenge"
// service "getDetailedLogs" endpoint HTTP response body for the "NotFound"
// error.
type GetDetailedLogsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetDetailedLogsInternalServerErrorResponseBody is the type of the
// "StorageChallenge" service "getDetailedLogs" endpoint HTTP response body for
// the "InternalServerError" error.
type GetDetailedLogsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SCSummaryStatsResponseBody is used to define fields on response body types.
type SCSummaryStatsResponseBody struct {
	// Total number of challenges issued
	TotalChallengesIssued int `form:"total_challenges_issued" json:"total_challenges_issued" xml:"total_challenges_issued"`
	// Total number of challenges processed by the recipient node
	TotalChallengesProcessedByRecipient int `form:"total_challenges_processed_by_recipient" json:"total_challenges_processed_by_recipient" xml:"total_challenges_processed_by_recipient"`
	// Total number of challenges evaluated by the challenger node
	TotalChallengesEvaluatedByChallenger int `form:"total_challenges_evaluated_by_challenger" json:"total_challenges_evaluated_by_challenger" xml:"total_challenges_evaluated_by_challenger"`
	// Total number of challenges verified by observers
	TotalChallengesVerified int `form:"total_challenges_verified" json:"total_challenges_verified" xml:"total_challenges_verified"`
	// challenges failed due to slow-responses evaluated by observers
	NoOfSlowResponsesObservedByObservers int `form:"no_of_slow_responses_observed_by_observers" json:"no_of_slow_responses_observed_by_observers" xml:"no_of_slow_responses_observed_by_observers"`
	// challenges failed due to invalid signatures evaluated by observers
	NoOfInvalidSignaturesObservedByObservers int `form:"no_of_invalid_signatures_observed_by_observers" json:"no_of_invalid_signatures_observed_by_observers" xml:"no_of_invalid_signatures_observed_by_observers"`
	// challenges failed due to invalid evaluation evaluated by observers
	NoOfInvalidEvaluationObservedByObservers int `form:"no_of_invalid_evaluation_observed_by_observers" json:"no_of_invalid_evaluation_observed_by_observers" xml:"no_of_invalid_evaluation_observed_by_observers"`
}

// StorageMessageResponse is used to define fields on response body types.
type StorageMessageResponse struct {
	// ID of the challenge
	ChallengeID string `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	// type of the message
	MessageType string `form:"message_type" json:"message_type" xml:"message_type"`
	// ID of the sender's node
	SenderID string `form:"sender_id" json:"sender_id" xml:"sender_id"`
	// signature of the sender
	SenderSignature *string `form:"sender_signature,omitempty" json:"sender_signature,omitempty" xml:"sender_signature,omitempty"`
	// ID of the challenger
	ChallengerID string `form:"challenger_id" json:"challenger_id" xml:"challenger_id"`
	// Challenge data
	Challenge *ChallengeDataResponse `form:"challenge,omitempty" json:"challenge,omitempty" xml:"challenge,omitempty"`
	// List of observer IDs
	Observers []string `form:"observers" json:"observers" xml:"observers"`
	// ID of the recipient
	RecipientID string `form:"recipient_id" json:"recipient_id" xml:"recipient_id"`
	// Response data
	Response *ResponseDataResponse `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
	// Challenger evaluation data
	ChallengerEvaluation *EvaluationDataResponse `form:"challenger_evaluation,omitempty" json:"challenger_evaluation,omitempty" xml:"challenger_evaluation,omitempty"`
	// Observer evaluation data
	ObserverEvaluation *ObserverEvaluationDataResponse `form:"observer_evaluation,omitempty" json:"observer_evaluation,omitempty" xml:"observer_evaluation,omitempty"`
}

// ChallengeDataResponse is used to define fields on response body types.
type ChallengeDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// Timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// File hash
	FileHash string `form:"file_hash" json:"file_hash" xml:"file_hash"`
	// Start index
	StartIndex int `form:"start_index" json:"start_index" xml:"start_index"`
	// End index
	EndIndex int `form:"end_index" json:"end_index" xml:"end_index"`
}

// ResponseDataResponse is used to define fields on response body types.
type ResponseDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// Hash
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// Timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// EvaluationDataResponse is used to define fields on response body types.
type EvaluationDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// Timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// Hash
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// IsVerified
	IsVerified bool `form:"is_verified" json:"is_verified" xml:"is_verified"`
}

// ObserverEvaluationDataResponse is used to define fields on response body
// types.
type ObserverEvaluationDataResponse struct {
	// Block
	Block *int32 `form:"block,omitempty" json:"block,omitempty" xml:"block,omitempty"`
	// Merkelroot
	Merkelroot *string `form:"merkelroot,omitempty" json:"merkelroot,omitempty" xml:"merkelroot,omitempty"`
	// IsChallengeTimestampOK
	IsChallengeTimestampOK bool `form:"is_challenge_timestamp_ok" json:"is_challenge_timestamp_ok" xml:"is_challenge_timestamp_ok"`
	// IsProcessTimestampOK
	IsProcessTimestampOK bool `form:"is_process_timestamp_ok" json:"is_process_timestamp_ok" xml:"is_process_timestamp_ok"`
	// IsEvaluationTimestampOK
	IsEvaluationTimestampOK bool `form:"is_evaluation_timestamp_ok" json:"is_evaluation_timestamp_ok" xml:"is_evaluation_timestamp_ok"`
	// IsRecipientSignatureOK
	IsRecipientSignatureOK bool `form:"is_recipient_signature_ok" json:"is_recipient_signature_ok" xml:"is_recipient_signature_ok"`
	// IsChallengerSignatureOK
	IsChallengerSignatureOK bool `form:"is_challenger_signature_ok" json:"is_challenger_signature_ok" xml:"is_challenger_signature_ok"`
	// IsEvaluationResultOK
	IsEvaluationResultOK bool `form:"is_evaluation_result_ok" json:"is_evaluation_result_ok" xml:"is_evaluation_result_ok"`
	// Reason
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// TrueHash
	TrueHash string `form:"true_hash" json:"true_hash" xml:"true_hash"`
	// Timestamp
	Timestamp string `form:"timestamp" json:"timestamp" xml:"timestamp"`
}

// NewGetSummaryStatsResponseBody builds the HTTP response body from the result
// of the "getSummaryStats" endpoint of the "StorageChallenge" service.
func NewGetSummaryStatsResponseBody(res *storagechallengeviews.SummaryStatsResultView) *GetSummaryStatsResponseBody {
	body := &GetSummaryStatsResponseBody{}
	if res.ScSummaryStats != nil {
		body.ScSummaryStats = marshalStoragechallengeviewsSCSummaryStatsViewToSCSummaryStatsResponseBody(res.ScSummaryStats)
	}
	return body
}

// NewGetDetailedLogsResponseBody builds the HTTP response body from the result
// of the "getDetailedLogs" endpoint of the "StorageChallenge" service.
func NewGetDetailedLogsResponseBody(res []*storagechallenge.StorageMessage) GetDetailedLogsResponseBody {
	body := make([]*StorageMessageResponse, len(res))
	for i, val := range res {
		body[i] = marshalStoragechallengeStorageMessageToStorageMessageResponse(val)
	}
	return body
}

// NewGetSummaryStatsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getSummaryStats" endpoint of the "StorageChallenge"
// service.
func NewGetSummaryStatsUnauthorizedResponseBody(res *goa.ServiceError) *GetSummaryStatsUnauthorizedResponseBody {
	body := &GetSummaryStatsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsBadRequestResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "StorageChallenge"
// service.
func NewGetSummaryStatsBadRequestResponseBody(res *goa.ServiceError) *GetSummaryStatsBadRequestResponseBody {
	body := &GetSummaryStatsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsNotFoundResponseBody builds the HTTP response body from
// the result of the "getSummaryStats" endpoint of the "StorageChallenge"
// service.
func NewGetSummaryStatsNotFoundResponseBody(res *goa.ServiceError) *GetSummaryStatsNotFoundResponseBody {
	body := &GetSummaryStatsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getSummaryStats" endpoint of the
// "StorageChallenge" service.
func NewGetSummaryStatsInternalServerErrorResponseBody(res *goa.ServiceError) *GetSummaryStatsInternalServerErrorResponseBody {
	body := &GetSummaryStatsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsUnauthorizedResponseBody builds the HTTP response body
// from the result of the "getDetailedLogs" endpoint of the "StorageChallenge"
// service.
func NewGetDetailedLogsUnauthorizedResponseBody(res *goa.ServiceError) *GetDetailedLogsUnauthorizedResponseBody {
	body := &GetDetailedLogsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsBadRequestResponseBody builds the HTTP response body from
// the result of the "getDetailedLogs" endpoint of the "StorageChallenge"
// service.
func NewGetDetailedLogsBadRequestResponseBody(res *goa.ServiceError) *GetDetailedLogsBadRequestResponseBody {
	body := &GetDetailedLogsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsNotFoundResponseBody builds the HTTP response body from
// the result of the "getDetailedLogs" endpoint of the "StorageChallenge"
// service.
func NewGetDetailedLogsNotFoundResponseBody(res *goa.ServiceError) *GetDetailedLogsNotFoundResponseBody {
	body := &GetDetailedLogsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetDetailedLogsInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "getDetailedLogs" endpoint of the
// "StorageChallenge" service.
func NewGetDetailedLogsInternalServerErrorResponseBody(res *goa.ServiceError) *GetDetailedLogsInternalServerErrorResponseBody {
	body := &GetDetailedLogsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSummaryStatsPayload builds a StorageChallenge service getSummaryStats
// endpoint payload.
func NewGetSummaryStatsPayload(from *string, to *string, pid string, key string) *storagechallenge.GetSummaryStatsPayload {
	v := &storagechallenge.GetSummaryStatsPayload{}
	v.From = from
	v.To = to
	v.Pid = pid
	v.Key = key

	return v
}

// NewGetDetailedLogsPayload builds a StorageChallenge service getDetailedLogs
// endpoint payload.
func NewGetDetailedLogsPayload(pid string, challengeID *string, key string) *storagechallenge.GetDetailedLogsPayload {
	v := &storagechallenge.GetDetailedLogsPayload{}
	v.Pid = pid
	v.ChallengeID = challengeID
	v.Key = key

	return v
}
