// Code generated by goa v3.15.0, DO NOT EDIT.
//
// StorageChallenge HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	storagechallenge "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge"
	storagechallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetSummaryStatsRequest instantiates a HTTP request object with method
// and path set to call the "StorageChallenge" service "getSummaryStats"
// endpoint
func (c *Client) BuildGetSummaryStatsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSummaryStatsStorageChallengePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("StorageChallenge", "getSummaryStats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSummaryStatsRequest returns an encoder for requests sent to the
// StorageChallenge getSummaryStats server.
func EncodeGetSummaryStatsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storagechallenge.GetSummaryStatsPayload)
		if !ok {
			return goahttp.ErrInvalidType("StorageChallenge", "getSummaryStats", "*storagechallenge.GetSummaryStatsPayload", v)
		}
		{
			head := p.Key
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		if p.From != nil {
			values.Add("from", *p.From)
		}
		if p.To != nil {
			values.Add("to", *p.To)
		}
		values.Add("pid", p.Pid)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetSummaryStatsResponse returns a decoder for responses returned by
// the StorageChallenge getSummaryStats endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetSummaryStatsResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetSummaryStatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSummaryStatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getSummaryStats", err)
			}
			p := NewGetSummaryStatsSummaryStatsResultOK(&body)
			view := "default"
			vres := &storagechallengeviews.SummaryStatsResult{Projected: p, View: view}
			if err = storagechallengeviews.ValidateSummaryStatsResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getSummaryStats", err)
			}
			res := storagechallenge.NewSummaryStatsResult(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetSummaryStatsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body GetSummaryStatsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetSummaryStatsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetSummaryStatsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getSummaryStats", err)
			}
			err = ValidateGetSummaryStatsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getSummaryStats", err)
			}
			return nil, NewGetSummaryStatsInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("StorageChallenge", "getSummaryStats", resp.StatusCode, string(body))
		}
	}
}

// BuildGetDetailedLogsRequest instantiates a HTTP request object with method
// and path set to call the "StorageChallenge" service "getDetailedLogs"
// endpoint
func (c *Client) BuildGetDetailedLogsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDetailedLogsStorageChallengePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("StorageChallenge", "getDetailedLogs", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDetailedLogsRequest returns an encoder for requests sent to the
// StorageChallenge getDetailedLogs server.
func EncodeGetDetailedLogsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*storagechallenge.GetDetailedLogsPayload)
		if !ok {
			return goahttp.ErrInvalidType("StorageChallenge", "getDetailedLogs", "*storagechallenge.GetDetailedLogsPayload", v)
		}
		{
			head := p.Key
			req.Header.Set("Authorization", head)
		}
		values := req.URL.Query()
		values.Add("pid", p.Pid)
		if p.ChallengeID != nil {
			values.Add("challenge_id", *p.ChallengeID)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetDetailedLogsResponse returns a decoder for responses returned by
// the StorageChallenge getDetailedLogs endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetDetailedLogsResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "InternalServerError" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetDetailedLogsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDetailedLogsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getDetailedLogs", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateStorageMessageResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getDetailedLogs", err)
			}
			res := NewGetDetailedLogsStorageMessageOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetDetailedLogsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getDetailedLogs", err)
			}
			err = ValidateGetDetailedLogsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getDetailedLogs", err)
			}
			return nil, NewGetDetailedLogsUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body GetDetailedLogsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getDetailedLogs", err)
			}
			err = ValidateGetDetailedLogsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getDetailedLogs", err)
			}
			return nil, NewGetDetailedLogsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body GetDetailedLogsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getDetailedLogs", err)
			}
			err = ValidateGetDetailedLogsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getDetailedLogs", err)
			}
			return nil, NewGetDetailedLogsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetDetailedLogsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("StorageChallenge", "getDetailedLogs", err)
			}
			err = ValidateGetDetailedLogsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("StorageChallenge", "getDetailedLogs", err)
			}
			return nil, NewGetDetailedLogsInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("StorageChallenge", "getDetailedLogs", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSCSummaryStatsResponseBodyToStoragechallengeviewsSCSummaryStatsView
// builds a value of type *storagechallengeviews.SCSummaryStatsView from a
// value of type *SCSummaryStatsResponseBody.
func unmarshalSCSummaryStatsResponseBodyToStoragechallengeviewsSCSummaryStatsView(v *SCSummaryStatsResponseBody) *storagechallengeviews.SCSummaryStatsView {
	res := &storagechallengeviews.SCSummaryStatsView{
		TotalChallengesIssued:                    v.TotalChallengesIssued,
		TotalChallengesProcessedByRecipient:      v.TotalChallengesProcessedByRecipient,
		TotalChallengesEvaluatedByChallenger:     v.TotalChallengesEvaluatedByChallenger,
		TotalChallengesVerified:                  v.TotalChallengesVerified,
		NoOfSlowResponsesObservedByObservers:     v.NoOfSlowResponsesObservedByObservers,
		NoOfInvalidSignaturesObservedByObservers: v.NoOfInvalidSignaturesObservedByObservers,
		NoOfInvalidEvaluationObservedByObservers: v.NoOfInvalidEvaluationObservedByObservers,
	}

	return res
}

// unmarshalStorageMessageResponseToStoragechallengeStorageMessage builds a
// value of type *storagechallenge.StorageMessage from a value of type
// *StorageMessageResponse.
func unmarshalStorageMessageResponseToStoragechallengeStorageMessage(v *StorageMessageResponse) *storagechallenge.StorageMessage {
	res := &storagechallenge.StorageMessage{
		ChallengeID:     *v.ChallengeID,
		MessageType:     *v.MessageType,
		SenderID:        *v.SenderID,
		SenderSignature: v.SenderSignature,
		ChallengerID:    *v.ChallengerID,
		RecipientID:     *v.RecipientID,
	}
	if v.Challenge != nil {
		res.Challenge = unmarshalChallengeDataResponseToStoragechallengeChallengeData(v.Challenge)
	}
	res.Observers = make([]string, len(v.Observers))
	for i, val := range v.Observers {
		res.Observers[i] = val
	}
	if v.Response != nil {
		res.Response = unmarshalResponseDataResponseToStoragechallengeResponseData(v.Response)
	}
	if v.ChallengerEvaluation != nil {
		res.ChallengerEvaluation = unmarshalEvaluationDataResponseToStoragechallengeEvaluationData(v.ChallengerEvaluation)
	}
	if v.ObserverEvaluation != nil {
		res.ObserverEvaluation = unmarshalObserverEvaluationDataResponseToStoragechallengeObserverEvaluationData(v.ObserverEvaluation)
	}

	return res
}

// unmarshalChallengeDataResponseToStoragechallengeChallengeData builds a value
// of type *storagechallenge.ChallengeData from a value of type
// *ChallengeDataResponse.
func unmarshalChallengeDataResponseToStoragechallengeChallengeData(v *ChallengeDataResponse) *storagechallenge.ChallengeData {
	if v == nil {
		return nil
	}
	res := &storagechallenge.ChallengeData{
		Block:      v.Block,
		Merkelroot: v.Merkelroot,
		Timestamp:  *v.Timestamp,
		FileHash:   *v.FileHash,
		StartIndex: *v.StartIndex,
		EndIndex:   *v.EndIndex,
	}

	return res
}

// unmarshalResponseDataResponseToStoragechallengeResponseData builds a value
// of type *storagechallenge.ResponseData from a value of type
// *ResponseDataResponse.
func unmarshalResponseDataResponseToStoragechallengeResponseData(v *ResponseDataResponse) *storagechallenge.ResponseData {
	if v == nil {
		return nil
	}
	res := &storagechallenge.ResponseData{
		Block:      v.Block,
		Merkelroot: v.Merkelroot,
		Hash:       v.Hash,
		Timestamp:  *v.Timestamp,
	}

	return res
}

// unmarshalEvaluationDataResponseToStoragechallengeEvaluationData builds a
// value of type *storagechallenge.EvaluationData from a value of type
// *EvaluationDataResponse.
func unmarshalEvaluationDataResponseToStoragechallengeEvaluationData(v *EvaluationDataResponse) *storagechallenge.EvaluationData {
	if v == nil {
		return nil
	}
	res := &storagechallenge.EvaluationData{
		Block:      v.Block,
		Merkelroot: v.Merkelroot,
		Timestamp:  *v.Timestamp,
		Hash:       *v.Hash,
		IsVerified: *v.IsVerified,
	}

	return res
}

// unmarshalObserverEvaluationDataResponseToStoragechallengeObserverEvaluationData
// builds a value of type *storagechallenge.ObserverEvaluationData from a value
// of type *ObserverEvaluationDataResponse.
func unmarshalObserverEvaluationDataResponseToStoragechallengeObserverEvaluationData(v *ObserverEvaluationDataResponse) *storagechallenge.ObserverEvaluationData {
	if v == nil {
		return nil
	}
	res := &storagechallenge.ObserverEvaluationData{
		Block:                   v.Block,
		Merkelroot:              v.Merkelroot,
		IsChallengeTimestampOK:  *v.IsChallengeTimestampOK,
		IsProcessTimestampOK:    *v.IsProcessTimestampOK,
		IsEvaluationTimestampOK: *v.IsEvaluationTimestampOK,
		IsRecipientSignatureOK:  *v.IsRecipientSignatureOK,
		IsChallengerSignatureOK: *v.IsChallengerSignatureOK,
		IsEvaluationResultOK:    *v.IsEvaluationResultOK,
		Reason:                  v.Reason,
		TrueHash:                *v.TrueHash,
		Timestamp:               *v.Timestamp,
	}

	return res
}
