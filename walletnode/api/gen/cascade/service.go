// Code generated by goa v3.5.3, DO NOT EDIT.
//
// cascade service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package cascade

import (
	"context"

	cascadeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/cascade/views"
	goa "goa.design/goa/v3/pkg"
)

// OpenAPI Cascade service
type Service interface {
	// Upload the image
	UploadImage(context.Context, *UploadImagePayload) (res *Image, err error)
	// Provide action details
	ActionDetails(context.Context, *ActionDetailsPayload) (res *ActionDetailResult, err error)
	// Start processing the image
	StartProcessing(context.Context, *StartProcessingPayload) (res *StartProcessingResult, err error)
	// Streams the state of the registration process.
	RegisterTaskState(context.Context, *RegisterTaskStatePayload, RegisterTaskStateServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "cascade"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"uploadImage", "actionDetails", "startProcessing", "registerTaskState"}

// RegisterTaskStateServerStream is the interface a "registerTaskState"
// endpoint server stream must satisfy.
type RegisterTaskStateServerStream interface {
	// Send streams instances of "TaskState".
	Send(*TaskState) error
	// Close closes the stream.
	Close() error
}

// RegisterTaskStateClientStream is the interface a "registerTaskState"
// endpoint client stream must satisfy.
type RegisterTaskStateClientStream interface {
	// Recv reads instances of "TaskState" from the stream.
	Recv() (*TaskState, error)
}

// UploadImagePayload is the payload type of the cascade service uploadImage
// method.
type UploadImagePayload struct {
	// File to upload
	Bytes []byte
	// For internal use
	Filename *string
}

// Image is the result type of the cascade service uploadImage method.
type Image struct {
	// Uploaded image ID
	ImageID string
	// Image expiration
	ExpiresIn string
}

// ActionDetailsPayload is the payload type of the cascade service
// actionDetails method.
type ActionDetailsPayload struct {
	// Uploaded image ID
	ImageID string
	// 3rd party app's PastelID
	PastelID string
	// Hash (SHA3-256) of the Action Data
	ActionDataHash string
	// The signature (base64) of the Action Data
	ActionDataSignature string
}

// ActionDetailResult is the result type of the cascade service actionDetails
// method.
type ActionDetailResult struct {
	// Estimated fee
	EstimatedFee float64
}

// StartProcessingPayload is the payload type of the cascade service
// startProcessing method.
type StartProcessingPayload struct {
	// Uploaded image ID
	ImageID string
	// Burn transaction ID
	BurnTxid string
	// App PastelID
	AppPastelID string
	// Passphrase of the App PastelID
	AppPastelidPassphrase string
}

// StartProcessingResult is the result type of the cascade service
// startProcessing method.
type StartProcessingResult struct {
	// Task ID of processing task
	TaskID string
}

// RegisterTaskStatePayload is the payload type of the cascade service
// registerTaskState method.
type RegisterTaskStatePayload struct {
	// Task ID of the registration process
	TaskID string
}

// TaskState is the result type of the cascade service registerTaskState method.
type TaskState struct {
	// Date of the status creation
	Date string
	// Status of the registration process
	Status string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewImage initializes result type Image from viewed result type Image.
func NewImage(vres *cascadeviews.Image) *Image {
	return newImage(vres.Projected)
}

// NewViewedImage initializes viewed result type Image from result type Image
// using the given view.
func NewViewedImage(res *Image, view string) *cascadeviews.Image {
	p := newImageView(res)
	return &cascadeviews.Image{Projected: p, View: "default"}
}

// NewActionDetailResult initializes result type ActionDetailResult from viewed
// result type ActionDetailResult.
func NewActionDetailResult(vres *cascadeviews.ActionDetailResult) *ActionDetailResult {
	return newActionDetailResult(vres.Projected)
}

// NewViewedActionDetailResult initializes viewed result type
// ActionDetailResult from result type ActionDetailResult using the given view.
func NewViewedActionDetailResult(res *ActionDetailResult, view string) *cascadeviews.ActionDetailResult {
	p := newActionDetailResultView(res)
	return &cascadeviews.ActionDetailResult{Projected: p, View: "default"}
}

// NewStartProcessingResult initializes result type StartProcessingResult from
// viewed result type StartProcessingResult.
func NewStartProcessingResult(vres *cascadeviews.StartProcessingResult) *StartProcessingResult {
	return newStartProcessingResult(vres.Projected)
}

// NewViewedStartProcessingResult initializes viewed result type
// StartProcessingResult from result type StartProcessingResult using the given
// view.
func NewViewedStartProcessingResult(res *StartProcessingResult, view string) *cascadeviews.StartProcessingResult {
	p := newStartProcessingResultView(res)
	return &cascadeviews.StartProcessingResult{Projected: p, View: "default"}
}

// newImage converts projected type Image to service type Image.
func newImage(vres *cascadeviews.ImageView) *Image {
	res := &Image{}
	if vres.ImageID != nil {
		res.ImageID = *vres.ImageID
	}
	if vres.ExpiresIn != nil {
		res.ExpiresIn = *vres.ExpiresIn
	}
	return res
}

// newImageView projects result type Image to projected type ImageView using
// the "default" view.
func newImageView(res *Image) *cascadeviews.ImageView {
	vres := &cascadeviews.ImageView{
		ImageID:   &res.ImageID,
		ExpiresIn: &res.ExpiresIn,
	}
	return vres
}

// newActionDetailResult converts projected type ActionDetailResult to service
// type ActionDetailResult.
func newActionDetailResult(vres *cascadeviews.ActionDetailResultView) *ActionDetailResult {
	res := &ActionDetailResult{}
	if vres.EstimatedFee != nil {
		res.EstimatedFee = *vres.EstimatedFee
	}
	if vres.EstimatedFee == nil {
		res.EstimatedFee = 1
	}
	return res
}

// newActionDetailResultView projects result type ActionDetailResult to
// projected type ActionDetailResultView using the "default" view.
func newActionDetailResultView(res *ActionDetailResult) *cascadeviews.ActionDetailResultView {
	vres := &cascadeviews.ActionDetailResultView{
		EstimatedFee: &res.EstimatedFee,
	}
	return vres
}

// newStartProcessingResult converts projected type StartProcessingResult to
// service type StartProcessingResult.
func newStartProcessingResult(vres *cascadeviews.StartProcessingResultView) *StartProcessingResult {
	res := &StartProcessingResult{}
	if vres.TaskID != nil {
		res.TaskID = *vres.TaskID
	}
	return res
}

// newStartProcessingResultView projects result type StartProcessingResult to
// projected type StartProcessingResultView using the "default" view.
func newStartProcessingResultView(res *StartProcessingResult) *cascadeviews.StartProcessingResultView {
	vres := &cascadeviews.StartProcessingResultView{
		TaskID: &res.TaskID,
	}
	return vres
}
