// Code generated by goa v3.15.0, DO NOT EDIT.
//
// cascade views
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// Asset is the viewed result type that is projected based on a view.
type Asset struct {
	// Type to project
	Projected *AssetView
	// View to render
	View string
}

// AssetV2 is the viewed result type that is projected based on a view.
type AssetV2 struct {
	// Type to project
	Projected *AssetV2View
	// View to render
	View string
}

// StartProcessingResult is the viewed result type that is projected based on a
// view.
type StartProcessingResult struct {
	// Type to project
	Projected *StartProcessingResultView
	// View to render
	View string
}

// Registration is the viewed result type that is projected based on a view.
type Registration struct {
	// Type to project
	Projected *RegistrationView
	// View to render
	View string
}

// RestoreFile is the viewed result type that is projected based on a view.
type RestoreFile struct {
	// Type to project
	Projected *RestoreFileView
	// View to render
	View string
}

// AssetView is a type that runs validations on a projected type.
type AssetView struct {
	// Uploaded file ID
	FileID *string
	// File expiration
	ExpiresIn *string
	// Estimated fee
	TotalEstimatedFee *float64
	// The amount that's required to be preburned
	RequiredPreburnAmount *float64
}

// AssetV2View is a type that runs validations on a projected type.
type AssetV2View struct {
	// Uploaded file ID
	FileID *string
	// Estimated fee
	TotalEstimatedFee *float64
	// The amounts that's required to be preburned - one per transaction
	RequiredPreburnTransactionAmounts []float64
}

// StartProcessingResultView is a type that runs validations on a projected
// type.
type StartProcessingResultView struct {
	// Task ID of processing task
	TaskID *string
}

// RegistrationView is a type that runs validations on a projected type.
type RegistrationView struct {
	// List of files
	Files []*FileView
}

// FileView is a type that runs validations on a projected type.
type FileView struct {
	// File ID
	FileID *string
	// Upload Timestamp in datetime format
	UploadTimestamp *string
	// Path to the file
	Path *string
	// Index of the file
	FileIndex *string
	// Base File ID
	BaseFileID *string
	// Task ID
	TaskID *string
	// Registration Transaction ID
	RegTxid *string
	// Activation Transaction ID
	ActivationTxid *string
	// Required Burn Transaction Amount
	ReqBurnTxnAmount *float64
	// Burn Transaction ID
	BurnTxnID *string
	// Required Amount
	ReqAmount *float64
	// Indicates if the process is concluded
	IsConcluded *bool
	// Cascade Metadata Ticket ID
	CascadeMetadataTicketID *string
	// UUID Key
	UUIDKey *string
	// Hash of the Original Big File
	HashOfOriginalBigFile *string
	// Name of the Original Big File with Extension
	NameOfOriginalBigFileWithExt *string
	// Size of the Original Big File
	SizeOfOriginalBigFile *float64
	// Data Type of the Original Big File
	DataTypeOfOriginalBigFile *string
	// Start Block
	StartBlock *int32
	// Done Block
	DoneBlock *int
	// List of registration attempts
	RegistrationAttempts []*RegistrationAttemptView
	// List of activation attempts
	ActivationAttempts []*ActivationAttemptView
}

// RegistrationAttemptView is a type that runs validations on a projected type.
type RegistrationAttemptView struct {
	// ID
	ID *int
	// File ID
	FileID *string
	// Registration Started At in datetime format
	RegStartedAt *string
	// Processor SNS
	ProcessorSns *string
	// Finished At in datetime format
	FinishedAt *string
	// Indicates if the registration was successful
	IsSuccessful *bool
	// Error Message
	ErrorMessage *string
}

// ActivationAttemptView is a type that runs validations on a projected type.
type ActivationAttemptView struct {
	// ID
	ID *int
	// File ID
	FileID *string
	// Activation Attempt At in datetime format
	ActivationAttemptAt *string
	// Indicates if the activation was successful
	IsSuccessful *bool
	// Error Message
	ErrorMessage *string
}

// RestoreFileView is a type that runs validations on a projected type.
type RestoreFileView struct {
	// Total volumes of selected file
	TotalVolumes *int
	// Total registered volumes
	RegisteredVolumes *int
	// Total volumes with pending registration
	VolumesWithPendingRegistration *int
	// Total volumes with in-progress registration
	VolumesRegistrationInProgress *int
	// Total volumes that are activated
	ActivatedVolumes *int
	// Total volumes that are activated in restore process
	VolumesActivatedInRecoveryFlow *int
}

var (
	// AssetMap is a map indexing the attribute names of Asset by view name.
	AssetMap = map[string][]string{
		"default": {
			"file_id",
			"expires_in",
			"total_estimated_fee",
			"required_preburn_amount",
		},
	}
	// AssetV2Map is a map indexing the attribute names of AssetV2 by view name.
	AssetV2Map = map[string][]string{
		"default": {
			"file_id",
			"total_estimated_fee",
			"required_preburn_transaction_amounts",
		},
	}
	// StartProcessingResultMap is a map indexing the attribute names of
	// StartProcessingResult by view name.
	StartProcessingResultMap = map[string][]string{
		"default": {
			"task_id",
		},
	}
	// RegistrationMap is a map indexing the attribute names of Registration by
	// view name.
	RegistrationMap = map[string][]string{
		"default": {
			"files",
		},
	}
	// RestoreFileMap is a map indexing the attribute names of RestoreFile by view
	// name.
	RestoreFileMap = map[string][]string{
		"default": {
			"total_volumes",
			"registered_volumes",
			"volumes_with_pending_registration",
			"volumes_registration_in_progress",
			"activated_volumes",
			"volumes_activated_in_recovery_flow",
		},
	}
)

// ValidateAsset runs the validations defined on the viewed result type Asset.
func ValidateAsset(result *Asset) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAssetView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateAssetV2 runs the validations defined on the viewed result type
// AssetV2.
func ValidateAssetV2(result *AssetV2) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAssetV2View(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateStartProcessingResult runs the validations defined on the viewed
// result type StartProcessingResult.
func ValidateStartProcessingResult(result *StartProcessingResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStartProcessingResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateRegistration runs the validations defined on the viewed result type
// Registration.
func ValidateRegistration(result *Registration) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateRegistrationView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateRestoreFile runs the validations defined on the viewed result type
// RestoreFile.
func ValidateRestoreFile(result *RestoreFile) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateRestoreFileView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateAssetView runs the validations defined on AssetView using the
// "default" view.
func ValidateAssetView(result *AssetView) (err error) {
	if result.FileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_id", "result"))
	}
	if result.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "result"))
	}
	if result.TotalEstimatedFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_estimated_fee", "result"))
	}
	if result.FileID != nil {
		if utf8.RuneCountInString(*result.FileID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.file_id", *result.FileID, utf8.RuneCountInString(*result.FileID), 8, true))
		}
	}
	if result.FileID != nil {
		if utf8.RuneCountInString(*result.FileID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.file_id", *result.FileID, utf8.RuneCountInString(*result.FileID), 8, false))
		}
	}
	if result.ExpiresIn != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.expires_in", *result.ExpiresIn, goa.FormatDateTime))
	}
	if result.TotalEstimatedFee != nil {
		if *result.TotalEstimatedFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.total_estimated_fee", *result.TotalEstimatedFee, 1e-05, true))
		}
	}
	if result.RequiredPreburnAmount != nil {
		if *result.RequiredPreburnAmount < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.required_preburn_amount", *result.RequiredPreburnAmount, 1e-05, true))
		}
	}
	return
}

// ValidateAssetV2View runs the validations defined on AssetV2View using the
// "default" view.
func ValidateAssetV2View(result *AssetV2View) (err error) {
	if result.FileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_id", "result"))
	}
	if result.TotalEstimatedFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_estimated_fee", "result"))
	}
	if result.FileID != nil {
		if utf8.RuneCountInString(*result.FileID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.file_id", *result.FileID, utf8.RuneCountInString(*result.FileID), 8, true))
		}
	}
	if result.FileID != nil {
		if utf8.RuneCountInString(*result.FileID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.file_id", *result.FileID, utf8.RuneCountInString(*result.FileID), 8, false))
		}
	}
	if result.TotalEstimatedFee != nil {
		if *result.TotalEstimatedFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.total_estimated_fee", *result.TotalEstimatedFee, 1e-05, true))
		}
	}
	return
}

// ValidateStartProcessingResultView runs the validations defined on
// StartProcessingResultView using the "default" view.
func ValidateStartProcessingResultView(result *StartProcessingResultView) (err error) {
	if result.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "result"))
	}
	if result.TaskID != nil {
		if utf8.RuneCountInString(*result.TaskID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.task_id", *result.TaskID, utf8.RuneCountInString(*result.TaskID), 8, true))
		}
	}
	if result.TaskID != nil {
		if utf8.RuneCountInString(*result.TaskID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.task_id", *result.TaskID, utf8.RuneCountInString(*result.TaskID), 8, false))
		}
	}
	return
}

// ValidateRegistrationView runs the validations defined on RegistrationView
// using the "default" view.
func ValidateRegistrationView(result *RegistrationView) (err error) {
	if result.Files == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("files", "result"))
	}
	for _, e := range result.Files {
		if e != nil {
			if err2 := ValidateFileView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFileView runs the validations defined on FileView.
func ValidateFileView(result *FileView) (err error) {
	if result.FileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_id", "result"))
	}
	if result.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "result"))
	}
	if result.UploadTimestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("upload_timestamp", "result"))
	}
	if result.BaseFileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("base_file_id", "result"))
	}
	if result.RegistrationAttempts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("registration_attempts", "result"))
	}
	if result.ActivationAttempts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("activation_attempts", "result"))
	}
	if result.ReqBurnTxnAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("req_burn_txn_amount", "result"))
	}
	if result.ReqAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("req_amount", "result"))
	}
	if result.CascadeMetadataTicketID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cascade_metadata_ticket_id", "result"))
	}
	if result.HashOfOriginalBigFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hash_of_original_big_file", "result"))
	}
	if result.NameOfOriginalBigFileWithExt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name_of_original_big_file_with_ext", "result"))
	}
	if result.SizeOfOriginalBigFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size_of_original_big_file", "result"))
	}
	if result.DataTypeOfOriginalBigFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data_type_of_original_big_file", "result"))
	}
	if result.UploadTimestamp != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.upload_timestamp", *result.UploadTimestamp, goa.FormatDateTime))
	}
	for _, e := range result.RegistrationAttempts {
		if e != nil {
			if err2 := ValidateRegistrationAttemptView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range result.ActivationAttempts {
		if e != nil {
			if err2 := ValidateActivationAttemptView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRegistrationAttemptView runs the validations defined on
// RegistrationAttemptView.
func ValidateRegistrationAttemptView(result *RegistrationAttemptView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.FileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_id", "result"))
	}
	if result.RegStartedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("reg_started_at", "result"))
	}
	if result.FinishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("finished_at", "result"))
	}
	if result.RegStartedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.reg_started_at", *result.RegStartedAt, goa.FormatDateTime))
	}
	if result.FinishedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.finished_at", *result.FinishedAt, goa.FormatDateTime))
	}
	return
}

// ValidateActivationAttemptView runs the validations defined on
// ActivationAttemptView.
func ValidateActivationAttemptView(result *ActivationAttemptView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.FileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file_id", "result"))
	}
	if result.ActivationAttemptAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("activation_attempt_at", "result"))
	}
	if result.ActivationAttemptAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.activation_attempt_at", *result.ActivationAttemptAt, goa.FormatDateTime))
	}
	return
}

// ValidateRestoreFileView runs the validations defined on RestoreFileView
// using the "default" view.
func ValidateRestoreFileView(result *RestoreFileView) (err error) {
	if result.TotalVolumes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_volumes", "result"))
	}
	if result.RegisteredVolumes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("registered_volumes", "result"))
	}
	if result.VolumesWithPendingRegistration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volumes_with_pending_registration", "result"))
	}
	if result.VolumesRegistrationInProgress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volumes_registration_in_progress", "result"))
	}
	if result.ActivatedVolumes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("activated_volumes", "result"))
	}
	if result.VolumesActivatedInRecoveryFlow == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volumes_activated_in_recovery_flow", "result"))
	}
	return
}
