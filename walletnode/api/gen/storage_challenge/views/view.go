// Code generated by goa v3.14.0, DO NOT EDIT.
//
// StorageChallenge views
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// SummaryStatsResult is the viewed result type that is projected based on a
// view.
type SummaryStatsResult struct {
	// Type to project
	Projected *SummaryStatsResultView
	// View to render
	View string
}

// SummaryStatsResultView is a type that runs validations on a projected type.
type SummaryStatsResultView struct {
	// SCSummaryStats represents storage challenge summary of metrics stats
	ScSummaryStats *SCSummaryStatsView
}

// SCSummaryStatsView is a type that runs validations on a projected type.
type SCSummaryStatsView struct {
	// Total number of challenges issued
	TotalChallengesIssued *int
	// Total number of challenges processed by the recipient node
	TotalChallengesProcessed *int
	// Total number of challenges verified by the challenger node
	TotalChallengesVerifiedByChallenger *int
	// Total number of challenges verified by observers
	TotalChallengesVerifiedByObservers *int
	// challenges failed due to slow-responses evaluated by observers
	NoOfSlowResponsesObservedByObservers *int
	// challenges failed due to invalid signatures evaluated by observers
	NoOfInvalidSignaturesObservedByObservers *int
	// challenges failed due to invalid evaluation evaluated by observers
	NoOfInvalidEvaluationObservedByObservers *int
}

var (
	// SummaryStatsResultMap is a map indexing the attribute names of
	// SummaryStatsResult by view name.
	SummaryStatsResultMap = map[string][]string{
		"default": {
			"sc_summary_stats",
		},
	}
)

// ValidateSummaryStatsResult runs the validations defined on the viewed result
// type SummaryStatsResult.
func ValidateSummaryStatsResult(result *SummaryStatsResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSummaryStatsResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSummaryStatsResultView runs the validations defined on
// SummaryStatsResultView using the "default" view.
func ValidateSummaryStatsResultView(result *SummaryStatsResultView) (err error) {
	if result.ScSummaryStats == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sc_summary_stats", "result"))
	}
	if result.ScSummaryStats != nil {
		if err2 := ValidateSCSummaryStatsView(result.ScSummaryStats); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSCSummaryStatsView runs the validations defined on
// SCSummaryStatsView.
func ValidateSCSummaryStatsView(result *SCSummaryStatsView) (err error) {
	if result.TotalChallengesIssued == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_issued", "result"))
	}
	if result.TotalChallengesProcessed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_processed", "result"))
	}
	if result.TotalChallengesVerifiedByChallenger == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_verified_by_challenger", "result"))
	}
	if result.TotalChallengesVerifiedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_challenges_verified_by_observers", "result"))
	}
	if result.NoOfSlowResponsesObservedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("no_of_slow_responses_observed_by_observers", "result"))
	}
	if result.NoOfInvalidSignaturesObservedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("no_of_invalid_signatures_observed_by_observers", "result"))
	}
	if result.NoOfInvalidEvaluationObservedByObservers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("no_of_invalid_evaluation_observed_by_observers", "result"))
	}
	return
}
