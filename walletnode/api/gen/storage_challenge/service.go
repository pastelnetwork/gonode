// Code generated by goa v3.14.0, DO NOT EDIT.
//
// StorageChallenge service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package storagechallenge

import (
	"context"

	storagechallengeviews "github.com/pastelnetwork/gonode/walletnode/api/gen/storage_challenge/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Storage Challenge service for to return storage-challenge related data
type Service interface {
	// Fetches summary stats data over a specified time range
	GetSummaryStats(context.Context, *GetSummaryStatsPayload) (res *SummaryStatsResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "StorageChallenge"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getSummaryStats"}

// GetSummaryStatsPayload is the payload type of the StorageChallenge service
// getSummaryStats method.
type GetSummaryStatsPayload struct {
	// Start time for the metrics data range
	From *string
	// End time for the metrics data range
	To *string
	// PastelID of the user to fetch metrics for
	Pid string
	// Passphrase of the owner's PastelID
	Key string
}

// Storage-Challenge SummaryStats
type SCSummaryStats struct {
	// Total number of challenges issued
	TotalChallengesIssued int
	// Total number of challenges processed by the recipient node
	TotalChallengesProcessed int
	// Total number of challenges verified by the challenger node
	TotalChallengesVerifiedByChallenger int
	// Total number of challenges verified by observers
	TotalChallengesVerifiedByObservers int
	// challenges failed due to slow-responses evaluated by observers
	NoOfSlowResponsesObservedByObservers int
	// challenges failed due to invalid signatures evaluated by observers
	NoOfInvalidSignaturesObservedByObservers int
	// challenges failed due to invalid evaluation evaluated by observers
	NoOfInvalidEvaluationObservedByObservers int
}

// SummaryStatsResult is the result type of the StorageChallenge service
// getSummaryStats method.
type SummaryStatsResult struct {
	// SCSummaryStats represents storage challenge summary of metrics stats
	ScSummaryStats *SCSummaryStats
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalServerError", false, false, false)
}

// NewSummaryStatsResult initializes result type SummaryStatsResult from viewed
// result type SummaryStatsResult.
func NewSummaryStatsResult(vres *storagechallengeviews.SummaryStatsResult) *SummaryStatsResult {
	return newSummaryStatsResult(vres.Projected)
}

// NewViewedSummaryStatsResult initializes viewed result type
// SummaryStatsResult from result type SummaryStatsResult using the given view.
func NewViewedSummaryStatsResult(res *SummaryStatsResult, view string) *storagechallengeviews.SummaryStatsResult {
	p := newSummaryStatsResultView(res)
	return &storagechallengeviews.SummaryStatsResult{Projected: p, View: "default"}
}

// newSummaryStatsResult converts projected type SummaryStatsResult to service
// type SummaryStatsResult.
func newSummaryStatsResult(vres *storagechallengeviews.SummaryStatsResultView) *SummaryStatsResult {
	res := &SummaryStatsResult{}
	if vres.ScSummaryStats != nil {
		res.ScSummaryStats = transformStoragechallengeviewsSCSummaryStatsViewToSCSummaryStats(vres.ScSummaryStats)
	}
	return res
}

// newSummaryStatsResultView projects result type SummaryStatsResult to
// projected type SummaryStatsResultView using the "default" view.
func newSummaryStatsResultView(res *SummaryStatsResult) *storagechallengeviews.SummaryStatsResultView {
	vres := &storagechallengeviews.SummaryStatsResultView{}
	if res.ScSummaryStats != nil {
		vres.ScSummaryStats = transformSCSummaryStatsToStoragechallengeviewsSCSummaryStatsView(res.ScSummaryStats)
	}
	return vres
}

// transformStoragechallengeviewsSCSummaryStatsViewToSCSummaryStats builds a
// value of type *SCSummaryStats from a value of type
// *storagechallengeviews.SCSummaryStatsView.
func transformStoragechallengeviewsSCSummaryStatsViewToSCSummaryStats(v *storagechallengeviews.SCSummaryStatsView) *SCSummaryStats {
	if v == nil {
		return nil
	}
	res := &SCSummaryStats{
		TotalChallengesIssued:                    *v.TotalChallengesIssued,
		TotalChallengesProcessed:                 *v.TotalChallengesProcessed,
		TotalChallengesVerifiedByChallenger:      *v.TotalChallengesVerifiedByChallenger,
		TotalChallengesVerifiedByObservers:       *v.TotalChallengesVerifiedByObservers,
		NoOfSlowResponsesObservedByObservers:     *v.NoOfSlowResponsesObservedByObservers,
		NoOfInvalidSignaturesObservedByObservers: *v.NoOfInvalidSignaturesObservedByObservers,
		NoOfInvalidEvaluationObservedByObservers: *v.NoOfInvalidEvaluationObservedByObservers,
	}

	return res
}

// transformSCSummaryStatsToStoragechallengeviewsSCSummaryStatsView builds a
// value of type *storagechallengeviews.SCSummaryStatsView from a value of type
// *SCSummaryStats.
func transformSCSummaryStatsToStoragechallengeviewsSCSummaryStatsView(v *SCSummaryStats) *storagechallengeviews.SCSummaryStatsView {
	res := &storagechallengeviews.SCSummaryStatsView{
		TotalChallengesIssued:                    &v.TotalChallengesIssued,
		TotalChallengesProcessed:                 &v.TotalChallengesProcessed,
		TotalChallengesVerifiedByChallenger:      &v.TotalChallengesVerifiedByChallenger,
		TotalChallengesVerifiedByObservers:       &v.TotalChallengesVerifiedByObservers,
		NoOfSlowResponsesObservedByObservers:     &v.NoOfSlowResponsesObservedByObservers,
		NoOfInvalidSignaturesObservedByObservers: &v.NoOfInvalidSignaturesObservedByObservers,
		NoOfInvalidEvaluationObservedByObservers: &v.NoOfInvalidEvaluationObservedByObservers,
	}

	return res
}
