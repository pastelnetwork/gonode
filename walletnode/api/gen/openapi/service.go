// Code generated by goa v3.5.3, DO NOT EDIT.
//
// openapi service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package openapi

import (
	"context"

	openapiviews "github.com/pastelnetwork/gonode/walletnode/api/gen/openapi/views"
	goa "goa.design/goa/v3/pkg"
)

// OpenAPI Sensei service
type Service interface {
	// Upload the image
	UploadImage(context.Context, *UploadImagePayload) (res *Image, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "openapi"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"uploadImage"}

// UploadImagePayload is the payload type of the openapi service uploadImage
// method.
type UploadImagePayload struct {
	// File to upload
	Bytes []byte
	// For internal use
	Filename *string
}

// Image is the result type of the openapi service uploadImage method.
type Image struct {
	// txid
	Txid string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewImage initializes result type Image from viewed result type Image.
func NewImage(vres *openapiviews.Image) *Image {
	return newImage(vres.Projected)
}

// NewViewedImage initializes viewed result type Image from result type Image
// using the given view.
func NewViewedImage(res *Image, view string) *openapiviews.Image {
	p := newImageView(res)
	return &openapiviews.Image{Projected: p, View: "default"}
}

// newImage converts projected type Image to service type Image.
func newImage(vres *openapiviews.ImageView) *Image {
	res := &Image{}
	if vres.Txid != nil {
		res.Txid = *vres.Txid
	}
	return res
}

// newImageView projects result type Image to projected type ImageView using
// the "default" view.
func newImageView(res *Image) *openapiviews.ImageView {
	vres := &openapiviews.ImageView{
		Txid: &res.Txid,
	}
	return vres
}
