// Code generated by goa v3.5.3, DO NOT EDIT.
//
// sense views
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// ImageUploadResult is the viewed result type that is projected based on a
// view.
type ImageUploadResult struct {
	// Type to project
	Projected *ImageUploadResultView
	// View to render
	View string
}

// StartActionDataResult is the viewed result type that is projected based on a
// view.
type StartActionDataResult struct {
	// Type to project
	Projected *StartActionDataResultView
	// View to render
	View string
}

// ImageUploadResultView is a type that runs validations on a projected type.
type ImageUploadResultView struct {
	// Task ID of uploaded image processing task
	TaskID *string
}

// StartActionDataResultView is a type that runs validations on a projected
// type.
type StartActionDataResultView struct {
	// Estimated fee
	EstimatedFee *float64
}

var (
	// ImageUploadResultMap is a map indexing the attribute names of
	// ImageUploadResult by view name.
	ImageUploadResultMap = map[string][]string{
		"default": {
			"task_id",
		},
	}
	// StartActionDataResultMap is a map indexing the attribute names of
	// StartActionDataResult by view name.
	StartActionDataResultMap = map[string][]string{
		"default": {
			"estimated_fee",
		},
	}
)

// ValidateImageUploadResult runs the validations defined on the viewed result
// type ImageUploadResult.
func ValidateImageUploadResult(result *ImageUploadResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateImageUploadResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStartActionDataResult runs the validations defined on the viewed
// result type StartActionDataResult.
func ValidateStartActionDataResult(result *StartActionDataResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStartActionDataResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateImageUploadResultView runs the validations defined on
// ImageUploadResultView using the "default" view.
func ValidateImageUploadResultView(result *ImageUploadResultView) (err error) {
	if result.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "result"))
	}
	if result.TaskID != nil {
		if utf8.RuneCountInString(*result.TaskID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.task_id", *result.TaskID, utf8.RuneCountInString(*result.TaskID), 8, true))
		}
	}
	if result.TaskID != nil {
		if utf8.RuneCountInString(*result.TaskID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.task_id", *result.TaskID, utf8.RuneCountInString(*result.TaskID), 8, false))
		}
	}
	return
}

// ValidateStartActionDataResultView runs the validations defined on
// StartActionDataResultView using the "default" view.
func ValidateStartActionDataResultView(result *StartActionDataResultView) (err error) {
	if result.EstimatedFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("estimated_fee", "result"))
	}
	if result.EstimatedFee != nil {
		if *result.EstimatedFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.estimated_fee", *result.EstimatedFee, 1e-05, true))
		}
	}
	return
}
