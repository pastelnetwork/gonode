// Code generated by goa v3.5.3, DO NOT EDIT.
//
// sense service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package sense

import (
	"context"

	senseviews "github.com/pastelnetwork/gonode/walletnode/api/gen/sense/views"
	goa "goa.design/goa/v3/pkg"
)

// OpenAPI Sense service
type Service interface {
	// Upload the image
	UploadImage(context.Context, *UploadImagePayload) (res *ImageUploadResult, err error)
	// Start Action
	StartTask(context.Context, *StartTaskPayload) (res *StartActionDataResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "sense"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"uploadImage", "startTask"}

// UploadImagePayload is the payload type of the sense service uploadImage
// method.
type UploadImagePayload struct {
	// File to upload
	Bytes []byte
	// For internal use
	Filename *string
}

// ImageUploadResult is the result type of the sense service uploadImage method.
type ImageUploadResult struct {
	// Task ID of uploaded image processing task
	TaskID string
}

// StartTaskPayload is the payload type of the sense service startTask method.
type StartTaskPayload struct {
	// Task ID of uploaded image processing task
	TaskID *string
	// 3rd party app's PastelID
	PastelID string
	// Hash (SHA3-256) of the Action Data
	ActionDataHash []byte
	// The signature of the Action Data
	ActionDataSignature []byte
}

// StartActionDataResult is the result type of the sense service startTask
// method.
type StartActionDataResult struct {
	// Estimated fee
	EstimatedFee float64
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewImageUploadResult initializes result type ImageUploadResult from viewed
// result type ImageUploadResult.
func NewImageUploadResult(vres *senseviews.ImageUploadResult) *ImageUploadResult {
	return newImageUploadResult(vres.Projected)
}

// NewViewedImageUploadResult initializes viewed result type ImageUploadResult
// from result type ImageUploadResult using the given view.
func NewViewedImageUploadResult(res *ImageUploadResult, view string) *senseviews.ImageUploadResult {
	p := newImageUploadResultView(res)
	return &senseviews.ImageUploadResult{Projected: p, View: "default"}
}

// NewStartActionDataResult initializes result type StartActionDataResult from
// viewed result type StartActionDataResult.
func NewStartActionDataResult(vres *senseviews.StartActionDataResult) *StartActionDataResult {
	return newStartActionDataResult(vres.Projected)
}

// NewViewedStartActionDataResult initializes viewed result type
// StartActionDataResult from result type StartActionDataResult using the given
// view.
func NewViewedStartActionDataResult(res *StartActionDataResult, view string) *senseviews.StartActionDataResult {
	p := newStartActionDataResultView(res)
	return &senseviews.StartActionDataResult{Projected: p, View: "default"}
}

// newImageUploadResult converts projected type ImageUploadResult to service
// type ImageUploadResult.
func newImageUploadResult(vres *senseviews.ImageUploadResultView) *ImageUploadResult {
	res := &ImageUploadResult{}
	if vres.TaskID != nil {
		res.TaskID = *vres.TaskID
	}
	return res
}

// newImageUploadResultView projects result type ImageUploadResult to projected
// type ImageUploadResultView using the "default" view.
func newImageUploadResultView(res *ImageUploadResult) *senseviews.ImageUploadResultView {
	vres := &senseviews.ImageUploadResultView{
		TaskID: &res.TaskID,
	}
	return vres
}

// newStartActionDataResult converts projected type StartActionDataResult to
// service type StartActionDataResult.
func newStartActionDataResult(vres *senseviews.StartActionDataResultView) *StartActionDataResult {
	res := &StartActionDataResult{}
	if vres.EstimatedFee != nil {
		res.EstimatedFee = *vres.EstimatedFee
	}
	if vres.EstimatedFee == nil {
		res.EstimatedFee = 1
	}
	return res
}

// newStartActionDataResultView projects result type StartActionDataResult to
// projected type StartActionDataResultView using the "default" view.
func newStartActionDataResultView(res *StartActionDataResult) *senseviews.StartActionDataResultView {
	vres := &senseviews.StartActionDataResultView{
		EstimatedFee: &res.EstimatedFee,
	}
	return vres
}
