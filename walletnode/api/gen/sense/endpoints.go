// Code generated by goa v3.5.3, DO NOT EDIT.
//
// sense endpoints
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package sense

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "sense" service endpoints.
type Endpoints struct {
	UploadImage   goa.Endpoint
	ActionDetails goa.Endpoint
}

// NewEndpoints wraps the methods of the "sense" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		UploadImage:   NewUploadImageEndpoint(s),
		ActionDetails: NewActionDetailsEndpoint(s),
	}
}

// Use applies the given middleware to all the "sense" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UploadImage = m(e.UploadImage)
	e.ActionDetails = m(e.ActionDetails)
}

// NewUploadImageEndpoint returns an endpoint function that calls the method
// "uploadImage" of service "sense".
func NewUploadImageEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UploadImagePayload)
		res, err := s.UploadImage(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedImage(res, "default")
		return vres, nil
	}
}

// NewActionDetailsEndpoint returns an endpoint function that calls the method
// "actionDetails" of service "sense".
func NewActionDetailsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ActionDetailsPayload)
		res, err := s.ActionDetails(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedActionDetailResult(res, "default")
		return vres, nil
	}
}
