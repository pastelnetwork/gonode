// Code generated by goa v3.5.2, DO NOT EDIT.
//
// external_dupe_detection_api HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	externaldupedetectionapi "github.com/pastelnetwork/gonode/walletnode/gen/external_dupe_detection_api"
	externaldupedetectionapiviews "github.com/pastelnetwork/gonode/walletnode/gen/external_dupe_detection_api/views"
	goa "goa.design/goa/v3/pkg"
)

// InitiateSubmissionRequestBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// request body.
type InitiateSubmissionRequestBody struct {
	// SHA3-256 format, unique external dupe detection request id
	RequestID string `form:"request_id" json:"request_id" xml:"request_id"`
	// SHA3-256 format, unique external dupe detection request id
	DatetimeRequestInitiated string `form:"datetime_request_initiated" json:"datetime_request_initiated" xml:"datetime_request_initiated"`
	// Pastel service LLC API ID
	PastelServiceLLCAPIID *string `form:"pastel_service_llc_api_id,omitempty" json:"pastel_service_llc_api_id,omitempty" xml:"pastel_service_llc_api_id,omitempty"`
	// Pastel service LLC API Secret
	PastelServiceLLCAPISecret    string  `form:"pastel_service_llc_api_secret" json:"pastel_service_llc_api_secret" xml:"pastel_service_llc_api_secret"`
	MaxCoseForDupeDetectionInUSD float64 `form:"max_cost_for_dupe_detection_in_usd" json:"max_cost_for_dupe_detection_in_usd" xml:"max_cost_for_dupe_detection_in_usd"`
	// Base64 encoded of submitted image
	SubmittedImageDataBase64 string `form:"submitted_image_data_base64" json:"submitted_image_data_base64" xml:"submitted_image_data_base64"`
	// SHA3-256 hash of submitted image
	SHA3256HashOfSubmittedImage string `form:"sha3256_hash_of_submitted_image" json:"sha3256_hash_of_submitted_image" xml:"sha3256_hash_of_submitted_image"`
}

// InitiateSubmissionResponseBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// response body.
type InitiateSubmissionResponseBody struct {
	// SHA3-256 format, unique external dupe detection request id
	RequestID *string `form:"request_id,omitempty" json:"request_id,omitempty" xml:"request_id,omitempty"`
}

// InitiateSubmissionBadRequestResponseBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// response body for the "BadRequest" error.
type InitiateSubmissionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// InitiateSubmissionInternalServerErrorResponseBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// response body for the "InternalServerError" error.
type InitiateSubmissionInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewInitiateSubmissionRequestBody builds the HTTP request body from the
// payload of the "initiate_submission" endpoint of the
// "external_dupe_detection_api" service.
func NewInitiateSubmissionRequestBody(p *externaldupedetectionapi.ExternalDupeDetetionAPIInitiateSubmission) *InitiateSubmissionRequestBody {
	body := &InitiateSubmissionRequestBody{
		RequestID:                    p.RequestID,
		DatetimeRequestInitiated:     p.DatetimeRequestInitiated,
		PastelServiceLLCAPIID:        p.PastelServiceLLCAPIID,
		PastelServiceLLCAPISecret:    p.PastelServiceLLCAPISecret,
		MaxCoseForDupeDetectionInUSD: p.MaxCoseForDupeDetectionInUSD,
		SubmittedImageDataBase64:     p.SubmittedImageDataBase64,
		SHA3256HashOfSubmittedImage:  p.SHA3256HashOfSubmittedImage,
	}
	return body
}

// NewInitiateSubmissionExternaldupedetetionapiinitiatesubmissionresultCreated
// builds a "external_dupe_detection_api" service "initiate_submission"
// endpoint result from a HTTP "Created" response.
func NewInitiateSubmissionExternaldupedetetionapiinitiatesubmissionresultCreated(body *InitiateSubmissionResponseBody) *externaldupedetectionapiviews.ExternaldupedetetionapiinitiatesubmissionresultView {
	v := &externaldupedetectionapiviews.ExternaldupedetetionapiinitiatesubmissionresultView{
		RequestID: body.RequestID,
	}

	return v
}

// NewInitiateSubmissionBadRequest builds a external_dupe_detection_api service
// initiate_submission endpoint BadRequest error.
func NewInitiateSubmissionBadRequest(body *InitiateSubmissionBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewInitiateSubmissionInternalServerError builds a
// external_dupe_detection_api service initiate_submission endpoint
// InternalServerError error.
func NewInitiateSubmissionInternalServerError(body *InitiateSubmissionInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateInitiateSubmissionBadRequestResponseBody runs the validations
// defined on initiate_submission_BadRequest_response_body
func ValidateInitiateSubmissionBadRequestResponseBody(body *InitiateSubmissionBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateInitiateSubmissionInternalServerErrorResponseBody runs the
// validations defined on initiate_submission_InternalServerError_response_body
func ValidateInitiateSubmissionInternalServerErrorResponseBody(body *InitiateSubmissionInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
