// Code generated by goa v3.5.2, DO NOT EDIT.
//
// external_dupe_detection_api HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package server

import (
	"unicode/utf8"

	externaldupedetectionapi "github.com/pastelnetwork/gonode/walletnode/gen/external_dupe_detection_api"
	externaldupedetectionapiviews "github.com/pastelnetwork/gonode/walletnode/gen/external_dupe_detection_api/views"
	goa "goa.design/goa/v3/pkg"
)

// InitiateSubmissionRequestBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// request body.
type InitiateSubmissionRequestBody struct {
	// SHA3-256 format, unique external dupe detection request id
	RequestID *string `form:"request_id,omitempty" json:"request_id,omitempty" xml:"request_id,omitempty"`
	// SHA3-256 format, unique external dupe detection request id
	DatetimeRequestInitiated *string `form:"datetime_request_initiated,omitempty" json:"datetime_request_initiated,omitempty" xml:"datetime_request_initiated,omitempty"`
	// Pastel service LLC API ID
	PastelServiceLLCAPIID *string `form:"pastel_service_llc_api_id,omitempty" json:"pastel_service_llc_api_id,omitempty" xml:"pastel_service_llc_api_id,omitempty"`
	// Pastel service LLC API Secret
	PastelServiceLLCAPISecret    *string  `form:"pastel_service_llc_api_secret,omitempty" json:"pastel_service_llc_api_secret,omitempty" xml:"pastel_service_llc_api_secret,omitempty"`
	MaxCoseForDupeDetectionInUSD *float64 `form:"max_cost_for_dupe_detection_in_usd,omitempty" json:"max_cost_for_dupe_detection_in_usd,omitempty" xml:"max_cost_for_dupe_detection_in_usd,omitempty"`
	// Base64 encoded of submitted image
	SubmittedImageDataBase64 *string `form:"submitted_image_data_base64,omitempty" json:"submitted_image_data_base64,omitempty" xml:"submitted_image_data_base64,omitempty"`
	// SHA3-256 hash of submitted image
	SHA3256HashOfSubmittedImage *string `form:"sha3256_hash_of_submitted_image,omitempty" json:"sha3256_hash_of_submitted_image,omitempty" xml:"sha3256_hash_of_submitted_image,omitempty"`
}

// InitiateSubmissionResponseBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// response body.
type InitiateSubmissionResponseBody struct {
	// SHA3-256 format, unique external dupe detection request id
	RequestID string `form:"request_id" json:"request_id" xml:"request_id"`
}

// InitiateSubmissionBadRequestResponseBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// response body for the "BadRequest" error.
type InitiateSubmissionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// InitiateSubmissionInternalServerErrorResponseBody is the type of the
// "external_dupe_detection_api" service "initiate_submission" endpoint HTTP
// response body for the "InternalServerError" error.
type InitiateSubmissionInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewInitiateSubmissionResponseBody builds the HTTP response body from the
// result of the "initiate_submission" endpoint of the
// "external_dupe_detection_api" service.
func NewInitiateSubmissionResponseBody(res *externaldupedetectionapiviews.ExternaldupedetetionapiinitiatesubmissionresultView) *InitiateSubmissionResponseBody {
	body := &InitiateSubmissionResponseBody{
		RequestID: *res.RequestID,
	}
	return body
}

// NewInitiateSubmissionBadRequestResponseBody builds the HTTP response body
// from the result of the "initiate_submission" endpoint of the
// "external_dupe_detection_api" service.
func NewInitiateSubmissionBadRequestResponseBody(res *goa.ServiceError) *InitiateSubmissionBadRequestResponseBody {
	body := &InitiateSubmissionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewInitiateSubmissionInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "initiate_submission" endpoint of the
// "external_dupe_detection_api" service.
func NewInitiateSubmissionInternalServerErrorResponseBody(res *goa.ServiceError) *InitiateSubmissionInternalServerErrorResponseBody {
	body := &InitiateSubmissionInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewInitiateSubmissionExternalDupeDetetionAPIInitiateSubmission builds a
// external_dupe_detection_api service initiate_submission endpoint payload.
func NewInitiateSubmissionExternalDupeDetetionAPIInitiateSubmission(body *InitiateSubmissionRequestBody) *externaldupedetectionapi.ExternalDupeDetetionAPIInitiateSubmission {
	v := &externaldupedetectionapi.ExternalDupeDetetionAPIInitiateSubmission{
		RequestID:                    *body.RequestID,
		DatetimeRequestInitiated:     *body.DatetimeRequestInitiated,
		PastelServiceLLCAPIID:        body.PastelServiceLLCAPIID,
		PastelServiceLLCAPISecret:    *body.PastelServiceLLCAPISecret,
		MaxCoseForDupeDetectionInUSD: *body.MaxCoseForDupeDetectionInUSD,
		SubmittedImageDataBase64:     *body.SubmittedImageDataBase64,
		SHA3256HashOfSubmittedImage:  *body.SHA3256HashOfSubmittedImage,
	}

	return v
}

// ValidateInitiateSubmissionRequestBody runs the validations defined on
// initiate_submission_request_body
func ValidateInitiateSubmissionRequestBody(body *InitiateSubmissionRequestBody) (err error) {
	if body.RequestID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("request_id", "body"))
	}
	if body.DatetimeRequestInitiated == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("datetime_request_initiated", "body"))
	}
	if body.PastelServiceLLCAPISecret == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pastel_service_llc_api_secret", "body"))
	}
	if body.MaxCoseForDupeDetectionInUSD == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("max_cost_for_dupe_detection_in_usd", "body"))
	}
	if body.SubmittedImageDataBase64 == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submitted_image_data_base64", "body"))
	}
	if body.SHA3256HashOfSubmittedImage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha3256_hash_of_submitted_image", "body"))
	}
	if body.RequestID != nil {
		if utf8.RuneCountInString(*body.RequestID) < 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.request_id", *body.RequestID, utf8.RuneCountInString(*body.RequestID), 64, true))
		}
	}
	if body.RequestID != nil {
		if utf8.RuneCountInString(*body.RequestID) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.request_id", *body.RequestID, utf8.RuneCountInString(*body.RequestID), 64, false))
		}
	}
	if body.DatetimeRequestInitiated != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.datetime_request_initiated", *body.DatetimeRequestInitiated, goa.FormatDateTime))
	}
	if body.PastelServiceLLCAPIID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastel_service_llc_api_id", *body.PastelServiceLLCAPIID, "^[a-zA-Z0-9]+$"))
	}
	if body.PastelServiceLLCAPIID != nil {
		if utf8.RuneCountInString(*body.PastelServiceLLCAPIID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_service_llc_api_id", *body.PastelServiceLLCAPIID, utf8.RuneCountInString(*body.PastelServiceLLCAPIID), 86, true))
		}
	}
	if body.PastelServiceLLCAPIID != nil {
		if utf8.RuneCountInString(*body.PastelServiceLLCAPIID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_service_llc_api_id", *body.PastelServiceLLCAPIID, utf8.RuneCountInString(*body.PastelServiceLLCAPIID), 86, false))
		}
	}
	if body.PastelServiceLLCAPISecret != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.pastel_service_llc_api_secret", *body.PastelServiceLLCAPISecret, "^[a-zA-Z0-9]+$"))
	}
	if body.PastelServiceLLCAPISecret != nil {
		if utf8.RuneCountInString(*body.PastelServiceLLCAPISecret) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_service_llc_api_secret", *body.PastelServiceLLCAPISecret, utf8.RuneCountInString(*body.PastelServiceLLCAPISecret), 86, true))
		}
	}
	if body.PastelServiceLLCAPISecret != nil {
		if utf8.RuneCountInString(*body.PastelServiceLLCAPISecret) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_service_llc_api_secret", *body.PastelServiceLLCAPISecret, utf8.RuneCountInString(*body.PastelServiceLLCAPISecret), 86, false))
		}
	}
	if body.MaxCoseForDupeDetectionInUSD != nil {
		if *body.MaxCoseForDupeDetectionInUSD < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.max_cost_for_dupe_detection_in_usd", *body.MaxCoseForDupeDetectionInUSD, 0, true))
		}
	}
	if body.SHA3256HashOfSubmittedImage != nil {
		if utf8.RuneCountInString(*body.SHA3256HashOfSubmittedImage) < 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sha3256_hash_of_submitted_image", *body.SHA3256HashOfSubmittedImage, utf8.RuneCountInString(*body.SHA3256HashOfSubmittedImage), 64, true))
		}
	}
	if body.SHA3256HashOfSubmittedImage != nil {
		if utf8.RuneCountInString(*body.SHA3256HashOfSubmittedImage) > 64 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.sha3256_hash_of_submitted_image", *body.SHA3256HashOfSubmittedImage, utf8.RuneCountInString(*body.SHA3256HashOfSubmittedImage), 64, false))
		}
	}
	return
}
