// Code generated by goa v3.5.2, DO NOT EDIT.
//
// external_dupe_detection_api service
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package externaldupedetectionapi

import (
	"context"

	externaldupedetectionapiviews "github.com/pastelnetwork/gonode/walletnode/gen/external_dupe_detection_api/views"
	goa "goa.design/goa/v3/pkg"
)

// API detect duplication for external images
type Service interface {
	// API initiate submit external dupe detection request
	InitiateSubmission(context.Context, *ExternalDupeDetetionAPIInitiateSubmission) (res *Externaldupedetetionapiinitiatesubmissionresult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "external_dupe_detection_api"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"initiate_submission"}

// ExternalDupeDetetionAPIInitiateSubmission is the payload type of the
// external_dupe_detection_api service initiate_submission method.
type ExternalDupeDetetionAPIInitiateSubmission struct {
	// SHA3-256 format, unique external dupe detection request id
	RequestID string
	// SHA3-256 format, unique external dupe detection request id
	DatetimeRequestInitiated string
	// Pastel service LLC API ID
	PastelServiceLLCAPIID *string
	// Pastel service LLC API Secret
	PastelServiceLLCAPISecret    string
	MaxCoseForDupeDetectionInUSD float64
	// Base64 encoded of submitted image
	SubmittedImageDataBase64 string
	// SHA3-256 hash of submitted image
	SHA3256HashOfSubmittedImage string
}

// Externaldupedetetionapiinitiatesubmissionresult is the result type of the
// external_dupe_detection_api service initiate_submission method.
type Externaldupedetetionapiinitiatesubmissionresult struct {
	// SHA3-256 format, unique external dupe detection request id
	RequestID string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewExternaldupedetetionapiinitiatesubmissionresult initializes result type
// Externaldupedetetionapiinitiatesubmissionresult from viewed result type
// Externaldupedetetionapiinitiatesubmissionresult.
func NewExternaldupedetetionapiinitiatesubmissionresult(vres *externaldupedetectionapiviews.Externaldupedetetionapiinitiatesubmissionresult) *Externaldupedetetionapiinitiatesubmissionresult {
	return newExternaldupedetetionapiinitiatesubmissionresult(vres.Projected)
}

// NewViewedExternaldupedetetionapiinitiatesubmissionresult initializes viewed
// result type Externaldupedetetionapiinitiatesubmissionresult from result type
// Externaldupedetetionapiinitiatesubmissionresult using the given view.
func NewViewedExternaldupedetetionapiinitiatesubmissionresult(res *Externaldupedetetionapiinitiatesubmissionresult, view string) *externaldupedetectionapiviews.Externaldupedetetionapiinitiatesubmissionresult {
	p := newExternaldupedetetionapiinitiatesubmissionresultView(res)
	return &externaldupedetectionapiviews.Externaldupedetetionapiinitiatesubmissionresult{Projected: p, View: "default"}
}

// newExternaldupedetetionapiinitiatesubmissionresult converts projected type
// Externaldupedetetionapiinitiatesubmissionresult to service type
// Externaldupedetetionapiinitiatesubmissionresult.
func newExternaldupedetetionapiinitiatesubmissionresult(vres *externaldupedetectionapiviews.ExternaldupedetetionapiinitiatesubmissionresultView) *Externaldupedetetionapiinitiatesubmissionresult {
	res := &Externaldupedetetionapiinitiatesubmissionresult{}
	if vres.RequestID != nil {
		res.RequestID = *vres.RequestID
	}
	return res
}

// newExternaldupedetetionapiinitiatesubmissionresultView projects result type
// Externaldupedetetionapiinitiatesubmissionresult to projected type
// ExternaldupedetetionapiinitiatesubmissionresultView using the "default" view.
func newExternaldupedetetionapiinitiatesubmissionresultView(res *Externaldupedetetionapiinitiatesubmissionresult) *externaldupedetectionapiviews.ExternaldupedetetionapiinitiatesubmissionresultView {
	vres := &externaldupedetectionapiviews.ExternaldupedetetionapiinitiatesubmissionresultView{
		RequestID: &res.RequestID,
	}
	return vres
}
