package storagechallenge


func TestTaskProcessStorageChallenge(t *testing.T) {
	type fields struct {
		SuperNodeTask *common.SuperNodeTask
		SCService     *SCService
	}
	type args struct {
		incomingChallengeMessage types.Message
		PastelID                 string
		MerkleRoot               string
	}
	tests := map[string]struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		"success": {
			args: args{
				incomingChallengeMessage: types.Message{
					ChallengeID: "40fb87182c3d3643837d9e8590365f5f227088f828ad448dd18fb717231d9669",
					MessageType: types.ChallengeMessageType,
					Data: types.MessageData{
						ChallengerID: "5072696d6172794944",
						Challenge: types.ChallengeData{
							Block:      1,
							Merkelroot: "5072696d6172794944",
							Timestamp:  time.Now().UTC(),
							FileHash:   "亁zȲǘ",
							StartIndex: 0,
							EndIndex:   22,
						},
						RecipientID: "B",
					},
					Sender:          "A",
					SenderSignature: []byte{1, 2, 3},
				},

				PastelID:   "B",
				MerkleRoot: hex.EncodeToString([]byte("PrimaryID")),
			},
			wantErr: false,
		},
		// "my_node_is_challenger": {
		// 	args: args{
		// 		MerkleRoot: hex.EncodeToString([]byte("PrimaryID")),
		// 		PastelID:   hex.EncodeToString([]byte("PrimaryID")),
		// 	},
		// 	wantErr: false,
		// },
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			ticket := pastel.RegTicket{}
			f := fuzz.New()
			f.Fuzz(&ticket)
			ticket.Height = 2

			b, err := json.Marshal(ticket.RegTicketData.NFTTicketData.AppTicketData)
			if err != nil {
				t.Fatalf("faied to marshal, err: %s", err)
			}
			ticket.RegTicketData.NFTTicketData.AppTicket = base64.StdEncoding.EncodeToString(b)

			b, err = json.Marshal(ticket.RegTicketData.NFTTicketData)
			if err != nil {
				t.Fatalf("faied to marshal, err: %s", err)
			}
			ticket.RegTicketData.NFTTicket = b

			nodes := pastel.MasterNodes{}
			nodes = append(nodes, pastel.MasterNode{ExtKey: "PrimaryID"})
			nodes = append(nodes, pastel.MasterNode{ExtKey: "A"})
			nodes = append(nodes, pastel.MasterNode{ExtKey: "B"})
			nodes = append(nodes, pastel.MasterNode{ExtKey: "C"})
			nodes = append(nodes, pastel.MasterNode{ExtKey: "D"})
			nodes = append(nodes, pastel.MasterNode{ExtKey: "5072696d6172794944"})

			pMock := pastelMock.NewMockClient(t)
			pMock.ListenOnRegTickets(pastel.RegTickets{
				ticket,
			}, nil).ListenOnActionTickets(nil, nil).ListenOnGetBlockCount(1, nil).ListenOnGetBlockVerbose1(&pastel.GetBlockVerbose1Result{
				MerkleRoot: tt.args.MerkleRoot,
			}, nil).ListenOnMasterNodesExtra(nodes, nil).ListenOnVerify(true, nil).ListenOnSign([]byte{}, nil)

			closestNodes := []string{"A", "B", "C", "D"}
			retrieveValue := []byte("I retrieved this result")
			p2pClientMock := p2pMock.NewMockClient(t).ListenOnRetrieve(retrieveValue, nil).
				ListenOnNClosestNodes(closestNodes[0:2], nil).ListenOnEnableKey(nil)

			rqClientMock := rqMock.NewMockClient(t)
			rqClientMock.ListenOnEncodeInfo(&rqnode.EncodeInfo{}, nil)
			rqClientMock.ListenOnRaptorQ().ListenOnClose(nil)
			// rqClientMock.ListenOnConnect(tt.args.connectErr)

			clientMock := sctest.NewMockClient(t)
			clientMock.ListenOnConnect("", nil).ListenOnStorageChallengeInterface().
				ListenOnVerifyStorageChallengeFunc(nil).ConnectionInterface.On("Close").Return(nil)

			fsMock := storageMock.NewMockFileStorage()
			// storage := files.NewStorage(fsMock)

			testConfig := NewConfig()
			testConfig.PastelID = tt.args.PastelID

			task := SCTask{
				SuperNodeTask: tt.fields.SuperNodeTask,
				SCService:     NewService(testConfig, fsMock, pMock.Client, clientMock, p2pClientMock, nil, nil),
				storage:       common.NewStorageHandler(p2pClientMock, rqClientMock, testConfig.RaptorQServiceAddress, testConfig.RqFilesDir, nil),
			}

			if resp, err := task.ProcessStorageChallenge(context.Background(), tt.args.incomingChallengeMessage); (err != nil) != tt.wantErr {
				t.Errorf("SCTask.ProcessStorageChallenge() error = %v, wantErr %v", err, tt.wantErr)
				fmt.Println(resp)
			}
		})
	}
}
