orbs:
  #  go: circleci/go@1.5.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-s3: circleci/aws-s3@3.0.0
version: 2.1

defaults: &defaults
  machine:
    image: ubuntu-2204:current
  environment:
    GO111MODULE: "on"

commands:
  test:
    parameters:
      package:
        type: string
    steps:
      - run:
          name: "<< parameters.package >>: Fetch dependencies"
          working_directory: ~/project/<< parameters.package >>
          command: |
            go get -v ./...
      - run:
          name: "<< parameters.package >>: Run gofmt"
          working_directory: ~/project/<< parameters.package >>
          command: |
            ls
            # diff -u <(echo -n) <(gofmt -d -e .)
      - run:
          name: "<< parameters.package >>: Run go vet"
          working_directory: ~/project/<< parameters.package >>
          command: |
            go vet -v ./...
      - run:
          name: "<< parameters.package >>: Run revive"
          working_directory: ~/project/<< parameters.package >>
          command: |
            revive -config ~/project/.circleci/revive.toml ./...
      - run:
          name: "<< parameters.package >>: Run staticcheck"
          working_directory: ~/project/<< parameters.package >>
          command: |
            staticcheck ./...
      - run:
          name: "<< parameters.package >>: Run go test (+ race detector)"
          working_directory: ~/project/<< parameters.package >>
          command: |
            go test -v -race ./...
  build:
    parameters:
      buildContainerName:
        type: string
      moduleSubDir:
        type: string
      package:
        type: string
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          sourcesContainerName: "sourcesContainer"
          buildContainerName: << parameters.buildContainerName >>
          moduleSubDir: << parameters.moduleSubDir >>
          package: << parameters.package >>
          targets: << parameters.targets >>
          outputDirectory: "build"
      - run:
          name: "<< parameters.moduleSubDir >>: Validate existence of built binaries"
          command: |
            export WORKING_DIR=~/project/build/github.com/pastelnetwork/gonode
            export MACOS_ARTIFACT=$WORKING_DIR/<< parameters.binaryName >>-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=$WORKING_DIR/<< parameters.binaryName >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=$WORKING_DIR/<< parameters.binaryName >>-linux-amd64
            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Check existence of linux/amd64 build"
              test -f $LINUX_ARTIFACT || (echo "$LINUX_ARTIFACT is not found" && exit 1)
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Check existence of darwin-10.14/amd64 build"
              test -f $MACOS_ARTIFACT || (echo "$MACOS_ARTIFACT is not found" && exit 1)
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Check existence of windows/amd64 build"
              test -f $WINDOWS_ARTIFACT || (echo "$WINDOWS_ARTIFACT is not found" && exit 1)
            fi
  xgo-build:
    parameters:
      sourcesContainerName:
        type: string
      buildContainerName:
        type: string
      moduleSubDir:
        type: string
      package:
        type: string
      targets:
        type: string
      outputDirectory:
        type: string
    steps:
      - run:
          name: "<< parameters.moduleSubDir >> << parameters.package >>: xgo build for << parameters.targets >>"
          command: |
            export WORKING_DIR=~/project
            export MACOS_ARTIFACT=$WORKING_DIR/<< parameters.moduleSubDir >>-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=$WORKING_DIR/<< parameters.moduleSubDir >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=$WORKING_DIR/<< parameters.moduleSubDir >>-linux-amd64
            
            cd ~/project/<< parameters.moduleSubDir >>
            ls -lt 
            
            export CIRCLE_TAG=$(git describe --tag)
            export APP_LDFLAGS="-X github.com/pastelnetwork/gonode/common/version.version=$CIRCLE_TAG" 
            
            xgo -go go-1.20.3 --targets=<< parameters.targets >> -ldflags "$APP_LDFLAGS"  ./...

            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Create sha256 checksum of linux/amd64 build"
              sha256sum "$LINUX_ARTIFACT" > "$LINUX_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Create sha256 checksum of darwin-10.14/amd64 build"
              sha256sum  "$MACOS_ARTIFACT" > "$MACOS_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Create sha256 checksum of windows/amd64 build"
              sha256sum "$WINDOWS_ARTIFACT" > "$WINDOWS_ARTIFACT.sha256"
            fi
            
            cd ~/project
  release:
    parameters:
      buildContainerName:
        type: string
      moduleSubDir:
        type: string
      package:
        type: string
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          sourcesContainerName: "sourcesContainer"
          buildContainerName: << parameters.buildContainerName >>
          moduleSubDir: << parameters.moduleSubDir >>
          package: << parameters.package >>
          targets: << parameters.targets >>
          outputDirectory: "build"
      - github-upload-all-os:
          working_directory: "~/project/build/github.com/pastelnetwork/gonode"
          binaryName: << parameters.binaryName >>
          repo: "gonode"
          targets: << parameters.targets >>

  create-sources-container:
    parameters:
      containerName:
        type: string
    steps:
      - run:
          name: "Create named docker container << parameters.containerName >> with project's sources"
          command: |
            docker create -v /source --name << parameters.containerName >> ubuntu:18.04 /bin/true
            docker cp ./. << parameters.containerName >>:/source
  upload-s3:
    parameters:
      working_directory:
        type: string
    steps:
      - run:
          name: Cleanup working dir
          working_directory: << parameters.working_directory >>
          command: |
            rm bridge-darwin-10.14-amd64.sha256
            rm bridge-linux-amd64.sha256
            rm bridge-windows-4.0-amd64.exe.sha256
            rm hermes-linux-amd64.sha256
            rm supernode-linux-amd64.sha256
            rm walletnode-darwin-10.14-amd64.sha256
            rm walletnode-linux-amd64.sha256
            rm walletnode-windows-4.0-amd64.exe.sha256
            mv walletnode-windows-4.0-amd64.exe walletnode-win-amd64.exe
            mv walletnode-darwin-10.14-amd64 walletnode-darwin-amd64
            mv bridge-windows-4.0-amd64.exe bridge-win-amd64.exe
            mv bridge-darwin-10.14-amd64 bridge-darwin-amd64
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-s3/sync:
          from: << parameters.working_directory >>
          to: s3://$ROOT_BUCKET_NAME/gonode
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths /beta/gonode/\*

  github-upload-all-os:
    parameters:
      working_directory:
        type: string
      binaryName:
        type: string
      repo:
        type: string
      targets:
        type: string
    steps:
      - run:
          name: Upload << parameters.targets >> to << parameters.repo >> GitHub repo
          working_directory: << parameters.working_directory >>
          command: |
            export MACOS_ARTIFACT=<< parameters.binaryName >>-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=<< parameters.binaryName >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=<< parameters.binaryName >>-linux-amd64
            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Check existence of linux/amd64 build and upload to GitHub"
              test -f $LINUX_ARTIFACT
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-linux-amd64 --file << parameters.binaryName >>-linux-amd64
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-linux-amd64.sha256 --file << parameters.binaryName >>-linux-amd64.sha256
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Check existence of darwin-10.14/amd64 build and upload to GitHub"
              test -f $MACOS_ARTIFACT
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-darwin-amd64 --file << parameters.binaryName >>-darwin-10.14-amd64
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-darwin-amd64.sha256 --file << parameters.binaryName >>-darwin-10.14-amd64.sha256
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Check existence of windows/amd64 build and upload to GitHub"
              test -f $WINDOWS_ARTIFACT
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-win-amd64.exe --file << parameters.binaryName >>-windows-4.0-amd64.exe
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-win-amd64.sha256 --file << parameters.binaryName >>-windows-4.0-amd64.exe.sha256
            fi
  install_tensorflow:
    steps:
      - run:
          name: Install libtensorflow
          command: |
            wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.4.0.tar.gz
            sudo tar -C /usr/local -xzf ./libtensorflow-cpu-linux-x86_64-2.4.0.tar.gz
            sudo /sbin/ldconfig -v
      - run:
          name: Install libwebp
          command: |
            sudo apt-get update
            sudo apt-get install libjpeg-dev libpng-dev libtiff-dev libgif-dev
            wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.0-linux-x86-64.tar.gz
            sudo tar -C /usr/local -xzf ./libwebp-1.2.0-linux-x86-64.tar.gz
            sudo /sbin/ldconfig -v
  install_libsodium:
    steps:
      - run:
          name: Install libsodium
          command: |
            wget --secure-protocol=TLSv1_2 https://download.libsodium.org/libsodium/releases/libsodium-1.0.18.tar.gz
            tar -C . -xzf ./libsodium-1.0.18.tar.gz
            cd libsodium-1.0.18
            ./configure
            make
            make check
            sudo make install
            sudo /sbin/ldconfig -v
  install_golang:
    steps:
      - run:
          name: Install Go
          command: |
            cd ..
            wget https://golang.org/dl/go1.20.3.linux-amd64.tar.gz
            sudo rm -r /usr/local/go
            sudo tar -C /usr/local -xzf go1.20.3.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin:~/go/bin' >> ~/.bashrc
            echo 'export CGO_ENABLED=1' >> ~/.bashrc
            echo "export GOPATH=\"$HOME/go\"" >> ~/.bashrc
            echo 'export GOROOT="/usr/local/go"' >> ~/.bashrc
            source ~/.bashrc
            go version           

jobs:
  prepare_workspace:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Detect not merged code
          command: |
            ./scripts/merge_master.sh
      - install_golang
      - run:
          name: Print the go version
          command: |
            go version
            printenv PATH
      - run:
          name: Install swig
          command: |
            sudo apt-get install -y swig
      - run:
          name: Install revive
          command: |
            go install github.com/mgechev/revive@latest
      - run:
          name: Install staticcheck
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@v0.3.3
      - run:
          name: Install mockery
          command: |
            go install github.com/vektra/mockery/v2@v2.21.4
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@v1.7.0+1.19.5
      - run:
          name: "Go generate"
          working_directory: ~/project/
          command: |
            GO111MODULE=on make gen-mock
      - persist_to_workspace:
          root: .
          paths:
            - .
  integration_tests:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      INTEGRATION_TEST_ENV: "true"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Download Dependencies
          working_directory: ~/project/integration
          command: go mod download -x
      - run:
          name: Run Integration Tests
          working_directory: ~/project/integration
          command: go test -v --timeout=30m
  
  # Run automated tests
  test_common:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - test:
          package: "common"

  test_pastel:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - install_tensorflow
      - test:
          package: "pastel"
  test_p2p:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - test:
          package: "p2p"

  test_pastel-api:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - test:
          package: "tools/pastel-api"

  test_proto:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - test:
          package: "proto"
  test_bridge:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - install_tensorflow
      - test:
          package: "bridge"
  test_walletnode:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - install_tensorflow
      - test:
          package: "walletnode"

  test_supernode:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - install_tensorflow
      - test:
          package: "supernode"
  test_hermes:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - install_tensorflow
      - test:
          package: "hermes"
  # Whenever we create a GitHub release, build binaries for each OS, and upload them into the release
  release:
    <<: *defaults
    steps:
      - checkout
      - install_golang
      - run:
          name: Install github-release
          command: |
            GO111MODULE=off go get github.com/github-release/github-release
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@v1.7.0+1.19.5
      - release:
          buildContainerName: "walletnode"
          moduleSubDir: "walletnode"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "walletnode"
      - release:
          buildContainerName: "bridge"
          moduleSubDir: "bridge"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "bridge"
      - release:
          buildContainerName: "supernode"
          moduleSubDir: "supernode"
          package: ""
          targets: "linux/amd64,"
          binaryName: "supernode"
      - release:
          buildContainerName: "hermes"
          moduleSubDir: "hermes"
          package: ""
          targets: "linux/amd64,"
          binaryName: "hermes"
      - upload-s3:
          working_directory: "~/project/build/github.com/pastelnetwork/gonode"

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - create-sources-container:
          containerName: "sourcesContainer"
      - install_golang
      - install_tensorflow
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@v1.7.0+1.19.5
      - build:
          buildContainerName: "walletnode"
          moduleSubDir: "walletnode"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "walletnode"
      - build:
          buildContainerName: "bridge"
          moduleSubDir: "bridge"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "bridge"
      - build:
          buildContainerName: "supernode"
          moduleSubDir: "supernode"
          package: ""
          targets: "linux/amd64,"
          binaryName: "supernode"
      - build:
          buildContainerName: "hermes"
          moduleSubDir: "hermes"
          package: ""
          targets: "linux/amd64,"
          binaryName: "hermes"
      - store_artifacts:
          path: "build"

workflows:
  build-and-test:
    jobs:
      - prepare_workspace:
          filters:
            tags:
              only: /^v.*/
      - test_common:
          requires:
            - prepare_workspace
      - test_pastel:
          requires:
            - prepare_workspace
      - test_p2p:
          requires:
            - prepare_workspace
      - integration_tests:
          requires:
            - prepare_workspace
      - test_pastel-api:
          requires:
            - prepare_workspace
      - test_proto:
          requires:
            - prepare_workspace
      - test_walletnode:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - test_supernode:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - test_hermes:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - test_bridge:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - prepare_workspace
      - release:
          # Reminder: All jobs in "requires" section to run on git tags should have "filters: tags:" value explicitly set
          requires:
            - test_walletnode
            - test_supernode
            - test_hermes
            - test_bridge
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          context:
            - Release
            - weekly-beta-builds
