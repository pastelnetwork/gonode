orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-s3: circleci/aws-s3@3.0.0
version: 2.1

defaults: &defaults
  machine:
    image: ubuntu-2204:current
  parameters:
    version:
      type: string
      default: "latest"
  environment:
    GO111MODULE: "on"
    GOPATH: "~/go"
 
commands:
  install_go:
    steps:
      - run:
          name: Install Go
          command: |
            cd ..
            wget https://golang.org/dl/go1.22.0.linux-amd64.tar.gz
            sudo rm -r /usr/local/go
            sudo tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin:~/go/bin' >> ~/.bashrc
            echo 'export CGO_ENABLED=1' >> ~/.bashrc
            echo "export GOPATH=\"$HOME/go\"" >> ~/.bashrc
            echo 'export GOROOT="/usr/local/go"' >> ~/.bashrc
            source ~/.bashrc
            go version
  setup:
    steps:
      - run:
          name: "Set GO ENV"
          working_directory: ~/
          command: |
            mkdir -p ~/go/src/github.com/pastelnetwork
            mv ~/project ~/go/src/github.com/pastelnetwork/gonode
  test:
    parameters:
      path:
        type: string
      package:
        type: string
    steps:
      - run:
          name: "<< parameters.package >>: Fetch dependencies"
          working_directory: ~/<< parameters.path >>/<< parameters.package >>
          command: |
            go get -v ./...
      - run:
          name: "<< parameters.package >>: Run gofmt"
          working_directory: ~/<< parameters.path >>/<< parameters.package >>
          command: |
            ls
           # diff -u <(echo -n) <(gofmt -d -e .)
     # - run:
      #    name: "<< parameters.package >>: Run go vet"
       #   working_directory: ~/<< parameters.path >>/<< parameters.package >>
        #  command: |
         #   go vet -v ./...
      #- run:
       #   name: "<< parameters.package >>: Run revive"
        #  working_directory: ~/<< parameters.path >>/<< parameters.package >>
         # command: |
          #  revive -config ~/<< parameters.path >>/.circleci/revive.toml ./...
      - run:
          name: "<< parameters.package >>: Run staticcheck"
          working_directory: ~/<< parameters.path >>/<< parameters.package >>
          command: |
            ls
          # staticcheck ./...
      - run:
          name: "<< parameters.package >>: Run go test (+ race detector)"
          working_directory: ~/<< parameters.path >>/<< parameters.package >>
          command: |
            go test -v -race ./...
  build:
    parameters:
      package:
        type: string
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          package: << parameters.package >>
          targets: << parameters.targets >>
      - run:
          name: "<< parameters.package >>: Validate existence of built binaries"
          command: |
            export WORKING_DIR=~/go/src/github.com/pastelnetwork/gonode/build
            export MACOS_ARTIFACT=$WORKING_DIR/<< parameters.binaryName >>-darwin-10.15-amd64
            export WINDOWS_ARTIFACT=$WORKING_DIR/<< parameters.binaryName >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=$WORKING_DIR/<< parameters.binaryName >>-linux-amd64

            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Check existence of linux/amd64 build"
              test -f $LINUX_ARTIFACT || (echo "$LINUX_ARTIFACT is not found" && exit 1)
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.15/amd64,"* ]]; then
              echo "Check existence of darwin-10.15/amd64 build"
              test -f $MACOS_ARTIFACT || (echo "$MACOS_ARTIFACT is not found" && exit 1)
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Check existence of windows/amd64 build"
              test -f $WINDOWS_ARTIFACT || (echo "$WINDOWS_ARTIFACT is not found" && exit 1)
            fi
  xgo-build:
    parameters:
      package:
        type: string
      targets:
        type: string
    steps:
      - run:
          name: "<< parameters.package >>: xgo build for << parameters.targets >>"
          command: |
            export WORKING_DIR=~/go/src/github.com/pastelnetwork/gonode/build
            export MACOS_ARTIFACT=$WORKING_DIR/<< parameters.package >>-darwin-10.15-amd64
            export WINDOWS_ARTIFACT=$WORKING_DIR/<< parameters.package >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=$WORKING_DIR/<< parameters.package >>-linux-amd64
            
            cd ~/go/src/github.com/pastelnetwork/gonode
            export APP_VERSION=$(git describe --tag)

            if [ -z "$APP_VERSION" ]; then
              APP_VERSION="latest"
            fi

            export APP_LDFLAGS="-extldflags "-static" -X github.com/pastelnetwork/gonode/common/version.version=$APP_VERSION" 
            echo "APP_VERSION=$APP_VERSION"
            echo "APP_LDFLAGS=$APP_LDFLAGS"

            if [[ "<< parameters.targets >>" == *"linux/amd64"* ]]; then
              echo "Building << parameters.package >> for Linux"
              sudo apt-get update
              sudo apt-get install -y libwebp-dev
              cd << parameters.package >>
              GOOS=linux GOARCH=amd64 go build -o $LINUX_ARTIFACT -ldflags "$APP_LDFLAGS"
              echo "Done Building << parameters.package >> for Linux"
              cd ..
            fi

            for TARGET in $(echo "<< parameters.targets >>" | tr ',' '\n'); do
                if [[ "$TARGET" == "linux/amd64" ]]; then
                  echo "Skipping xgo build for << parameters.package >> on Linux/amd64"
                  continue  # Skip the rest of this loop iteration
                fi

                echo "Building for target: $TARGET using xgo"
                xgo -go go-1.21.7 --targets="$TARGET" --hooksdir=xgo -ldflags "$APP_LDFLAGS" github.com/pastelnetwork/gonode/<< parameters.package >>
            done

            mkdir -p build
            if [[ "<< parameters.targets >>" == *"darwin-10.15/amd64"* ]]; then
              mv << parameters.package >>-darwin-10.15-amd64 build/
            fi

            if [[ "<< parameters.targets >>" == *"windows/amd64"* ]]; then
              mv << parameters.package >>-windows-4.0-amd64.exe build/
            fi

            cd build
            ls -a

            if [[ "<< parameters.targets >>" == *"linux/amd64"* ]]; then
              echo "Create sha256 checksum of linux/amd64 build"
              sha256sum "$LINUX_ARTIFACT" > "$LINUX_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.15/amd64"* ]]; then
              echo "Create sha256 checksum of darwin-10.15/amd64 build"
              sha256sum  "$MACOS_ARTIFACT" > "$MACOS_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64"* ]]; then
              echo "Create sha256 checksum of windows/amd64 build"
              sha256sum "$WINDOWS_ARTIFACT" > "$WINDOWS_ARTIFACT.sha256"
            fi
            ls -R ./*
  release:
    parameters:
      package:
        type: string
      targets:
        type: string
    steps:
      - xgo-build:
          package: << parameters.package >>
          targets: << parameters.targets >>
  upload-s3:
    parameters:
      working_directory:
        type: string
    steps:
      - run:
          name: Cleanup working dir
          working_directory: << parameters.working_directory >>
          command: |
            rm hermes-linux-amd64.sha256
            rm supernode-linux-amd64.sha256
            rm walletnode-darwin-10.15-amd64.sha256
            rm walletnode-linux-amd64.sha256
            rm walletnode-windows-4.0-amd64.exe.sha256
            mv walletnode-windows-4.0-amd64.exe walletnode-win-amd64.exe
            mv walletnode-darwin-10.15-amd64 walletnode-darwin-amd64
            ls -a
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-s3/sync:
          from: << parameters.working_directory >>
          to: s3://$ROOT_BUCKET_NAME/gonode
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths /$ROOT_BUCKET_NAME/\* 
     
  github-upload-all-os:
    parameters:
      working_directory:
        type: string
      repo:
        type: string
    steps:
      - run:
          name: Upload << parameters.working_directory >> to << parameters.repo >> GitHub repo
          working_directory: << parameters.working_directory >>
          command: |
            ls -a
            export WN_MACOS_ARTIFACT=walletnode-darwin-10.15-amd64
            export WN_WINDOWS_ARTIFACT=walletnode-windows-4.0-amd64.exe
            export WN_LINUX_ARTIFACT=walletnode-linux-amd64
            export HERMES_LINUX_ARTIFACT=hermes-linux-amd64
            export SN_LINUX_ARTIFACT=supernode-linux-amd64

           
            echo "Check existence of walletnode linux/amd64 build and upload to GitHub"
            test -f $WN_LINUX_ARTIFACT
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name walletnode-linux-amd64 --file walletnode-linux-amd64
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name walletnode-linux-amd64.sha256 --file walletnode-linux-amd64.sha256
        
            echo "Check existence of  walletnode darwin-10.15/amd64 build and upload to GitHub"
            test -f $WN_MACOS_ARTIFACT
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name walletnode-darwin-amd64 --file walletnode-darwin-10.15-amd64
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name walletnode-darwin-amd64.sha256 --file walletnode-darwin-10.15-amd64.sha256
    
            echo "Check existence of walletnode windows/amd64 build and upload to GitHub"
            test -f $WN_WINDOWS_ARTIFACT
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name walletnode-win-amd64.exe --file walletnode-windows-4.0-amd64.exe
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name walletnode-win-amd64.sha256 --file walletnode-windows-4.0-amd64.exe.sha256
            
            test -f $SN_LINUX_ARTIFACT
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name supernode-linux-amd64 --file supernode-linux-amd64
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name supernode-linux-amd64.sha256 --file supernode-linux-amd64.sha256

            test -f $HERMES_LINUX_ARTIFACT
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name hermes-linux-amd64 --file hermes-linux-amd64
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name hermes-linux-amd64.sha256 --file hermes-linux-amd64.sha256

  install_tensorflow:
    steps:
      - run:
          name: Install libtensorflow
          command: |
            wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.4.0.tar.gz
            sudo tar -C /usr/local -xzf ./libtensorflow-cpu-linux-x86_64-2.4.0.tar.gz
            sudo /sbin/ldconfig -v
      - run:
          name: Install libwebp
          command: |
            sudo apt-get update
            sudo apt-get install libjpeg-dev libpng-dev libtiff-dev libgif-dev libwebp-dev
  install_libsodium:
    steps:
      - run:
          name: Install libsodium
          command: |
            wget --secure-protocol=TLSv1_2 https://download.libsodium.org/libsodium/releases/libsodium-1.0.18.tar.gz
            tar -C . -xzf ./libsodium-1.0.18.tar.gz
            cd libsodium-1.0.18
            ./configure
            make
            make check
            sudo make install
            sudo /sbin/ldconfig -v

jobs:
  prepare_workspace:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Detect not merged code
          command: |
            ./scripts/merge_master.sh
      - install_go
      - setup
      - run:
          name: Print the go version
          command: |
            go version
            printenv PATH
      - run:
          name: Install swig
          command: |
            sudo apt-get install -y swig
      - run:
          name: Install revive
          command: |
            go install github.com/mgechev/revive@latest
      - run:
          name: Install staticcheck
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@2023.1.5
      - run:
          name: Install mockery
          command: |
            go install github.com/vektra/mockery/v2@v2.42.0
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@latest
      - run:
          name: "Go generate"
          working_directory: ~/go/src/github.com/pastelnetwork/gonode
          command: |
            GO111MODULE=on make gen-mock
      - persist_to_workspace:
          root: ~/go
          paths:
            - .  

  test_common:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - install_tensorflow
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "common"
          path: "go/src/github.com/pastelnetwork/gonode"

  test_pastel:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - install_tensorflow
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "pastel"
          path: "go/src/github.com/pastelnetwork/gonode"
  test_p2p:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "p2p"
          path: "go/src/github.com/pastelnetwork/gonode"

  test_pastel-api:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "tools/pastel-api"
          path: "go/src/github.com/pastelnetwork/gonode"

  test_proto:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "proto"
          path: "go/src/github.com/pastelnetwork/gonode"
  test_walletnode:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - install_tensorflow
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "walletnode"
          path: "go/src/github.com/pastelnetwork/gonode"

  test_supernode:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - install_tensorflow
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "supernode"
          path: "go/src/github.com/pastelnetwork/gonode"
  test_hermes:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - install_tensorflow
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - test:
          package: "hermes"
          path: "go/src/github.com/pastelnetwork/gonode"

# Whenever we create a GitHub release, build binaries for each OS, and upload them into the release
  release:
    <<: *defaults
    steps:
      - checkout
      - install_go
      - setup
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - run:
          name: Install github-release
          command: |
            go install github.com/github-release/github-release@latest
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@latest
      - release:
          package: "walletnode"
          targets: "linux/amd64,darwin-10.15/amd64,windows/amd64"
      - release:
          package: "supernode"
          targets: "linux/amd64"
      - release:
          package: "hermes"
          targets: "linux/amd64"
      - github-upload-all-os:
          working_directory: "~/go/src/github.com/pastelnetwork/gonode/build"
          repo: "gonode"
      - upload-s3:
          working_directory: "~/go/src/github.com/pastelnetwork/gonode/build"

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/go
      - install_go
      - install_tensorflow
      - run:
          name: Update PATH and GOPATH
          command: |
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@latest
      - build:
          package: "walletnode"
          targets: "linux/amd64,darwin-10.15/amd64,windows/amd64,"
          binaryName: "walletnode"
      - build:
          package: "supernode"
          targets: "linux/amd64,"
          binaryName: "supernode"
      - build:
          package: "hermes"
          targets: "linux/amd64,"
          binaryName: "hermes"
      - store_artifacts:
          path: "~/go/src/github.com/pastelnetwork/gonode/build"

workflows:
  build-and-test:
    jobs:
      - prepare_workspace:
          filters:
            tags:
              only: /^v.*/
      - test_common:
          requires:
            - prepare_workspace
      - test_pastel:
          requires:
            - prepare_workspace
      - test_p2p:
          requires:
            - prepare_workspace
      - test_pastel-api:
          requires:
            - prepare_workspace
      - test_proto:
          requires:
            - prepare_workspace
      - test_walletnode:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - test_supernode:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - test_hermes:
          requires:
            - prepare_workspace
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - prepare_workspace
      - release:
          # Reminder: All jobs in "requires" section to run on git tags should have "filters: tags:" value explicitly set
          requires:
            - test_walletnode
            - test_supernode
            - test_hermes
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          context:
            - Release
            - weekly-beta-builds
