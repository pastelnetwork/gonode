// Copyright (c) 2021-2021 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: dd-server.proto

package dupedetection

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RarenessScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RarenessScoreRequest) Reset() {
	*x = RarenessScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RarenessScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RarenessScoreRequest) ProtoMessage() {}

func (x *RarenessScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RarenessScoreRequest.ProtoReflect.Descriptor instead.
func (*RarenessScoreRequest) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{0}
}

func (x *RarenessScoreRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ImageRarenessScoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DupeDetectionSystemVersion           string         `protobuf:"bytes,1,opt,name=dupe_detection_system_version,json=dupeDetectionSystemVersion,proto3" json:"dupe_detection_system_version,omitempty"`
	HashOfCandidateImageFile             []byte         `protobuf:"bytes,2,opt,name=hash_of_candidate_image_file,json=hashOfCandidateImageFile,proto3" json:"hash_of_candidate_image_file,omitempty"`
	IsLikelyDupe                         bool           `protobuf:"varint,3,opt,name=is_likely_dupe,json=isLikelyDupe,proto3" json:"is_likely_dupe,omitempty"`
	OverallAverageRarenessScore          float32        `protobuf:"fixed32,4,opt,name=overall_average_rareness_score,json=overallAverageRarenessScore,proto3" json:"overall_average_rareness_score,omitempty"`
	IsRareOnInternet                     bool           `protobuf:"varint,5,opt,name=is_rare_on_internet,json=isRareOnInternet,proto3" json:"is_rare_on_internet,omitempty"`
	MatchesFoundOnFirstPage              uint32         `protobuf:"varint,6,opt,name=matches_found_on_first_page,json=matchesFoundOnFirstPage,proto3" json:"matches_found_on_first_page,omitempty"`
	NumberOfPagesOfResults               uint32         `protobuf:"varint,7,opt,name=number_of_pages_of_results,json=numberOfPagesOfResults,proto3" json:"number_of_pages_of_results,omitempty"`
	UrlOfFirstMatchInPage                string         `protobuf:"bytes,8,opt,name=url_of_first_match_in_page,json=urlOfFirstMatchInPage,proto3" json:"url_of_first_match_in_page,omitempty"`
	OpenNsfwScore                        float32        `protobuf:"fixed32,9,opt,name=open_nsfw_score,json=openNsfwScore,proto3" json:"open_nsfw_score,omitempty"`
	AlternativeNsfwScores                *AltNsfwScores `protobuf:"bytes,10,opt,name=alternative_nsfw_scores,json=alternativeNsfwScores,proto3" json:"alternative_nsfw_scores,omitempty"`
	ImageHashes                          *ImageHashes   `protobuf:"bytes,11,opt,name=image_hashes,json=imageHashes,proto3" json:"image_hashes,omitempty"`
	ImageFingerprintOfCandidateImageFile []float32      `protobuf:"fixed32,12,rep,packed,name=image_fingerprint_of_candidate_image_file,json=imageFingerprintOfCandidateImageFile,proto3" json:"image_fingerprint_of_candidate_image_file,omitempty"`
}

func (x *ImageRarenessScoreReply) Reset() {
	*x = ImageRarenessScoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRarenessScoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRarenessScoreReply) ProtoMessage() {}

func (x *ImageRarenessScoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRarenessScoreReply.ProtoReflect.Descriptor instead.
func (*ImageRarenessScoreReply) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{1}
}

func (x *ImageRarenessScoreReply) GetDupeDetectionSystemVersion() string {
	if x != nil {
		return x.DupeDetectionSystemVersion
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetHashOfCandidateImageFile() []byte {
	if x != nil {
		return x.HashOfCandidateImageFile
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetIsLikelyDupe() bool {
	if x != nil {
		return x.IsLikelyDupe
	}
	return false
}

func (x *ImageRarenessScoreReply) GetOverallAverageRarenessScore() float32 {
	if x != nil {
		return x.OverallAverageRarenessScore
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetIsRareOnInternet() bool {
	if x != nil {
		return x.IsRareOnInternet
	}
	return false
}

func (x *ImageRarenessScoreReply) GetMatchesFoundOnFirstPage() uint32 {
	if x != nil {
		return x.MatchesFoundOnFirstPage
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetNumberOfPagesOfResults() uint32 {
	if x != nil {
		return x.NumberOfPagesOfResults
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetUrlOfFirstMatchInPage() string {
	if x != nil {
		return x.UrlOfFirstMatchInPage
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetOpenNsfwScore() float32 {
	if x != nil {
		return x.OpenNsfwScore
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetAlternativeNsfwScores() *AltNsfwScores {
	if x != nil {
		return x.AlternativeNsfwScores
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetImageHashes() *ImageHashes {
	if x != nil {
		return x.ImageHashes
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetImageFingerprintOfCandidateImageFile() []float32 {
	if x != nil {
		return x.ImageFingerprintOfCandidateImageFile
	}
	return nil
}

type AltNsfwScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawings float32 `protobuf:"fixed32,1,opt,name=drawings,proto3" json:"drawings,omitempty"`
	Hentai   float32 `protobuf:"fixed32,2,opt,name=hentai,proto3" json:"hentai,omitempty"`
	Neutral  float32 `protobuf:"fixed32,3,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Porn     float32 `protobuf:"fixed32,4,opt,name=porn,proto3" json:"porn,omitempty"`
	Sexy     float32 `protobuf:"fixed32,5,opt,name=sexy,proto3" json:"sexy,omitempty"`
}

func (x *AltNsfwScores) Reset() {
	*x = AltNsfwScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltNsfwScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltNsfwScores) ProtoMessage() {}

func (x *AltNsfwScores) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltNsfwScores.ProtoReflect.Descriptor instead.
func (*AltNsfwScores) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{2}
}

func (x *AltNsfwScores) GetDrawings() float32 {
	if x != nil {
		return x.Drawings
	}
	return 0
}

func (x *AltNsfwScores) GetHentai() float32 {
	if x != nil {
		return x.Hentai
	}
	return 0
}

func (x *AltNsfwScores) GetNeutral() float32 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *AltNsfwScores) GetPorn() float32 {
	if x != nil {
		return x.Porn
	}
	return 0
}

func (x *AltNsfwScores) GetSexy() float32 {
	if x != nil {
		return x.Sexy
	}
	return 0
}

type ImageHashes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdqHash        string `protobuf:"bytes,1,opt,name=pdq_hash,json=pdqHash,proto3" json:"pdq_hash,omitempty"`
	PerceptualHash string `protobuf:"bytes,2,opt,name=perceptual_hash,json=perceptualHash,proto3" json:"perceptual_hash,omitempty"`
	AverageHash    string `protobuf:"bytes,3,opt,name=average_hash,json=averageHash,proto3" json:"average_hash,omitempty"`
	DifferenceHash string `protobuf:"bytes,4,opt,name=difference_hash,json=differenceHash,proto3" json:"difference_hash,omitempty"`
	NeuralhashHash string `protobuf:"bytes,5,opt,name=neuralhash_hash,json=neuralhashHash,proto3" json:"neuralhash_hash,omitempty"`
}

func (x *ImageHashes) Reset() {
	*x = ImageHashes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageHashes) ProtoMessage() {}

func (x *ImageHashes) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageHashes.ProtoReflect.Descriptor instead.
func (*ImageHashes) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{3}
}

func (x *ImageHashes) GetPdqHash() string {
	if x != nil {
		return x.PdqHash
	}
	return ""
}

func (x *ImageHashes) GetPerceptualHash() string {
	if x != nil {
		return x.PerceptualHash
	}
	return ""
}

func (x *ImageHashes) GetAverageHash() string {
	if x != nil {
		return x.AverageHash
	}
	return ""
}

func (x *ImageHashes) GetDifferenceHash() string {
	if x != nil {
		return x.DifferenceHash
	}
	return ""
}

func (x *ImageHashes) GetNeuralhashHash() string {
	if x != nil {
		return x.NeuralhashHash
	}
	return ""
}

var File_dd_server_proto protoreflect.FileDescriptor

var file_dd_server_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2a, 0x0a, 0x14, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x81, 0x06, 0x0a,
	0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x75, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x64, 0x75, 0x70, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x18, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x44, 0x75, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x72,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x50, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x1a, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x72, 0x6c, 0x4f, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x15, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x73,
	0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x24, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x85, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x68, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x73, 0x65, 0x78, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x71, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x71, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x75, 0x72,
	0x61, 0x6c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x68, 0x61, 0x73, 0x68, 0x48, 0x61, 0x73,
	0x68, 0x32, 0x78, 0x0a, 0x13, 0x44, 0x75, 0x70, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23,
	0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64,
	0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dd_server_proto_rawDescOnce sync.Once
	file_dd_server_proto_rawDescData = file_dd_server_proto_rawDesc
)

func file_dd_server_proto_rawDescGZIP() []byte {
	file_dd_server_proto_rawDescOnce.Do(func() {
		file_dd_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_dd_server_proto_rawDescData)
	})
	return file_dd_server_proto_rawDescData
}

var file_dd_server_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dd_server_proto_goTypes = []interface{}{
	(*RarenessScoreRequest)(nil),    // 0: dupedetection.RarenessScoreRequest
	(*ImageRarenessScoreReply)(nil), // 1: dupedetection.ImageRarenessScoreReply
	(*AltNsfwScores)(nil),           // 2: dupedetection.AltNsfwScores
	(*ImageHashes)(nil),             // 3: dupedetection.ImageHashes
}
var file_dd_server_proto_depIdxs = []int32{
	2, // 0: dupedetection.ImageRarenessScoreReply.alternative_nsfw_scores:type_name -> dupedetection.AltNsfwScores
	3, // 1: dupedetection.ImageRarenessScoreReply.image_hashes:type_name -> dupedetection.ImageHashes
	0, // 2: dupedetection.DupeDetectionServer.ImageRarenessScore:input_type -> dupedetection.RarenessScoreRequest
	1, // 3: dupedetection.DupeDetectionServer.ImageRarenessScore:output_type -> dupedetection.ImageRarenessScoreReply
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dd_server_proto_init() }
func file_dd_server_proto_init() {
	if File_dd_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dd_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RarenessScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRarenessScoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltNsfwScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageHashes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dd_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dd_server_proto_goTypes,
		DependencyIndexes: file_dd_server_proto_depIdxs,
		MessageInfos:      file_dd_server_proto_msgTypes,
	}.Build()
	File_dd_server_proto = out.File
	file_dd_server_proto_rawDesc = nil
	file_dd_server_proto_goTypes = nil
	file_dd_server_proto_depIdxs = nil
}
