// Copyright (c) 2021-2021 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: dd-server.proto

package dupedetection

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RarenessScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	BlockHash              string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight            string `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp              string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PastelId               string `protobuf:"bytes,5,opt,name=pastel_id,json=pastelId,proto3" json:"pastel_id,omitempty"`
	RegisteringSn1         string `protobuf:"bytes,6,opt,name=registering_sn1,json=registeringSn1,proto3" json:"registering_sn1,omitempty"`
	RegisteringSn2         string `protobuf:"bytes,7,opt,name=registering_sn2,json=registeringSn2,proto3" json:"registering_sn2,omitempty"`
	RegisteringSn3         string `protobuf:"bytes,8,opt,name=registering_sn3,json=registeringSn3,proto3" json:"registering_sn3,omitempty"`
	IsPastelOpenapiRequest bool   `protobuf:"varint,9,opt,name=is_pastel_openapi_request,json=isPastelOpenapiRequest,proto3" json:"is_pastel_openapi_request,omitempty"`
	OpenApiSubsetIdString  string `protobuf:"bytes,10,opt,name=open_api_subset_id_string,json=openApiSubsetIdString,proto3" json:"open_api_subset_id_string,omitempty"`
}

func (x *RarenessScoreRequest) Reset() {
	*x = RarenessScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RarenessScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RarenessScoreRequest) ProtoMessage() {}

func (x *RarenessScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RarenessScoreRequest.ProtoReflect.Descriptor instead.
func (*RarenessScoreRequest) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{0}
}

func (x *RarenessScoreRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RarenessScoreRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *RarenessScoreRequest) GetBlockHeight() string {
	if x != nil {
		return x.BlockHeight
	}
	return ""
}

func (x *RarenessScoreRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelId() string {
	if x != nil {
		return x.PastelId
	}
	return ""
}

func (x *RarenessScoreRequest) GetRegisteringSn1() string {
	if x != nil {
		return x.RegisteringSn1
	}
	return ""
}

func (x *RarenessScoreRequest) GetRegisteringSn2() string {
	if x != nil {
		return x.RegisteringSn2
	}
	return ""
}

func (x *RarenessScoreRequest) GetRegisteringSn3() string {
	if x != nil {
		return x.RegisteringSn3
	}
	return ""
}

func (x *RarenessScoreRequest) GetIsPastelOpenapiRequest() bool {
	if x != nil {
		return x.IsPastelOpenapiRequest
	}
	return false
}

func (x *RarenessScoreRequest) GetOpenApiSubsetIdString() string {
	if x != nil {
		return x.OpenApiSubsetIdString
	}
	return ""
}

type ImageRarenessScoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block                                string                 `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Principal                            string                 `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	DupeDetectionSystemVersion           string                 `protobuf:"bytes,3,opt,name=dupe_detection_system_version,json=dupeDetectionSystemVersion,proto3" json:"dupe_detection_system_version,omitempty"`
	IsLikelyDupe                         bool                   `protobuf:"varint,4,opt,name=is_likely_dupe,json=isLikelyDupe,proto3" json:"is_likely_dupe,omitempty"`
	IsRareOnInternet                     bool                   `protobuf:"varint,5,opt,name=is_rare_on_internet,json=isRareOnInternet,proto3" json:"is_rare_on_internet,omitempty"`
	RarenessScores                       *RarenessScores        `protobuf:"bytes,6,opt,name=rareness_scores,json=rarenessScores,proto3" json:"rareness_scores,omitempty"`
	InternetRareness                     *InternetRareness      `protobuf:"bytes,7,opt,name=internet_rareness,json=internetRareness,proto3" json:"internet_rareness,omitempty"`
	OpenNsfwScore                        float32                `protobuf:"fixed32,8,opt,name=open_nsfw_score,json=openNsfwScore,proto3" json:"open_nsfw_score,omitempty"`
	AlternativeNsfwScores                *AltNsfwScores         `protobuf:"bytes,9,opt,name=alternative_nsfw_scores,json=alternativeNsfwScores,proto3" json:"alternative_nsfw_scores,omitempty"`
	ImageFingerprintOfCandidateImageFile []float32              `protobuf:"fixed32,10,rep,packed,name=image_fingerprint_of_candidate_image_file,json=imageFingerprintOfCandidateImageFile,proto3" json:"image_fingerprint_of_candidate_image_file,omitempty"`
	FingerprintsStat                     *FingerprintsStat      `protobuf:"bytes,11,opt,name=fingerprints_stat,json=fingerprintsStat,proto3" json:"fingerprints_stat,omitempty"`
	HashOfCandidateImageFile             string                 `protobuf:"bytes,12,opt,name=hash_of_candidate_image_file,json=hashOfCandidateImageFile,proto3" json:"hash_of_candidate_image_file,omitempty"`
	PerceptualImageHashes                *PerceptualImageHashes `protobuf:"bytes,13,opt,name=perceptual_image_hashes,json=perceptualImageHashes,proto3" json:"perceptual_image_hashes,omitempty"`
	PerceptualHashOverlapCount           uint32                 `protobuf:"varint,14,opt,name=perceptual_hash_overlap_count,json=perceptualHashOverlapCount,proto3" json:"perceptual_hash_overlap_count,omitempty"`
	Maxes                                *Maxes                 `protobuf:"bytes,15,opt,name=maxes,proto3" json:"maxes,omitempty"`
	Percentile                           *Percentile            `protobuf:"bytes,16,opt,name=percentile,proto3" json:"percentile,omitempty"`
}

func (x *ImageRarenessScoreReply) Reset() {
	*x = ImageRarenessScoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRarenessScoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRarenessScoreReply) ProtoMessage() {}

func (x *ImageRarenessScoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRarenessScoreReply.ProtoReflect.Descriptor instead.
func (*ImageRarenessScoreReply) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{1}
}

func (x *ImageRarenessScoreReply) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetDupeDetectionSystemVersion() string {
	if x != nil {
		return x.DupeDetectionSystemVersion
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetIsLikelyDupe() bool {
	if x != nil {
		return x.IsLikelyDupe
	}
	return false
}

func (x *ImageRarenessScoreReply) GetIsRareOnInternet() bool {
	if x != nil {
		return x.IsRareOnInternet
	}
	return false
}

func (x *ImageRarenessScoreReply) GetRarenessScores() *RarenessScores {
	if x != nil {
		return x.RarenessScores
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetInternetRareness() *InternetRareness {
	if x != nil {
		return x.InternetRareness
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetOpenNsfwScore() float32 {
	if x != nil {
		return x.OpenNsfwScore
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetAlternativeNsfwScores() *AltNsfwScores {
	if x != nil {
		return x.AlternativeNsfwScores
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetImageFingerprintOfCandidateImageFile() []float32 {
	if x != nil {
		return x.ImageFingerprintOfCandidateImageFile
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetFingerprintsStat() *FingerprintsStat {
	if x != nil {
		return x.FingerprintsStat
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetHashOfCandidateImageFile() string {
	if x != nil {
		return x.HashOfCandidateImageFile
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPerceptualImageHashes() *PerceptualImageHashes {
	if x != nil {
		return x.PerceptualImageHashes
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetPerceptualHashOverlapCount() uint32 {
	if x != nil {
		return x.PerceptualHashOverlapCount
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetMaxes() *Maxes {
	if x != nil {
		return x.Maxes
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetPercentile() *Percentile {
	if x != nil {
		return x.Percentile
	}
	return nil
}

type RarenessScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombinedRarenessScore         float32 `protobuf:"fixed32,1,opt,name=combined_rareness_score,json=combinedRarenessScore,proto3" json:"combined_rareness_score,omitempty"`
	XgboostPredictedRarenessScore float32 `protobuf:"fixed32,2,opt,name=xgboost_predicted_rareness_score,json=xgboostPredictedRarenessScore,proto3" json:"xgboost_predicted_rareness_score,omitempty"`
	NnPredictedRarenessScore      float32 `protobuf:"fixed32,3,opt,name=nn_predicted_rareness_score,json=nnPredictedRarenessScore,proto3" json:"nn_predicted_rareness_score,omitempty"`
	OverallAverageRarenessScore   float32 `protobuf:"fixed32,4,opt,name=overall_average_rareness_score,json=overallAverageRarenessScore,proto3" json:"overall_average_rareness_score,omitempty"`
}

func (x *RarenessScores) Reset() {
	*x = RarenessScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RarenessScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RarenessScores) ProtoMessage() {}

func (x *RarenessScores) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RarenessScores.ProtoReflect.Descriptor instead.
func (*RarenessScores) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{2}
}

func (x *RarenessScores) GetCombinedRarenessScore() float32 {
	if x != nil {
		return x.CombinedRarenessScore
	}
	return 0
}

func (x *RarenessScores) GetXgboostPredictedRarenessScore() float32 {
	if x != nil {
		return x.XgboostPredictedRarenessScore
	}
	return 0
}

func (x *RarenessScores) GetNnPredictedRarenessScore() float32 {
	if x != nil {
		return x.NnPredictedRarenessScore
	}
	return 0
}

func (x *RarenessScores) GetOverallAverageRarenessScore() float32 {
	if x != nil {
		return x.OverallAverageRarenessScore
	}
	return 0
}

type InternetRareness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchesFoundOnFirstPage uint32 `protobuf:"varint,1,opt,name=matches_found_on_first_page,json=matchesFoundOnFirstPage,proto3" json:"matches_found_on_first_page,omitempty"`
	NumberOfPagesOfResults  uint32 `protobuf:"varint,2,opt,name=number_of_pages_of_results,json=numberOfPagesOfResults,proto3" json:"number_of_pages_of_results,omitempty"`
	UrlOfFirstMatchInPage   string `protobuf:"bytes,3,opt,name=url_of_first_match_in_page,json=urlOfFirstMatchInPage,proto3" json:"url_of_first_match_in_page,omitempty"`
}

func (x *InternetRareness) Reset() {
	*x = InternetRareness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternetRareness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternetRareness) ProtoMessage() {}

func (x *InternetRareness) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternetRareness.ProtoReflect.Descriptor instead.
func (*InternetRareness) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{3}
}

func (x *InternetRareness) GetMatchesFoundOnFirstPage() uint32 {
	if x != nil {
		return x.MatchesFoundOnFirstPage
	}
	return 0
}

func (x *InternetRareness) GetNumberOfPagesOfResults() uint32 {
	if x != nil {
		return x.NumberOfPagesOfResults
	}
	return 0
}

func (x *InternetRareness) GetUrlOfFirstMatchInPage() string {
	if x != nil {
		return x.UrlOfFirstMatchInPage
	}
	return ""
}

type AltNsfwScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawings float32 `protobuf:"fixed32,1,opt,name=drawings,proto3" json:"drawings,omitempty"`
	Hentai   float32 `protobuf:"fixed32,2,opt,name=hentai,proto3" json:"hentai,omitempty"`
	Neutral  float32 `protobuf:"fixed32,3,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Porn     float32 `protobuf:"fixed32,4,opt,name=porn,proto3" json:"porn,omitempty"`
	Sexy     float32 `protobuf:"fixed32,5,opt,name=sexy,proto3" json:"sexy,omitempty"`
}

func (x *AltNsfwScores) Reset() {
	*x = AltNsfwScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltNsfwScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltNsfwScores) ProtoMessage() {}

func (x *AltNsfwScores) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltNsfwScores.ProtoReflect.Descriptor instead.
func (*AltNsfwScores) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{4}
}

func (x *AltNsfwScores) GetDrawings() float32 {
	if x != nil {
		return x.Drawings
	}
	return 0
}

func (x *AltNsfwScores) GetHentai() float32 {
	if x != nil {
		return x.Hentai
	}
	return 0
}

func (x *AltNsfwScores) GetNeutral() float32 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *AltNsfwScores) GetPorn() float32 {
	if x != nil {
		return x.Porn
	}
	return 0
}

func (x *AltNsfwScores) GetSexy() float32 {
	if x != nil {
		return x.Sexy
	}
	return 0
}

type PerceptualImageHashes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdqHash        string `protobuf:"bytes,1,opt,name=pdq_hash,json=pdqHash,proto3" json:"pdq_hash,omitempty"`
	PerceptualHash string `protobuf:"bytes,2,opt,name=perceptual_hash,json=perceptualHash,proto3" json:"perceptual_hash,omitempty"`
	AverageHash    string `protobuf:"bytes,3,opt,name=average_hash,json=averageHash,proto3" json:"average_hash,omitempty"`
	DifferenceHash string `protobuf:"bytes,4,opt,name=difference_hash,json=differenceHash,proto3" json:"difference_hash,omitempty"`
	NeuralhashHash string `protobuf:"bytes,5,opt,name=neuralhash_hash,json=neuralhashHash,proto3" json:"neuralhash_hash,omitempty"`
}

func (x *PerceptualImageHashes) Reset() {
	*x = PerceptualImageHashes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerceptualImageHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerceptualImageHashes) ProtoMessage() {}

func (x *PerceptualImageHashes) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerceptualImageHashes.ProtoReflect.Descriptor instead.
func (*PerceptualImageHashes) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{5}
}

func (x *PerceptualImageHashes) GetPdqHash() string {
	if x != nil {
		return x.PdqHash
	}
	return ""
}

func (x *PerceptualImageHashes) GetPerceptualHash() string {
	if x != nil {
		return x.PerceptualHash
	}
	return ""
}

func (x *PerceptualImageHashes) GetAverageHash() string {
	if x != nil {
		return x.AverageHash
	}
	return ""
}

func (x *PerceptualImageHashes) GetDifferenceHash() string {
	if x != nil {
		return x.DifferenceHash
	}
	return ""
}

func (x *PerceptualImageHashes) GetNeuralhashHash() string {
	if x != nil {
		return x.NeuralhashHash
	}
	return ""
}

type FingerprintsStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfFingerprintsRequiringFurtherTesting_1 uint32 `protobuf:"varint,1,opt,name=number_of_fingerprints_requiring_further_testing_1,json=numberOfFingerprintsRequiringFurtherTesting1,proto3" json:"number_of_fingerprints_requiring_further_testing_1,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_2 uint32 `protobuf:"varint,2,opt,name=number_of_fingerprints_requiring_further_testing_2,json=numberOfFingerprintsRequiringFurtherTesting2,proto3" json:"number_of_fingerprints_requiring_further_testing_2,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_3 uint32 `protobuf:"varint,3,opt,name=number_of_fingerprints_requiring_further_testing_3,json=numberOfFingerprintsRequiringFurtherTesting3,proto3" json:"number_of_fingerprints_requiring_further_testing_3,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_4 uint32 `protobuf:"varint,4,opt,name=number_of_fingerprints_requiring_further_testing_4,json=numberOfFingerprintsRequiringFurtherTesting4,proto3" json:"number_of_fingerprints_requiring_further_testing_4,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_5 uint32 `protobuf:"varint,5,opt,name=number_of_fingerprints_requiring_further_testing_5,json=numberOfFingerprintsRequiringFurtherTesting5,proto3" json:"number_of_fingerprints_requiring_further_testing_5,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_6 uint32 `protobuf:"varint,6,opt,name=number_of_fingerprints_requiring_further_testing_6,json=numberOfFingerprintsRequiringFurtherTesting6,proto3" json:"number_of_fingerprints_requiring_further_testing_6,omitempty"`
	NumberOfFingerprintsOfSuspectedDupes          uint32 `protobuf:"varint,7,opt,name=number_of_fingerprints_of_suspected_dupes,json=numberOfFingerprintsOfSuspectedDupes,proto3" json:"number_of_fingerprints_of_suspected_dupes,omitempty"`
}

func (x *FingerprintsStat) Reset() {
	*x = FingerprintsStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FingerprintsStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintsStat) ProtoMessage() {}

func (x *FingerprintsStat) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintsStat.ProtoReflect.Descriptor instead.
func (*FingerprintsStat) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{6}
}

func (x *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_1() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsRequiringFurtherTesting_1
	}
	return 0
}

func (x *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_2() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsRequiringFurtherTesting_2
	}
	return 0
}

func (x *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_3() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsRequiringFurtherTesting_3
	}
	return 0
}

func (x *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_4() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsRequiringFurtherTesting_4
	}
	return 0
}

func (x *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_5() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsRequiringFurtherTesting_5
	}
	return 0
}

func (x *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_6() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsRequiringFurtherTesting_6
	}
	return 0
}

func (x *FingerprintsStat) GetNumberOfFingerprintsOfSuspectedDupes() uint32 {
	if x != nil {
		return x.NumberOfFingerprintsOfSuspectedDupes
	}
	return 0
}

type Maxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PearsonMax           float32 `protobuf:"fixed32,1,opt,name=pearson_max,json=pearsonMax,proto3" json:"pearson_max,omitempty"`
	SpearmanMax          float32 `protobuf:"fixed32,2,opt,name=spearman_max,json=spearmanMax,proto3" json:"spearman_max,omitempty"`
	KendallMax           float32 `protobuf:"fixed32,3,opt,name=kendall_max,json=kendallMax,proto3" json:"kendall_max,omitempty"`
	HoeffdingMax         float32 `protobuf:"fixed32,4,opt,name=hoeffding_max,json=hoeffdingMax,proto3" json:"hoeffding_max,omitempty"`
	MutualInformationMax float32 `protobuf:"fixed32,5,opt,name=mutual_information_max,json=mutualInformationMax,proto3" json:"mutual_information_max,omitempty"`
	HsicMax              float32 `protobuf:"fixed32,6,opt,name=hsic_max,json=hsicMax,proto3" json:"hsic_max,omitempty"`
	XgbimportanceMax     float32 `protobuf:"fixed32,7,opt,name=xgbimportance_max,json=xgbimportanceMax,proto3" json:"xgbimportance_max,omitempty"`
}

func (x *Maxes) Reset() {
	*x = Maxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maxes) ProtoMessage() {}

func (x *Maxes) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maxes.ProtoReflect.Descriptor instead.
func (*Maxes) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{7}
}

func (x *Maxes) GetPearsonMax() float32 {
	if x != nil {
		return x.PearsonMax
	}
	return 0
}

func (x *Maxes) GetSpearmanMax() float32 {
	if x != nil {
		return x.SpearmanMax
	}
	return 0
}

func (x *Maxes) GetKendallMax() float32 {
	if x != nil {
		return x.KendallMax
	}
	return 0
}

func (x *Maxes) GetHoeffdingMax() float32 {
	if x != nil {
		return x.HoeffdingMax
	}
	return 0
}

func (x *Maxes) GetMutualInformationMax() float32 {
	if x != nil {
		return x.MutualInformationMax
	}
	return 0
}

func (x *Maxes) GetHsicMax() float32 {
	if x != nil {
		return x.HsicMax
	}
	return 0
}

func (x *Maxes) GetXgbimportanceMax() float32 {
	if x != nil {
		return x.XgbimportanceMax
	}
	return 0
}

type Percentile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PearsonTop_1BpsPercentile             float32 `protobuf:"fixed32,1,opt,name=pearson_top_1_bps_percentile,json=pearsonTop1BpsPercentile,proto3" json:"pearson_top_1_bps_percentile,omitempty"`
	SpearmanTop_1BpsPercentile            float32 `protobuf:"fixed32,2,opt,name=spearman_top_1_bps_percentile,json=spearmanTop1BpsPercentile,proto3" json:"spearman_top_1_bps_percentile,omitempty"`
	KendallTop_1BpsPercentile             float32 `protobuf:"fixed32,3,opt,name=kendall_top_1_bps_percentile,json=kendallTop1BpsPercentile,proto3" json:"kendall_top_1_bps_percentile,omitempty"`
	HoeffdingTop_10BpsPercentile          float32 `protobuf:"fixed32,4,opt,name=hoeffding_top_10_bps_percentile,json=hoeffdingTop10BpsPercentile,proto3" json:"hoeffding_top_10_bps_percentile,omitempty"`
	MutualInformationTop_100BpsPercentile float32 `protobuf:"fixed32,5,opt,name=mutual_information_top_100_bps_percentile,json=mutualInformationTop100BpsPercentile,proto3" json:"mutual_information_top_100_bps_percentile,omitempty"`
	HsicTop_100BpsPercentile              float32 `protobuf:"fixed32,6,opt,name=hsic_top_100_bps_percentile,json=hsicTop100BpsPercentile,proto3" json:"hsic_top_100_bps_percentile,omitempty"`
	XgbimportanceTop_100BpsPercentile     float32 `protobuf:"fixed32,7,opt,name=xgbimportance_top_100_bps_percentile,json=xgbimportanceTop100BpsPercentile,proto3" json:"xgbimportance_top_100_bps_percentile,omitempty"`
}

func (x *Percentile) Reset() {
	*x = Percentile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentile) ProtoMessage() {}

func (x *Percentile) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentile.ProtoReflect.Descriptor instead.
func (*Percentile) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{8}
}

func (x *Percentile) GetPearsonTop_1BpsPercentile() float32 {
	if x != nil {
		return x.PearsonTop_1BpsPercentile
	}
	return 0
}

func (x *Percentile) GetSpearmanTop_1BpsPercentile() float32 {
	if x != nil {
		return x.SpearmanTop_1BpsPercentile
	}
	return 0
}

func (x *Percentile) GetKendallTop_1BpsPercentile() float32 {
	if x != nil {
		return x.KendallTop_1BpsPercentile
	}
	return 0
}

func (x *Percentile) GetHoeffdingTop_10BpsPercentile() float32 {
	if x != nil {
		return x.HoeffdingTop_10BpsPercentile
	}
	return 0
}

func (x *Percentile) GetMutualInformationTop_100BpsPercentile() float32 {
	if x != nil {
		return x.MutualInformationTop_100BpsPercentile
	}
	return 0
}

func (x *Percentile) GetHsicTop_100BpsPercentile() float32 {
	if x != nil {
		return x.HsicTop_100BpsPercentile
	}
	return 0
}

func (x *Percentile) GetXgbimportanceTop_100BpsPercentile() float32 {
	if x != nil {
		return x.XgbimportanceTop_100BpsPercentile
	}
	return 0
}

var File_dd_server_proto protoreflect.FileDescriptor

var file_dd_server_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x97, 0x03, 0x0a, 0x14, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x31, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6e, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x32, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x33, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6e, 0x33, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x74,
	0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x50, 0x61, 0x73, 0x74,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe8, 0x07, 0x0a, 0x17, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x75,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x64, 0x75, 0x70, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x44,
	0x75, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x52, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x75,
	0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x0e, 0x72, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x61,
	0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x54, 0x0a, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6e, 0x73, 0x66, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x15, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x73, 0x66, 0x77,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x24, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x75, 0x70,
	0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x10, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x3e, 0x0a,
	0x1c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5c, 0x0a,
	0x17, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x52, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61,
	0x73, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x6d, 0x61, 0x78, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x78, 0x65, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x47, 0x0a, 0x20, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x78, 0x67, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x6e, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x52, 0x61, 0x72, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1b, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x1a,
	0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x75, 0x72, 0x6c, 0x4f, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x4e,
	0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61,
	0x77, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x72, 0x61,
	0x77, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x65, 0x78, 0x79, 0x22,
	0xd0, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x71,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x71,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x75,
	0x72, 0x61, 0x6c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x68, 0x61, 0x73, 0x68, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xe7, 0x05, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x68, 0x0a, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x72, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x2c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x68, 0x0a, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x72, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x68, 0x0a, 0x32, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x68, 0x0a, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x2c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x34, 0x12,
	0x68, 0x0a, 0x32, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x68, 0x0a, 0x32, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75,
	0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x36, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x36, 0x12, 0x57, 0x0a, 0x29, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x70, 0x65, 0x73, 0x22, 0x8f, 0x02, 0x0a,
	0x05, 0x4d, 0x61, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x61,
	0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x72,
	0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65,
	0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x6b, 0x65, 0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x6f, 0x65, 0x66, 0x66, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x68, 0x6f, 0x65, 0x66, 0x66, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78,
	0x12, 0x34, 0x0a, 0x16, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x73, 0x69, 0x63, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x73, 0x69, 0x63, 0x4d, 0x61,
	0x78, 0x12, 0x2b, 0x0a, 0x11, 0x78, 0x67, 0x62, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x78, 0x67,
	0x62, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x22, 0xfb,
	0x03, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x1c, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x5f, 0x62,
	0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x31,
	0x42, 0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x73, 0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x5f,
	0x62, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x73, 0x70, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x54, 0x6f,
	0x70, 0x31, 0x42, 0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x1c, 0x6b, 0x65, 0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31,
	0x5f, 0x62, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6b, 0x65, 0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x70, 0x31, 0x42, 0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x68, 0x6f, 0x65, 0x66, 0x66, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x31, 0x30, 0x5f, 0x62, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x68, 0x6f, 0x65, 0x66, 0x66, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x42, 0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x29, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x31, 0x30, 0x30, 0x5f, 0x62, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x24, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x31, 0x30,
	0x30, 0x42, 0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x1b, 0x68, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x62,
	0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x68, 0x73, 0x69, 0x63, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x30, 0x42,
	0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x24,
	0x78, 0x67, 0x62, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x70, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x62, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x78, 0x67, 0x62, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x30, 0x42,
	0x70, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x32, 0x78, 0x0a, 0x13,
	0x44, 0x75, 0x70, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x75, 0x70, 0x65,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dd_server_proto_rawDescOnce sync.Once
	file_dd_server_proto_rawDescData = file_dd_server_proto_rawDesc
)

func file_dd_server_proto_rawDescGZIP() []byte {
	file_dd_server_proto_rawDescOnce.Do(func() {
		file_dd_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_dd_server_proto_rawDescData)
	})
	return file_dd_server_proto_rawDescData
}

var file_dd_server_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_dd_server_proto_goTypes = []interface{}{
	(*RarenessScoreRequest)(nil),    // 0: dupedetection.RarenessScoreRequest
	(*ImageRarenessScoreReply)(nil), // 1: dupedetection.ImageRarenessScoreReply
	(*RarenessScores)(nil),          // 2: dupedetection.RarenessScores
	(*InternetRareness)(nil),        // 3: dupedetection.InternetRareness
	(*AltNsfwScores)(nil),           // 4: dupedetection.AltNsfwScores
	(*PerceptualImageHashes)(nil),   // 5: dupedetection.PerceptualImageHashes
	(*FingerprintsStat)(nil),        // 6: dupedetection.FingerprintsStat
	(*Maxes)(nil),                   // 7: dupedetection.Maxes
	(*Percentile)(nil),              // 8: dupedetection.Percentile
}
var file_dd_server_proto_depIdxs = []int32{
	2, // 0: dupedetection.ImageRarenessScoreReply.rareness_scores:type_name -> dupedetection.RarenessScores
	3, // 1: dupedetection.ImageRarenessScoreReply.internet_rareness:type_name -> dupedetection.InternetRareness
	4, // 2: dupedetection.ImageRarenessScoreReply.alternative_nsfw_scores:type_name -> dupedetection.AltNsfwScores
	6, // 3: dupedetection.ImageRarenessScoreReply.fingerprints_stat:type_name -> dupedetection.FingerprintsStat
	5, // 4: dupedetection.ImageRarenessScoreReply.perceptual_image_hashes:type_name -> dupedetection.PerceptualImageHashes
	7, // 5: dupedetection.ImageRarenessScoreReply.maxes:type_name -> dupedetection.Maxes
	8, // 6: dupedetection.ImageRarenessScoreReply.percentile:type_name -> dupedetection.Percentile
	0, // 7: dupedetection.DupeDetectionServer.ImageRarenessScore:input_type -> dupedetection.RarenessScoreRequest
	1, // 8: dupedetection.DupeDetectionServer.ImageRarenessScore:output_type -> dupedetection.ImageRarenessScoreReply
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_dd_server_proto_init() }
func file_dd_server_proto_init() {
	if File_dd_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dd_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RarenessScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRarenessScoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RarenessScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternetRareness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltNsfwScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerceptualImageHashes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FingerprintsStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percentile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dd_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dd_server_proto_goTypes,
		DependencyIndexes: file_dd_server_proto_depIdxs,
		MessageInfos:      file_dd_server_proto_msgTypes,
	}.Build()
	File_dd_server_proto = out.File
	file_dd_server_proto_rawDesc = nil
	file_dd_server_proto_goTypes = nil
	file_dd_server_proto_depIdxs = nil
}
