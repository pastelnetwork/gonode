// Copyright (c) 2021-2021 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: dd-server.proto

package dupedetection

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RarenessScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageFilepath                         string `protobuf:"bytes,1,opt,name=image_filepath,json=imageFilepath,proto3" json:"image_filepath,omitempty"`
	PastelBlockHashWhenRequestSubmitted   string `protobuf:"bytes,2,opt,name=pastel_block_hash_when_request_submitted,json=pastelBlockHashWhenRequestSubmitted,proto3" json:"pastel_block_hash_when_request_submitted,omitempty"`
	PastelBlockHeightWhenRequestSubmitted string `protobuf:"bytes,3,opt,name=pastel_block_height_when_request_submitted,json=pastelBlockHeightWhenRequestSubmitted,proto3" json:"pastel_block_height_when_request_submitted,omitempty"`
	UtcTimestampWhenRequestSubmitted      string `protobuf:"bytes,4,opt,name=utc_timestamp_when_request_submitted,json=utcTimestampWhenRequestSubmitted,proto3" json:"utc_timestamp_when_request_submitted,omitempty"`
	PastelIdOfSubmitter                   string `protobuf:"bytes,5,opt,name=pastel_id_of_submitter,json=pastelIdOfSubmitter,proto3" json:"pastel_id_of_submitter,omitempty"`
	PastelIdOfRegisteringSupernode_1      string `protobuf:"bytes,6,opt,name=pastel_id_of_registering_supernode_1,json=pastelIdOfRegisteringSupernode1,proto3" json:"pastel_id_of_registering_supernode_1,omitempty"`
	PastelIdOfRegisteringSupernode_2      string `protobuf:"bytes,7,opt,name=pastel_id_of_registering_supernode_2,json=pastelIdOfRegisteringSupernode2,proto3" json:"pastel_id_of_registering_supernode_2,omitempty"`
	PastelIdOfRegisteringSupernode_3      string `protobuf:"bytes,8,opt,name=pastel_id_of_registering_supernode_3,json=pastelIdOfRegisteringSupernode3,proto3" json:"pastel_id_of_registering_supernode_3,omitempty"`
	IsPastelOpenapiRequest                bool   `protobuf:"varint,9,opt,name=is_pastel_openapi_request,json=isPastelOpenapiRequest,proto3" json:"is_pastel_openapi_request,omitempty"`
	OpenApiGroupIdString                  string `protobuf:"bytes,10,opt,name=open_api_group_id_string,json=openApiGroupIdString,proto3" json:"open_api_group_id_string,omitempty"`
	CollectionNameString                  string `protobuf:"bytes,11,opt,name=collection_name_string,json=collectionNameString,proto3" json:"collection_name_string,omitempty"`
}

func (x *RarenessScoreRequest) Reset() {
	*x = RarenessScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RarenessScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RarenessScoreRequest) ProtoMessage() {}

func (x *RarenessScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RarenessScoreRequest.ProtoReflect.Descriptor instead.
func (*RarenessScoreRequest) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{0}
}

func (x *RarenessScoreRequest) GetImageFilepath() string {
	if x != nil {
		return x.ImageFilepath
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelBlockHashWhenRequestSubmitted() string {
	if x != nil {
		return x.PastelBlockHashWhenRequestSubmitted
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelBlockHeightWhenRequestSubmitted() string {
	if x != nil {
		return x.PastelBlockHeightWhenRequestSubmitted
	}
	return ""
}

func (x *RarenessScoreRequest) GetUtcTimestampWhenRequestSubmitted() string {
	if x != nil {
		return x.UtcTimestampWhenRequestSubmitted
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelIdOfSubmitter() string {
	if x != nil {
		return x.PastelIdOfSubmitter
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelIdOfRegisteringSupernode_1() string {
	if x != nil {
		return x.PastelIdOfRegisteringSupernode_1
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelIdOfRegisteringSupernode_2() string {
	if x != nil {
		return x.PastelIdOfRegisteringSupernode_2
	}
	return ""
}

func (x *RarenessScoreRequest) GetPastelIdOfRegisteringSupernode_3() string {
	if x != nil {
		return x.PastelIdOfRegisteringSupernode_3
	}
	return ""
}

func (x *RarenessScoreRequest) GetIsPastelOpenapiRequest() bool {
	if x != nil {
		return x.IsPastelOpenapiRequest
	}
	return false
}

func (x *RarenessScoreRequest) GetOpenApiGroupIdString() string {
	if x != nil {
		return x.OpenApiGroupIdString
	}
	return ""
}

func (x *RarenessScoreRequest) GetCollectionNameString() string {
	if x != nil {
		return x.CollectionNameString
	}
	return ""
}

type ImageRarenessScoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PastelBlockHashWhenRequestSubmitted           string            `protobuf:"bytes,1,opt,name=pastel_block_hash_when_request_submitted,json=pastelBlockHashWhenRequestSubmitted,proto3" json:"pastel_block_hash_when_request_submitted,omitempty"`
	PastelBlockHeightWhenRequestSubmitted         string            `protobuf:"bytes,2,opt,name=pastel_block_height_when_request_submitted,json=pastelBlockHeightWhenRequestSubmitted,proto3" json:"pastel_block_height_when_request_submitted,omitempty"`
	UtcTimestampWhenRequestSubmitted              string            `protobuf:"bytes,3,opt,name=utc_timestamp_when_request_submitted,json=utcTimestampWhenRequestSubmitted,proto3" json:"utc_timestamp_when_request_submitted,omitempty"`
	PastelIdOfSubmitter                           string            `protobuf:"bytes,4,opt,name=pastel_id_of_submitter,json=pastelIdOfSubmitter,proto3" json:"pastel_id_of_submitter,omitempty"`
	PastelIdOfRegisteringSupernode_1              string            `protobuf:"bytes,5,opt,name=pastel_id_of_registering_supernode_1,json=pastelIdOfRegisteringSupernode1,proto3" json:"pastel_id_of_registering_supernode_1,omitempty"`
	PastelIdOfRegisteringSupernode_2              string            `protobuf:"bytes,6,opt,name=pastel_id_of_registering_supernode_2,json=pastelIdOfRegisteringSupernode2,proto3" json:"pastel_id_of_registering_supernode_2,omitempty"`
	PastelIdOfRegisteringSupernode_3              string            `protobuf:"bytes,7,opt,name=pastel_id_of_registering_supernode_3,json=pastelIdOfRegisteringSupernode3,proto3" json:"pastel_id_of_registering_supernode_3,omitempty"`
	IsPastelOpenapiRequest                        bool              `protobuf:"varint,8,opt,name=is_pastel_openapi_request,json=isPastelOpenapiRequest,proto3" json:"is_pastel_openapi_request,omitempty"`
	ImageFilePath                                 string            `protobuf:"bytes,9,opt,name=image_file_path,json=imageFilePath,proto3" json:"image_file_path,omitempty"`
	DupeDetectionSystemVersion                    string            `protobuf:"bytes,10,opt,name=dupe_detection_system_version,json=dupeDetectionSystemVersion,proto3" json:"dupe_detection_system_version,omitempty"`
	IsLikelyDupe                                  bool              `protobuf:"varint,11,opt,name=is_likely_dupe,json=isLikelyDupe,proto3" json:"is_likely_dupe,omitempty"`
	IsRareOnInternet                              bool              `protobuf:"varint,12,opt,name=is_rare_on_internet,json=isRareOnInternet,proto3" json:"is_rare_on_internet,omitempty"`
	OverallRarenessScore                          float32           `protobuf:"fixed32,13,opt,name=overall_rareness_score,json=overallRarenessScore,proto3" json:"overall_rareness_score,omitempty"`
	PctOfTop_10MostSimilarWithDupeProbAbove_25Pct float32           `protobuf:"fixed32,14,opt,name=pct_of_top_10_most_similar_with_dupe_prob_above_25pct,json=pctOfTop10MostSimilarWithDupeProbAbove25pct,proto3" json:"pct_of_top_10_most_similar_with_dupe_prob_above_25pct,omitempty"`
	PctOfTop_10MostSimilarWithDupeProbAbove_33Pct float32           `protobuf:"fixed32,15,opt,name=pct_of_top_10_most_similar_with_dupe_prob_above_33pct,json=pctOfTop10MostSimilarWithDupeProbAbove33pct,proto3" json:"pct_of_top_10_most_similar_with_dupe_prob_above_33pct,omitempty"`
	PctOfTop_10MostSimilarWithDupeProbAbove_50Pct float32           `protobuf:"fixed32,16,opt,name=pct_of_top_10_most_similar_with_dupe_prob_above_50pct,json=pctOfTop10MostSimilarWithDupeProbAbove50pct,proto3" json:"pct_of_top_10_most_similar_with_dupe_prob_above_50pct,omitempty"`
	RarenessScoresTableJsonCompressedB64          string            `protobuf:"bytes,17,opt,name=rareness_scores_table_json_compressed_b64,json=rarenessScoresTableJsonCompressedB64,proto3" json:"rareness_scores_table_json_compressed_b64,omitempty"`
	InternetRareness                              *InternetRareness `protobuf:"bytes,18,opt,name=internet_rareness,json=internetRareness,proto3" json:"internet_rareness,omitempty"`
	OpenNsfwScore                                 float32           `protobuf:"fixed32,19,opt,name=open_nsfw_score,json=openNsfwScore,proto3" json:"open_nsfw_score,omitempty"`
	AlternativeNsfwScores                         *AltNsfwScores    `protobuf:"bytes,20,opt,name=alternative_nsfw_scores,json=alternativeNsfwScores,proto3" json:"alternative_nsfw_scores,omitempty"`
	ImageFingerprintOfCandidateImageFile          []float64         `protobuf:"fixed64,21,rep,packed,name=image_fingerprint_of_candidate_image_file,json=imageFingerprintOfCandidateImageFile,proto3" json:"image_fingerprint_of_candidate_image_file,omitempty"`
	CollectionNameString                          string            `protobuf:"bytes,22,opt,name=collection_name_string,json=collectionNameString,proto3" json:"collection_name_string,omitempty"`
	HashOfCandidateImageFile                      string            `protobuf:"bytes,23,opt,name=hash_of_candidate_image_file,json=hashOfCandidateImageFile,proto3" json:"hash_of_candidate_image_file,omitempty"`
	OpenApiGroupIdString                          string            `protobuf:"bytes,24,opt,name=open_api_group_id_string,json=openApiGroupIdString,proto3" json:"open_api_group_id_string,omitempty"`
	GroupRarenessScore                            float32           `protobuf:"fixed32,25,opt,name=group_rareness_score,json=groupRarenessScore,proto3" json:"group_rareness_score,omitempty"`
	CandidateImageThumbnailWebpAsBase64String     string            `protobuf:"bytes,26,opt,name=candidate_image_thumbnail_webp_as_base64_string,json=candidateImageThumbnailWebpAsBase64String,proto3" json:"candidate_image_thumbnail_webp_as_base64_string,omitempty"`
	DoesNotImpactTheFollowingCollectionStrings    string            `protobuf:"bytes,27,opt,name=does_not_impact_the_following_collection_strings,json=doesNotImpactTheFollowingCollectionStrings,proto3" json:"does_not_impact_the_following_collection_strings,omitempty"`
	IsInvalidSenseRequest                         bool              `protobuf:"varint,28,opt,name=is_invalid_sense_request,json=isInvalidSenseRequest,proto3" json:"is_invalid_sense_request,omitempty"`
	InvalidSenseRequestReason                     string            `protobuf:"bytes,29,opt,name=invalid_sense_request_reason,json=invalidSenseRequestReason,proto3" json:"invalid_sense_request_reason,omitempty"`
	SimilarityScoreToFirstEntryInCollection       float32           `protobuf:"fixed32,30,opt,name=similarity_score_to_first_entry_in_collection,json=similarityScoreToFirstEntryInCollection,proto3" json:"similarity_score_to_first_entry_in_collection,omitempty"`
	CpProbability                                 float32           `protobuf:"fixed32,31,opt,name=cp_probability,json=cpProbability,proto3" json:"cp_probability,omitempty"`
	ChildProbability                              float32           `protobuf:"fixed32,32,opt,name=child_probability,json=childProbability,proto3" json:"child_probability,omitempty"`
	ImageFingerprintSetChecksum                   string            `protobuf:"bytes,33,opt,name=image_fingerprint_set_checksum,json=imageFingerprintSetChecksum,proto3" json:"image_fingerprint_set_checksum,omitempty"`
}

func (x *ImageRarenessScoreReply) Reset() {
	*x = ImageRarenessScoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRarenessScoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRarenessScoreReply) ProtoMessage() {}

func (x *ImageRarenessScoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRarenessScoreReply.ProtoReflect.Descriptor instead.
func (*ImageRarenessScoreReply) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{1}
}

func (x *ImageRarenessScoreReply) GetPastelBlockHashWhenRequestSubmitted() string {
	if x != nil {
		return x.PastelBlockHashWhenRequestSubmitted
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPastelBlockHeightWhenRequestSubmitted() string {
	if x != nil {
		return x.PastelBlockHeightWhenRequestSubmitted
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetUtcTimestampWhenRequestSubmitted() string {
	if x != nil {
		return x.UtcTimestampWhenRequestSubmitted
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPastelIdOfSubmitter() string {
	if x != nil {
		return x.PastelIdOfSubmitter
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPastelIdOfRegisteringSupernode_1() string {
	if x != nil {
		return x.PastelIdOfRegisteringSupernode_1
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPastelIdOfRegisteringSupernode_2() string {
	if x != nil {
		return x.PastelIdOfRegisteringSupernode_2
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetPastelIdOfRegisteringSupernode_3() string {
	if x != nil {
		return x.PastelIdOfRegisteringSupernode_3
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetIsPastelOpenapiRequest() bool {
	if x != nil {
		return x.IsPastelOpenapiRequest
	}
	return false
}

func (x *ImageRarenessScoreReply) GetImageFilePath() string {
	if x != nil {
		return x.ImageFilePath
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetDupeDetectionSystemVersion() string {
	if x != nil {
		return x.DupeDetectionSystemVersion
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetIsLikelyDupe() bool {
	if x != nil {
		return x.IsLikelyDupe
	}
	return false
}

func (x *ImageRarenessScoreReply) GetIsRareOnInternet() bool {
	if x != nil {
		return x.IsRareOnInternet
	}
	return false
}

func (x *ImageRarenessScoreReply) GetOverallRarenessScore() float32 {
	if x != nil {
		return x.OverallRarenessScore
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetPctOfTop_10MostSimilarWithDupeProbAbove_25Pct() float32 {
	if x != nil {
		return x.PctOfTop_10MostSimilarWithDupeProbAbove_25Pct
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetPctOfTop_10MostSimilarWithDupeProbAbove_33Pct() float32 {
	if x != nil {
		return x.PctOfTop_10MostSimilarWithDupeProbAbove_33Pct
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetPctOfTop_10MostSimilarWithDupeProbAbove_50Pct() float32 {
	if x != nil {
		return x.PctOfTop_10MostSimilarWithDupeProbAbove_50Pct
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetRarenessScoresTableJsonCompressedB64() string {
	if x != nil {
		return x.RarenessScoresTableJsonCompressedB64
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetInternetRareness() *InternetRareness {
	if x != nil {
		return x.InternetRareness
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetOpenNsfwScore() float32 {
	if x != nil {
		return x.OpenNsfwScore
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetAlternativeNsfwScores() *AltNsfwScores {
	if x != nil {
		return x.AlternativeNsfwScores
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetImageFingerprintOfCandidateImageFile() []float64 {
	if x != nil {
		return x.ImageFingerprintOfCandidateImageFile
	}
	return nil
}

func (x *ImageRarenessScoreReply) GetCollectionNameString() string {
	if x != nil {
		return x.CollectionNameString
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetHashOfCandidateImageFile() string {
	if x != nil {
		return x.HashOfCandidateImageFile
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetOpenApiGroupIdString() string {
	if x != nil {
		return x.OpenApiGroupIdString
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetGroupRarenessScore() float32 {
	if x != nil {
		return x.GroupRarenessScore
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetCandidateImageThumbnailWebpAsBase64String() string {
	if x != nil {
		return x.CandidateImageThumbnailWebpAsBase64String
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetDoesNotImpactTheFollowingCollectionStrings() string {
	if x != nil {
		return x.DoesNotImpactTheFollowingCollectionStrings
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetIsInvalidSenseRequest() bool {
	if x != nil {
		return x.IsInvalidSenseRequest
	}
	return false
}

func (x *ImageRarenessScoreReply) GetInvalidSenseRequestReason() string {
	if x != nil {
		return x.InvalidSenseRequestReason
	}
	return ""
}

func (x *ImageRarenessScoreReply) GetSimilarityScoreToFirstEntryInCollection() float32 {
	if x != nil {
		return x.SimilarityScoreToFirstEntryInCollection
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetCpProbability() float32 {
	if x != nil {
		return x.CpProbability
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetChildProbability() float32 {
	if x != nil {
		return x.ChildProbability
	}
	return 0
}

func (x *ImageRarenessScoreReply) GetImageFingerprintSetChecksum() string {
	if x != nil {
		return x.ImageFingerprintSetChecksum
	}
	return ""
}

type InternetRareness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RareOnInternetSummaryTableAsJsonCompressedB64    string `protobuf:"bytes,1,opt,name=rare_on_internet_summary_table_as_json_compressed_b64,json=rareOnInternetSummaryTableAsJsonCompressedB64,proto3" json:"rare_on_internet_summary_table_as_json_compressed_b64,omitempty"`
	RareOnInternetGraphJsonCompressedB64             string `protobuf:"bytes,2,opt,name=rare_on_internet_graph_json_compressed_b64,json=rareOnInternetGraphJsonCompressedB64,proto3" json:"rare_on_internet_graph_json_compressed_b64,omitempty"`
	AlternativeRareOnInternetDictAsJsonCompressedB64 string `protobuf:"bytes,3,opt,name=alternative_rare_on_internet_dict_as_json_compressed_b64,json=alternativeRareOnInternetDictAsJsonCompressedB64,proto3" json:"alternative_rare_on_internet_dict_as_json_compressed_b64,omitempty"`
	MinNumberOfExactMatchesInPage                    uint32 `protobuf:"varint,4,opt,name=min_number_of_exact_matches_in_page,json=minNumberOfExactMatchesInPage,proto3" json:"min_number_of_exact_matches_in_page,omitempty"`
	EarliestAvailableDateOfInternetResults           string `protobuf:"bytes,5,opt,name=earliest_available_date_of_internet_results,json=earliestAvailableDateOfInternetResults,proto3" json:"earliest_available_date_of_internet_results,omitempty"`
}

func (x *InternetRareness) Reset() {
	*x = InternetRareness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternetRareness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternetRareness) ProtoMessage() {}

func (x *InternetRareness) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternetRareness.ProtoReflect.Descriptor instead.
func (*InternetRareness) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{2}
}

func (x *InternetRareness) GetRareOnInternetSummaryTableAsJsonCompressedB64() string {
	if x != nil {
		return x.RareOnInternetSummaryTableAsJsonCompressedB64
	}
	return ""
}

func (x *InternetRareness) GetRareOnInternetGraphJsonCompressedB64() string {
	if x != nil {
		return x.RareOnInternetGraphJsonCompressedB64
	}
	return ""
}

func (x *InternetRareness) GetAlternativeRareOnInternetDictAsJsonCompressedB64() string {
	if x != nil {
		return x.AlternativeRareOnInternetDictAsJsonCompressedB64
	}
	return ""
}

func (x *InternetRareness) GetMinNumberOfExactMatchesInPage() uint32 {
	if x != nil {
		return x.MinNumberOfExactMatchesInPage
	}
	return 0
}

func (x *InternetRareness) GetEarliestAvailableDateOfInternetResults() string {
	if x != nil {
		return x.EarliestAvailableDateOfInternetResults
	}
	return ""
}

type AltNsfwScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawings float32 `protobuf:"fixed32,1,opt,name=drawings,proto3" json:"drawings,omitempty"`
	Hentai   float32 `protobuf:"fixed32,2,opt,name=hentai,proto3" json:"hentai,omitempty"`
	Neutral  float32 `protobuf:"fixed32,3,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Porn     float32 `protobuf:"fixed32,4,opt,name=porn,proto3" json:"porn,omitempty"`
	Sexy     float32 `protobuf:"fixed32,5,opt,name=sexy,proto3" json:"sexy,omitempty"`
}

func (x *AltNsfwScores) Reset() {
	*x = AltNsfwScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltNsfwScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltNsfwScores) ProtoMessage() {}

func (x *AltNsfwScores) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltNsfwScores.ProtoReflect.Descriptor instead.
func (*AltNsfwScores) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{3}
}

func (x *AltNsfwScores) GetDrawings() float32 {
	if x != nil {
		return x.Drawings
	}
	return 0
}

func (x *AltNsfwScores) GetHentai() float32 {
	if x != nil {
		return x.Hentai
	}
	return 0
}

func (x *AltNsfwScores) GetNeutral() float32 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *AltNsfwScores) GetPorn() float32 {
	if x != nil {
		return x.Porn
	}
	return 0
}

func (x *AltNsfwScores) GetSexy() float32 {
	if x != nil {
		return x.Sexy
	}
	return 0
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{4}
}

type TaskCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxConcurrent  int32 `protobuf:"varint,1,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	Executing      int32 `protobuf:"varint,2,opt,name=executing,proto3" json:"executing,omitempty"`
	WaitingInQueue int32 `protobuf:"varint,3,opt,name=waiting_in_queue,json=waitingInQueue,proto3" json:"waiting_in_queue,omitempty"`
	Succeeded      int32 `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Failed         int32 `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
	Cancelled      int32 `protobuf:"varint,6,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
}

func (x *TaskCount) Reset() {
	*x = TaskCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCount) ProtoMessage() {}

func (x *TaskCount) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCount.ProtoReflect.Descriptor instead.
func (*TaskCount) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{5}
}

func (x *TaskCount) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

func (x *TaskCount) GetExecuting() int32 {
	if x != nil {
		return x.Executing
	}
	return 0
}

func (x *TaskCount) GetWaitingInQueue() int32 {
	if x != nil {
		return x.WaitingInQueue
	}
	return 0
}

func (x *TaskCount) GetSucceeded() int32 {
	if x != nil {
		return x.Succeeded
	}
	return 0
}

func (x *TaskCount) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *TaskCount) GetCancelled() int32 {
	if x != nil {
		return x.Cancelled
	}
	return 0
}

type TaskMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageTaskWaitTimeSecs            float32 `protobuf:"fixed32,1,opt,name=average_task_wait_time_secs,json=averageTaskWaitTimeSecs,proto3" json:"average_task_wait_time_secs,omitempty"`
	MaxTaskWaitTimeSecs                float32 `protobuf:"fixed32,2,opt,name=max_task_wait_time_secs,json=maxTaskWaitTimeSecs,proto3" json:"max_task_wait_time_secs,omitempty"`
	AverageTaskExecutionTimeSecs       float32 `protobuf:"fixed32,3,opt,name=average_task_execution_time_secs,json=averageTaskExecutionTimeSecs,proto3" json:"average_task_execution_time_secs,omitempty"`
	AverageTaskVirtualMemoryUsageBytes int64   `protobuf:"varint,4,opt,name=average_task_virtual_memory_usage_bytes,json=averageTaskVirtualMemoryUsageBytes,proto3" json:"average_task_virtual_memory_usage_bytes,omitempty"`
	AverageTaskRssMemoryUsageBytes     int64   `protobuf:"varint,5,opt,name=average_task_rss_memory_usage_bytes,json=averageTaskRssMemoryUsageBytes,proto3" json:"average_task_rss_memory_usage_bytes,omitempty"`
	PeakTaskRssMemoryUsageBytes        int64   `protobuf:"varint,6,opt,name=peak_task_rss_memory_usage_bytes,json=peakTaskRssMemoryUsageBytes,proto3" json:"peak_task_rss_memory_usage_bytes,omitempty"`
	PeakTaskVmsMemoryUsageBytes        int64   `protobuf:"varint,7,opt,name=peak_task_vms_memory_usage_bytes,json=peakTaskVmsMemoryUsageBytes,proto3" json:"peak_task_vms_memory_usage_bytes,omitempty"`
}

func (x *TaskMetrics) Reset() {
	*x = TaskMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMetrics) ProtoMessage() {}

func (x *TaskMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMetrics.ProtoReflect.Descriptor instead.
func (*TaskMetrics) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{6}
}

func (x *TaskMetrics) GetAverageTaskWaitTimeSecs() float32 {
	if x != nil {
		return x.AverageTaskWaitTimeSecs
	}
	return 0
}

func (x *TaskMetrics) GetMaxTaskWaitTimeSecs() float32 {
	if x != nil {
		return x.MaxTaskWaitTimeSecs
	}
	return 0
}

func (x *TaskMetrics) GetAverageTaskExecutionTimeSecs() float32 {
	if x != nil {
		return x.AverageTaskExecutionTimeSecs
	}
	return 0
}

func (x *TaskMetrics) GetAverageTaskVirtualMemoryUsageBytes() int64 {
	if x != nil {
		return x.AverageTaskVirtualMemoryUsageBytes
	}
	return 0
}

func (x *TaskMetrics) GetAverageTaskRssMemoryUsageBytes() int64 {
	if x != nil {
		return x.AverageTaskRssMemoryUsageBytes
	}
	return 0
}

func (x *TaskMetrics) GetPeakTaskRssMemoryUsageBytes() int64 {
	if x != nil {
		return x.PeakTaskRssMemoryUsageBytes
	}
	return 0
}

func (x *TaskMetrics) GetPeakTaskVmsMemoryUsageBytes() int64 {
	if x != nil {
		return x.PeakTaskVmsMemoryUsageBytes
	}
	return 0
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string       `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	TaskCount   *TaskCount   `protobuf:"bytes,2,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	TaskMetrics *TaskMetrics `protobuf:"bytes,3,opt,name=task_metrics,json=taskMetrics,proto3" json:"task_metrics,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dd_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dd_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_dd_server_proto_rawDescGZIP(), []int{7}
}

func (x *GetStatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetStatusResponse) GetTaskCount() *TaskCount {
	if x != nil {
		return x.TaskCount
	}
	return nil
}

func (x *GetStatusResponse) GetTaskMetrics() *TaskMetrics {
	if x != nil {
		return x.TaskMetrics
	}
	return nil
}

var File_dd_server_proto protoreflect.FileDescriptor

var file_dd_server_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8a, 0x06, 0x0a, 0x14, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x55, 0x0a, 0x28, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x23, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x2a, 0x70, 0x61, 0x73, 0x74, 0x65,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x70, 0x61, 0x73,
	0x74, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x68,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x57, 0x68,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x73, 0x74, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x31, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f,
	0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x6e, 0x6f, 0x64, 0x65, 0x32, 0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x33, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e,
	0x6f, 0x64, 0x65, 0x33, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65,
	0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x50, 0x61, 0x73, 0x74, 0x65,
	0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x12,
	0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x28, 0x70, 0x61, 0x73,
	0x74, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x70, 0x61, 0x73,
	0x74, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x57, 0x68, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x12, 0x59, 0x0a, 0x2a, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x77, 0x68, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x75, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x70,
	0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x73,
	0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x24, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x31, 0x12,
	0x4d, 0x0a, 0x24, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70,
	0x61, 0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x12, 0x4d,
	0x0a, 0x24, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61,
	0x73, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x33, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x69, 0x73, 0x50, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x41, 0x0a, 0x1d, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x75, 0x70, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79,
	0x5f, 0x64, 0x75, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x6c, 0x79, 0x44, 0x75, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x61, 0x72, 0x65, 0x4f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x6a,
	0x0a, 0x35, 0x70, 0x63, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x30, 0x5f,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x5f, 0x61, 0x62, 0x6f, 0x76,
	0x65, 0x5f, 0x32, 0x35, 0x70, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2b, 0x70,
	0x63, 0x74, 0x4f, 0x66, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x4d, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x75, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x41, 0x62, 0x6f, 0x76, 0x65, 0x32, 0x35, 0x70, 0x63, 0x74, 0x12, 0x6a, 0x0a, 0x35, 0x70, 0x63,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x30, 0x5f, 0x6d, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x75,
	0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x33, 0x33,
	0x70, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2b, 0x70, 0x63, 0x74, 0x4f, 0x66,
	0x54, 0x6f, 0x70, 0x31, 0x30, 0x4d, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x75, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x41, 0x62, 0x6f, 0x76,
	0x65, 0x33, 0x33, 0x70, 0x63, 0x74, 0x12, 0x6a, 0x0a, 0x35, 0x70, 0x63, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x30, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x35, 0x30, 0x70, 0x63, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2b, 0x70, 0x63, 0x74, 0x4f, 0x66, 0x54, 0x6f, 0x70, 0x31,
	0x30, 0x4d, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x75, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x35, 0x30, 0x70,
	0x63, 0x74, 0x12, 0x57, 0x0a, 0x29, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x36, 0x34, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x36, 0x34, 0x12, 0x4c, 0x0a, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52,
	0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x54, 0x0a, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6e, 0x73, 0x66, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x4e, 0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x52, 0x15, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x73, 0x66,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x01, 0x52, 0x24, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x68, 0x61,
	0x73, 0x68, 0x4f, 0x66, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x62, 0x0a, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x77, 0x65,
	0x62, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x57, 0x65, 0x62, 0x70, 0x41, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x30, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2a,
	0x64, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x68, 0x65,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x2d, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x27, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x70,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xf7, 0x03,
	0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x6c, 0x0a, 0x35, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x2d, 0x72, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x36, 0x34,
	0x12, 0x58, 0x0a, 0x2a, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x72, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x36, 0x34, 0x12, 0x72, 0x0a, 0x38, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x61, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x30, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x41, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x36, 0x34, 0x12, 0x4a,
	0x0a, 0x23, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6d, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x2b, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x26, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x4e,
	0x73, 0x66, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61,
	0x77, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x72, 0x61,
	0x77, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x65, 0x78, 0x79, 0x22,
	0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x22, 0xf9, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73,
	0x12, 0x53, 0x0a, 0x27, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x70, 0x65,
	0x61, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x70, 0x65, 0x61,
	0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x6d, 0x73,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xa5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x32, 0xc8, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x70,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x61, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x75,
	0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x67, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x75, 0x70, 0x65, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dd_server_proto_rawDescOnce sync.Once
	file_dd_server_proto_rawDescData = file_dd_server_proto_rawDesc
)

func file_dd_server_proto_rawDescGZIP() []byte {
	file_dd_server_proto_rawDescOnce.Do(func() {
		file_dd_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_dd_server_proto_rawDescData)
	})
	return file_dd_server_proto_rawDescData
}

var file_dd_server_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dd_server_proto_goTypes = []interface{}{
	(*RarenessScoreRequest)(nil),    // 0: dupedetection.RarenessScoreRequest
	(*ImageRarenessScoreReply)(nil), // 1: dupedetection.ImageRarenessScoreReply
	(*InternetRareness)(nil),        // 2: dupedetection.InternetRareness
	(*AltNsfwScores)(nil),           // 3: dupedetection.AltNsfwScores
	(*GetStatusRequest)(nil),        // 4: dupedetection.GetStatusRequest
	(*TaskCount)(nil),               // 5: dupedetection.TaskCount
	(*TaskMetrics)(nil),             // 6: dupedetection.TaskMetrics
	(*GetStatusResponse)(nil),       // 7: dupedetection.GetStatusResponse
}
var file_dd_server_proto_depIdxs = []int32{
	2, // 0: dupedetection.ImageRarenessScoreReply.internet_rareness:type_name -> dupedetection.InternetRareness
	3, // 1: dupedetection.ImageRarenessScoreReply.alternative_nsfw_scores:type_name -> dupedetection.AltNsfwScores
	5, // 2: dupedetection.GetStatusResponse.task_count:type_name -> dupedetection.TaskCount
	6, // 3: dupedetection.GetStatusResponse.task_metrics:type_name -> dupedetection.TaskMetrics
	0, // 4: dupedetection.DupeDetectionServer.ImageRarenessScore:input_type -> dupedetection.RarenessScoreRequest
	4, // 5: dupedetection.DupeDetectionServer.GetStatus:input_type -> dupedetection.GetStatusRequest
	1, // 6: dupedetection.DupeDetectionServer.ImageRarenessScore:output_type -> dupedetection.ImageRarenessScoreReply
	7, // 7: dupedetection.DupeDetectionServer.GetStatus:output_type -> dupedetection.GetStatusResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_dd_server_proto_init() }
func file_dd_server_proto_init() {
	if File_dd_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dd_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RarenessScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRarenessScoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternetRareness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltNsfwScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dd_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dd_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dd_server_proto_goTypes,
		DependencyIndexes: file_dd_server_proto_depIdxs,
		MessageInfos:      file_dd_server_proto_msgTypes,
	}.Build()
	File_dd_server_proto = out.File
	file_dd_server_proto_rawDesc = nil
	file_dd_server_proto_goTypes = nil
	file_dd_server_proto_depIdxs = nil
}
