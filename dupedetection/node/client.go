//go:generate mockery --name=Client
//go:generate mockery --name=Connection
//go:generate mockery --name=Dupedetection

package node

import (
	"context"
)

// Config contains path to where symbolid files are generated by raptorq service
type DDServerConfig struct {
	DDFilesDir string
}

// DupeDetection is the dupe detection result which will be sent to the caller
type DupeDetection struct {
	DupeDetectionSystemVer  string              `json:"dupe_detection_system_version"`
	ImageHash               []byte              `json:"hash_of_candidate_image_file"`
	PastelRarenessScore     float32             `json:"overall_average_rareness_score"`
	IsRareOnInternet        bool                `json:"is_rare_on_internet"`
	MatchesFoundOnFirstPage uint32              `json:"matches_found_on_first_page"`
	NumberOfResultPages     uint32              `json:"number_of_pages_of_results"`
	FirstMatchURL           string              `json:"url_of_first_match_in_page"`
	OpenNSFWScore           float32             `json:"open_nsfw_score"`
	AlternateNSFWScores     AlternateNSFWScores `json:"alternative_nsfw_scores"`
	ImageHashes             ImageHashes         `json:"image_hashes"`
	Fingerprints            []float32           `json:"image_fingerprint_of_candidate_image_file"`
}

// AlternateNSFWScores represents alternate NSFW scores in the output of dupe detection service
type AlternateNSFWScores struct {
	Drawings float32 `json:"drawings"`
	Hentai   float32 `json:"hentai"`
	Neutral  float32 `json:"neutral"`
	Porn     float32 `json:"porn"`
	Sexy     float32 `json:"sexy"`
}

// ImageHashes represents image hashes in the output of dupe detection service
type ImageHashes struct {
	PDQHash        string `json:"pdq_hash"`
	PerceptualHash string `json:"perceptual_hash"`
	AverageHash    string `json:"average_hash"`
	DifferenceHash string `json:"difference_hash"`
	NeuralHash     string `json:"neuralhash_hash"`
}

// Client represents a base connection interface.
type Client interface {
	// Connect connects to the server at the given address.
	Connect(ctx context.Context, address string) (Connection, error)
}

// Connection represents a client connection
type Connection interface {
	// Close closes connection.
	Close() error
	// Done returns a channel that's closed when connection is shutdown.
	Done() <-chan struct{}
	// Dupedetection returns a new Dupedetection stream.
	Dupedetection(config *DDServerConfig) Dupedetection
}

// Dupedetection contains methods for request services from dd-server service.
type Dupedetection interface {
	// ImageRarenessScore returns rareness score of image
	ImageRarenessScore(ctx context.Context, img []byte, format string) (*DupeDetection, error)
}
