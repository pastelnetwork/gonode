// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dd-server.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RarenessScoreRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	BlockHash            string   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PastelId             string   `protobuf:"bytes,3,opt,name=pastel_id,json=pastelId,proto3" json:"pastel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RarenessScoreRequest) Reset()         { *m = RarenessScoreRequest{} }
func (m *RarenessScoreRequest) String() string { return proto.CompactTextString(m) }
func (*RarenessScoreRequest) ProtoMessage()    {}
func (*RarenessScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{0}
}

func (m *RarenessScoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RarenessScoreRequest.Unmarshal(m, b)
}
func (m *RarenessScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RarenessScoreRequest.Marshal(b, m, deterministic)
}
func (m *RarenessScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RarenessScoreRequest.Merge(m, src)
}
func (m *RarenessScoreRequest) XXX_Size() int {
	return xxx_messageInfo_RarenessScoreRequest.Size(m)
}
func (m *RarenessScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RarenessScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RarenessScoreRequest proto.InternalMessageInfo

func (m *RarenessScoreRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RarenessScoreRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *RarenessScoreRequest) GetPastelId() string {
	if m != nil {
		return m.PastelId
	}
	return ""
}

type ImageRarenessScoreReply struct {
	Block                                string                 `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Principal                            string                 `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	DupeDetectionSystemVersion           string                 `protobuf:"bytes,3,opt,name=dupe_detection_system_version,json=dupeDetectionSystemVersion,proto3" json:"dupe_detection_system_version,omitempty"`
	IsLikelyDupe                         bool                   `protobuf:"varint,4,opt,name=is_likely_dupe,json=isLikelyDupe,proto3" json:"is_likely_dupe,omitempty"`
	IsRareOnInternet                     bool                   `protobuf:"varint,5,opt,name=is_rare_on_internet,json=isRareOnInternet,proto3" json:"is_rare_on_internet,omitempty"`
	RarenessScores                       *RarenessScores        `protobuf:"bytes,6,opt,name=rareness_scores,json=rarenessScores,proto3" json:"rareness_scores,omitempty"`
	InternetRareness                     *InternetRareness      `protobuf:"bytes,7,opt,name=internet_rareness,json=internetRareness,proto3" json:"internet_rareness,omitempty"`
	OpenNsfwScore                        float32                `protobuf:"fixed32,8,opt,name=open_nsfw_score,json=openNsfwScore,proto3" json:"open_nsfw_score,omitempty"`
	AlternativeNsfwScores                *AltNsfwScores         `protobuf:"bytes,9,opt,name=alternative_nsfw_scores,json=alternativeNsfwScores,proto3" json:"alternative_nsfw_scores,omitempty"`
	ImageFingerprintOfCandidateImageFile []float32              `protobuf:"fixed32,10,rep,packed,name=image_fingerprint_of_candidate_image_file,json=imageFingerprintOfCandidateImageFile,proto3" json:"image_fingerprint_of_candidate_image_file,omitempty"`
	FingerprintsStat                     *FingerprintsStat      `protobuf:"bytes,11,opt,name=fingerprints_stat,json=fingerprintsStat,proto3" json:"fingerprints_stat,omitempty"`
	HashOfCandidateImageFile             string                 `protobuf:"bytes,12,opt,name=hash_of_candidate_image_file,json=hashOfCandidateImageFile,proto3" json:"hash_of_candidate_image_file,omitempty"`
	PerceptualImageHashes                *PerceptualImageHashes `protobuf:"bytes,13,opt,name=perceptual_image_hashes,json=perceptualImageHashes,proto3" json:"perceptual_image_hashes,omitempty"`
	PerceptualHashOverlapCount           uint32                 `protobuf:"varint,14,opt,name=perceptual_hash_overlap_count,json=perceptualHashOverlapCount,proto3" json:"perceptual_hash_overlap_count,omitempty"`
	Maxes                                *Maxes                 `protobuf:"bytes,15,opt,name=maxes,proto3" json:"maxes,omitempty"`
	Percentile                           *Percentile            `protobuf:"bytes,16,opt,name=percentile,proto3" json:"percentile,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}               `json:"-"`
	XXX_unrecognized                     []byte                 `json:"-"`
	XXX_sizecache                        int32                  `json:"-"`
}

func (m *ImageRarenessScoreReply) Reset()         { *m = ImageRarenessScoreReply{} }
func (m *ImageRarenessScoreReply) String() string { return proto.CompactTextString(m) }
func (*ImageRarenessScoreReply) ProtoMessage()    {}
func (*ImageRarenessScoreReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{1}
}

func (m *ImageRarenessScoreReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageRarenessScoreReply.Unmarshal(m, b)
}
func (m *ImageRarenessScoreReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageRarenessScoreReply.Marshal(b, m, deterministic)
}
func (m *ImageRarenessScoreReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRarenessScoreReply.Merge(m, src)
}
func (m *ImageRarenessScoreReply) XXX_Size() int {
	return xxx_messageInfo_ImageRarenessScoreReply.Size(m)
}
func (m *ImageRarenessScoreReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRarenessScoreReply.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRarenessScoreReply proto.InternalMessageInfo

func (m *ImageRarenessScoreReply) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *ImageRarenessScoreReply) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

func (m *ImageRarenessScoreReply) GetDupeDetectionSystemVersion() string {
	if m != nil {
		return m.DupeDetectionSystemVersion
	}
	return ""
}

func (m *ImageRarenessScoreReply) GetIsLikelyDupe() bool {
	if m != nil {
		return m.IsLikelyDupe
	}
	return false
}

func (m *ImageRarenessScoreReply) GetIsRareOnInternet() bool {
	if m != nil {
		return m.IsRareOnInternet
	}
	return false
}

func (m *ImageRarenessScoreReply) GetRarenessScores() *RarenessScores {
	if m != nil {
		return m.RarenessScores
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetInternetRareness() *InternetRareness {
	if m != nil {
		return m.InternetRareness
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetOpenNsfwScore() float32 {
	if m != nil {
		return m.OpenNsfwScore
	}
	return 0
}

func (m *ImageRarenessScoreReply) GetAlternativeNsfwScores() *AltNsfwScores {
	if m != nil {
		return m.AlternativeNsfwScores
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetImageFingerprintOfCandidateImageFile() []float32 {
	if m != nil {
		return m.ImageFingerprintOfCandidateImageFile
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetFingerprintsStat() *FingerprintsStat {
	if m != nil {
		return m.FingerprintsStat
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetHashOfCandidateImageFile() string {
	if m != nil {
		return m.HashOfCandidateImageFile
	}
	return ""
}

func (m *ImageRarenessScoreReply) GetPerceptualImageHashes() *PerceptualImageHashes {
	if m != nil {
		return m.PerceptualImageHashes
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetPerceptualHashOverlapCount() uint32 {
	if m != nil {
		return m.PerceptualHashOverlapCount
	}
	return 0
}

func (m *ImageRarenessScoreReply) GetMaxes() *Maxes {
	if m != nil {
		return m.Maxes
	}
	return nil
}

func (m *ImageRarenessScoreReply) GetPercentile() *Percentile {
	if m != nil {
		return m.Percentile
	}
	return nil
}

type RarenessScores struct {
	CombinedRarenessScore         float32  `protobuf:"fixed32,1,opt,name=combined_rareness_score,json=combinedRarenessScore,proto3" json:"combined_rareness_score,omitempty"`
	XgboostPredictedRarenessScore float32  `protobuf:"fixed32,2,opt,name=xgboost_predicted_rareness_score,json=xgboostPredictedRarenessScore,proto3" json:"xgboost_predicted_rareness_score,omitempty"`
	NnPredictedRarenessScore      float32  `protobuf:"fixed32,3,opt,name=nn_predicted_rareness_score,json=nnPredictedRarenessScore,proto3" json:"nn_predicted_rareness_score,omitempty"`
	OverallAverageRarenessScore   float32  `protobuf:"fixed32,4,opt,name=overall_average_rareness_score,json=overallAverageRarenessScore,proto3" json:"overall_average_rareness_score,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *RarenessScores) Reset()         { *m = RarenessScores{} }
func (m *RarenessScores) String() string { return proto.CompactTextString(m) }
func (*RarenessScores) ProtoMessage()    {}
func (*RarenessScores) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{2}
}

func (m *RarenessScores) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RarenessScores.Unmarshal(m, b)
}
func (m *RarenessScores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RarenessScores.Marshal(b, m, deterministic)
}
func (m *RarenessScores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RarenessScores.Merge(m, src)
}
func (m *RarenessScores) XXX_Size() int {
	return xxx_messageInfo_RarenessScores.Size(m)
}
func (m *RarenessScores) XXX_DiscardUnknown() {
	xxx_messageInfo_RarenessScores.DiscardUnknown(m)
}

var xxx_messageInfo_RarenessScores proto.InternalMessageInfo

func (m *RarenessScores) GetCombinedRarenessScore() float32 {
	if m != nil {
		return m.CombinedRarenessScore
	}
	return 0
}

func (m *RarenessScores) GetXgboostPredictedRarenessScore() float32 {
	if m != nil {
		return m.XgboostPredictedRarenessScore
	}
	return 0
}

func (m *RarenessScores) GetNnPredictedRarenessScore() float32 {
	if m != nil {
		return m.NnPredictedRarenessScore
	}
	return 0
}

func (m *RarenessScores) GetOverallAverageRarenessScore() float32 {
	if m != nil {
		return m.OverallAverageRarenessScore
	}
	return 0
}

type InternetRareness struct {
	MatchesFoundOnFirstPage uint32   `protobuf:"varint,1,opt,name=matches_found_on_first_page,json=matchesFoundOnFirstPage,proto3" json:"matches_found_on_first_page,omitempty"`
	NumberOfPagesOfResults  uint32   `protobuf:"varint,2,opt,name=number_of_pages_of_results,json=numberOfPagesOfResults,proto3" json:"number_of_pages_of_results,omitempty"`
	UrlOfFirstMatchInPage   string   `protobuf:"bytes,3,opt,name=url_of_first_match_in_page,json=urlOfFirstMatchInPage,proto3" json:"url_of_first_match_in_page,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *InternetRareness) Reset()         { *m = InternetRareness{} }
func (m *InternetRareness) String() string { return proto.CompactTextString(m) }
func (*InternetRareness) ProtoMessage()    {}
func (*InternetRareness) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{3}
}

func (m *InternetRareness) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternetRareness.Unmarshal(m, b)
}
func (m *InternetRareness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternetRareness.Marshal(b, m, deterministic)
}
func (m *InternetRareness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternetRareness.Merge(m, src)
}
func (m *InternetRareness) XXX_Size() int {
	return xxx_messageInfo_InternetRareness.Size(m)
}
func (m *InternetRareness) XXX_DiscardUnknown() {
	xxx_messageInfo_InternetRareness.DiscardUnknown(m)
}

var xxx_messageInfo_InternetRareness proto.InternalMessageInfo

func (m *InternetRareness) GetMatchesFoundOnFirstPage() uint32 {
	if m != nil {
		return m.MatchesFoundOnFirstPage
	}
	return 0
}

func (m *InternetRareness) GetNumberOfPagesOfResults() uint32 {
	if m != nil {
		return m.NumberOfPagesOfResults
	}
	return 0
}

func (m *InternetRareness) GetUrlOfFirstMatchInPage() string {
	if m != nil {
		return m.UrlOfFirstMatchInPage
	}
	return ""
}

type AltNsfwScores struct {
	Drawings             float32  `protobuf:"fixed32,1,opt,name=drawings,proto3" json:"drawings,omitempty"`
	Hentai               float32  `protobuf:"fixed32,2,opt,name=hentai,proto3" json:"hentai,omitempty"`
	Neutral              float32  `protobuf:"fixed32,3,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Porn                 float32  `protobuf:"fixed32,4,opt,name=porn,proto3" json:"porn,omitempty"`
	Sexy                 float32  `protobuf:"fixed32,5,opt,name=sexy,proto3" json:"sexy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AltNsfwScores) Reset()         { *m = AltNsfwScores{} }
func (m *AltNsfwScores) String() string { return proto.CompactTextString(m) }
func (*AltNsfwScores) ProtoMessage()    {}
func (*AltNsfwScores) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{4}
}

func (m *AltNsfwScores) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AltNsfwScores.Unmarshal(m, b)
}
func (m *AltNsfwScores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AltNsfwScores.Marshal(b, m, deterministic)
}
func (m *AltNsfwScores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AltNsfwScores.Merge(m, src)
}
func (m *AltNsfwScores) XXX_Size() int {
	return xxx_messageInfo_AltNsfwScores.Size(m)
}
func (m *AltNsfwScores) XXX_DiscardUnknown() {
	xxx_messageInfo_AltNsfwScores.DiscardUnknown(m)
}

var xxx_messageInfo_AltNsfwScores proto.InternalMessageInfo

func (m *AltNsfwScores) GetDrawings() float32 {
	if m != nil {
		return m.Drawings
	}
	return 0
}

func (m *AltNsfwScores) GetHentai() float32 {
	if m != nil {
		return m.Hentai
	}
	return 0
}

func (m *AltNsfwScores) GetNeutral() float32 {
	if m != nil {
		return m.Neutral
	}
	return 0
}

func (m *AltNsfwScores) GetPorn() float32 {
	if m != nil {
		return m.Porn
	}
	return 0
}

func (m *AltNsfwScores) GetSexy() float32 {
	if m != nil {
		return m.Sexy
	}
	return 0
}

type PerceptualImageHashes struct {
	PdqHash              string   `protobuf:"bytes,1,opt,name=pdq_hash,json=pdqHash,proto3" json:"pdq_hash,omitempty"`
	PerceptualHash       string   `protobuf:"bytes,2,opt,name=perceptual_hash,json=perceptualHash,proto3" json:"perceptual_hash,omitempty"`
	AverageHash          string   `protobuf:"bytes,3,opt,name=average_hash,json=averageHash,proto3" json:"average_hash,omitempty"`
	DifferenceHash       string   `protobuf:"bytes,4,opt,name=difference_hash,json=differenceHash,proto3" json:"difference_hash,omitempty"`
	NeuralhashHash       string   `protobuf:"bytes,5,opt,name=neuralhash_hash,json=neuralhashHash,proto3" json:"neuralhash_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PerceptualImageHashes) Reset()         { *m = PerceptualImageHashes{} }
func (m *PerceptualImageHashes) String() string { return proto.CompactTextString(m) }
func (*PerceptualImageHashes) ProtoMessage()    {}
func (*PerceptualImageHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{5}
}

func (m *PerceptualImageHashes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerceptualImageHashes.Unmarshal(m, b)
}
func (m *PerceptualImageHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerceptualImageHashes.Marshal(b, m, deterministic)
}
func (m *PerceptualImageHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerceptualImageHashes.Merge(m, src)
}
func (m *PerceptualImageHashes) XXX_Size() int {
	return xxx_messageInfo_PerceptualImageHashes.Size(m)
}
func (m *PerceptualImageHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_PerceptualImageHashes.DiscardUnknown(m)
}

var xxx_messageInfo_PerceptualImageHashes proto.InternalMessageInfo

func (m *PerceptualImageHashes) GetPdqHash() string {
	if m != nil {
		return m.PdqHash
	}
	return ""
}

func (m *PerceptualImageHashes) GetPerceptualHash() string {
	if m != nil {
		return m.PerceptualHash
	}
	return ""
}

func (m *PerceptualImageHashes) GetAverageHash() string {
	if m != nil {
		return m.AverageHash
	}
	return ""
}

func (m *PerceptualImageHashes) GetDifferenceHash() string {
	if m != nil {
		return m.DifferenceHash
	}
	return ""
}

func (m *PerceptualImageHashes) GetNeuralhashHash() string {
	if m != nil {
		return m.NeuralhashHash
	}
	return ""
}

type FingerprintsStat struct {
	NumberOfFingerprintsRequiringFurtherTesting_1 uint32   `protobuf:"varint,1,opt,name=number_of_fingerprints_requiring_further_testing_1,json=numberOfFingerprintsRequiringFurtherTesting1,proto3" json:"number_of_fingerprints_requiring_further_testing_1,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_2 uint32   `protobuf:"varint,2,opt,name=number_of_fingerprints_requiring_further_testing_2,json=numberOfFingerprintsRequiringFurtherTesting2,proto3" json:"number_of_fingerprints_requiring_further_testing_2,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_3 uint32   `protobuf:"varint,3,opt,name=number_of_fingerprints_requiring_further_testing_3,json=numberOfFingerprintsRequiringFurtherTesting3,proto3" json:"number_of_fingerprints_requiring_further_testing_3,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_4 uint32   `protobuf:"varint,4,opt,name=number_of_fingerprints_requiring_further_testing_4,json=numberOfFingerprintsRequiringFurtherTesting4,proto3" json:"number_of_fingerprints_requiring_further_testing_4,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_5 uint32   `protobuf:"varint,5,opt,name=number_of_fingerprints_requiring_further_testing_5,json=numberOfFingerprintsRequiringFurtherTesting5,proto3" json:"number_of_fingerprints_requiring_further_testing_5,omitempty"`
	NumberOfFingerprintsRequiringFurtherTesting_6 uint32   `protobuf:"varint,6,opt,name=number_of_fingerprints_requiring_further_testing_6,json=numberOfFingerprintsRequiringFurtherTesting6,proto3" json:"number_of_fingerprints_requiring_further_testing_6,omitempty"`
	NumberOfFingerprintsOfSuspectedDupes          uint32   `protobuf:"varint,7,opt,name=number_of_fingerprints_of_suspected_dupes,json=numberOfFingerprintsOfSuspectedDupes,proto3" json:"number_of_fingerprints_of_suspected_dupes,omitempty"`
	XXX_NoUnkeyedLiteral                          struct{} `json:"-"`
	XXX_unrecognized                              []byte   `json:"-"`
	XXX_sizecache                                 int32    `json:"-"`
}

func (m *FingerprintsStat) Reset()         { *m = FingerprintsStat{} }
func (m *FingerprintsStat) String() string { return proto.CompactTextString(m) }
func (*FingerprintsStat) ProtoMessage()    {}
func (*FingerprintsStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{6}
}

func (m *FingerprintsStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FingerprintsStat.Unmarshal(m, b)
}
func (m *FingerprintsStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FingerprintsStat.Marshal(b, m, deterministic)
}
func (m *FingerprintsStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FingerprintsStat.Merge(m, src)
}
func (m *FingerprintsStat) XXX_Size() int {
	return xxx_messageInfo_FingerprintsStat.Size(m)
}
func (m *FingerprintsStat) XXX_DiscardUnknown() {
	xxx_messageInfo_FingerprintsStat.DiscardUnknown(m)
}

var xxx_messageInfo_FingerprintsStat proto.InternalMessageInfo

func (m *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_1() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsRequiringFurtherTesting_1
	}
	return 0
}

func (m *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_2() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsRequiringFurtherTesting_2
	}
	return 0
}

func (m *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_3() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsRequiringFurtherTesting_3
	}
	return 0
}

func (m *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_4() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsRequiringFurtherTesting_4
	}
	return 0
}

func (m *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_5() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsRequiringFurtherTesting_5
	}
	return 0
}

func (m *FingerprintsStat) GetNumberOfFingerprintsRequiringFurtherTesting_6() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsRequiringFurtherTesting_6
	}
	return 0
}

func (m *FingerprintsStat) GetNumberOfFingerprintsOfSuspectedDupes() uint32 {
	if m != nil {
		return m.NumberOfFingerprintsOfSuspectedDupes
	}
	return 0
}

type Maxes struct {
	PearsonMax           float32  `protobuf:"fixed32,1,opt,name=pearson_max,json=pearsonMax,proto3" json:"pearson_max,omitempty"`
	SpearmanMax          float32  `protobuf:"fixed32,2,opt,name=spearman_max,json=spearmanMax,proto3" json:"spearman_max,omitempty"`
	KendallMax           float32  `protobuf:"fixed32,3,opt,name=kendall_max,json=kendallMax,proto3" json:"kendall_max,omitempty"`
	HoeffdingMax         float32  `protobuf:"fixed32,4,opt,name=hoeffding_max,json=hoeffdingMax,proto3" json:"hoeffding_max,omitempty"`
	MutualInformationMax float32  `protobuf:"fixed32,5,opt,name=mutual_information_max,json=mutualInformationMax,proto3" json:"mutual_information_max,omitempty"`
	HsicMax              float32  `protobuf:"fixed32,6,opt,name=hsic_max,json=hsicMax,proto3" json:"hsic_max,omitempty"`
	XgbimportanceMax     float32  `protobuf:"fixed32,7,opt,name=xgbimportance_max,json=xgbimportanceMax,proto3" json:"xgbimportance_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Maxes) Reset()         { *m = Maxes{} }
func (m *Maxes) String() string { return proto.CompactTextString(m) }
func (*Maxes) ProtoMessage()    {}
func (*Maxes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{7}
}

func (m *Maxes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Maxes.Unmarshal(m, b)
}
func (m *Maxes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Maxes.Marshal(b, m, deterministic)
}
func (m *Maxes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maxes.Merge(m, src)
}
func (m *Maxes) XXX_Size() int {
	return xxx_messageInfo_Maxes.Size(m)
}
func (m *Maxes) XXX_DiscardUnknown() {
	xxx_messageInfo_Maxes.DiscardUnknown(m)
}

var xxx_messageInfo_Maxes proto.InternalMessageInfo

func (m *Maxes) GetPearsonMax() float32 {
	if m != nil {
		return m.PearsonMax
	}
	return 0
}

func (m *Maxes) GetSpearmanMax() float32 {
	if m != nil {
		return m.SpearmanMax
	}
	return 0
}

func (m *Maxes) GetKendallMax() float32 {
	if m != nil {
		return m.KendallMax
	}
	return 0
}

func (m *Maxes) GetHoeffdingMax() float32 {
	if m != nil {
		return m.HoeffdingMax
	}
	return 0
}

func (m *Maxes) GetMutualInformationMax() float32 {
	if m != nil {
		return m.MutualInformationMax
	}
	return 0
}

func (m *Maxes) GetHsicMax() float32 {
	if m != nil {
		return m.HsicMax
	}
	return 0
}

func (m *Maxes) GetXgbimportanceMax() float32 {
	if m != nil {
		return m.XgbimportanceMax
	}
	return 0
}

type Percentile struct {
	PearsonTop_1BpsPercentile             float32  `protobuf:"fixed32,1,opt,name=pearson_top_1_bps_percentile,json=pearsonTop1BpsPercentile,proto3" json:"pearson_top_1_bps_percentile,omitempty"`
	SpearmanTop_1BpsPercentile            float32  `protobuf:"fixed32,2,opt,name=spearman_top_1_bps_percentile,json=spearmanTop1BpsPercentile,proto3" json:"spearman_top_1_bps_percentile,omitempty"`
	KendallTop_1BpsPercentile             float32  `protobuf:"fixed32,3,opt,name=kendall_top_1_bps_percentile,json=kendallTop1BpsPercentile,proto3" json:"kendall_top_1_bps_percentile,omitempty"`
	HoeffdingTop_10BpsPercentile          float32  `protobuf:"fixed32,4,opt,name=hoeffding_top_10_bps_percentile,json=hoeffdingTop10BpsPercentile,proto3" json:"hoeffding_top_10_bps_percentile,omitempty"`
	MutualInformationTop_100BpsPercentile float32  `protobuf:"fixed32,5,opt,name=mutual_information_top_100_bps_percentile,json=mutualInformationTop100BpsPercentile,proto3" json:"mutual_information_top_100_bps_percentile,omitempty"`
	HsicTop_100BpsPercentile              float32  `protobuf:"fixed32,6,opt,name=hsic_top_100_bps_percentile,json=hsicTop100BpsPercentile,proto3" json:"hsic_top_100_bps_percentile,omitempty"`
	XgbimportanceTop_100BpsPercentile     float32  `protobuf:"fixed32,7,opt,name=xgbimportance_top_100_bps_percentile,json=xgbimportanceTop100BpsPercentile,proto3" json:"xgbimportance_top_100_bps_percentile,omitempty"`
	XXX_NoUnkeyedLiteral                  struct{} `json:"-"`
	XXX_unrecognized                      []byte   `json:"-"`
	XXX_sizecache                         int32    `json:"-"`
}

func (m *Percentile) Reset()         { *m = Percentile{} }
func (m *Percentile) String() string { return proto.CompactTextString(m) }
func (*Percentile) ProtoMessage()    {}
func (*Percentile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ddb247232398ef5, []int{8}
}

func (m *Percentile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Percentile.Unmarshal(m, b)
}
func (m *Percentile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Percentile.Marshal(b, m, deterministic)
}
func (m *Percentile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Percentile.Merge(m, src)
}
func (m *Percentile) XXX_Size() int {
	return xxx_messageInfo_Percentile.Size(m)
}
func (m *Percentile) XXX_DiscardUnknown() {
	xxx_messageInfo_Percentile.DiscardUnknown(m)
}

var xxx_messageInfo_Percentile proto.InternalMessageInfo

func (m *Percentile) GetPearsonTop_1BpsPercentile() float32 {
	if m != nil {
		return m.PearsonTop_1BpsPercentile
	}
	return 0
}

func (m *Percentile) GetSpearmanTop_1BpsPercentile() float32 {
	if m != nil {
		return m.SpearmanTop_1BpsPercentile
	}
	return 0
}

func (m *Percentile) GetKendallTop_1BpsPercentile() float32 {
	if m != nil {
		return m.KendallTop_1BpsPercentile
	}
	return 0
}

func (m *Percentile) GetHoeffdingTop_10BpsPercentile() float32 {
	if m != nil {
		return m.HoeffdingTop_10BpsPercentile
	}
	return 0
}

func (m *Percentile) GetMutualInformationTop_100BpsPercentile() float32 {
	if m != nil {
		return m.MutualInformationTop_100BpsPercentile
	}
	return 0
}

func (m *Percentile) GetHsicTop_100BpsPercentile() float32 {
	if m != nil {
		return m.HsicTop_100BpsPercentile
	}
	return 0
}

func (m *Percentile) GetXgbimportanceTop_100BpsPercentile() float32 {
	if m != nil {
		return m.XgbimportanceTop_100BpsPercentile
	}
	return 0
}

func init() {
	proto.RegisterType((*RarenessScoreRequest)(nil), "proto.RarenessScoreRequest")
	proto.RegisterType((*ImageRarenessScoreReply)(nil), "proto.ImageRarenessScoreReply")
	proto.RegisterType((*RarenessScores)(nil), "proto.RarenessScores")
	proto.RegisterType((*InternetRareness)(nil), "proto.InternetRareness")
	proto.RegisterType((*AltNsfwScores)(nil), "proto.AltNsfwScores")
	proto.RegisterType((*PerceptualImageHashes)(nil), "proto.PerceptualImageHashes")
	proto.RegisterType((*FingerprintsStat)(nil), "proto.FingerprintsStat")
	proto.RegisterType((*Maxes)(nil), "proto.Maxes")
	proto.RegisterType((*Percentile)(nil), "proto.Percentile")
}

func init() { proto.RegisterFile("dd-server.proto", fileDescriptor_1ddb247232398ef5) }

var fileDescriptor_1ddb247232398ef5 = []byte{
	// 1375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0x86, 0x64, 0xcb, 0x3f, 0x63, 0xcb, 0x56, 0x18, 0x3b, 0xda, 0xf8, 0x27, 0x51, 0x55, 0xa3,
	0x75, 0xd0, 0x26, 0x8e, 0x9d, 0x9f, 0xa2, 0x45, 0x1a, 0x34, 0x89, 0xe1, 0xc6, 0x40, 0x1c, 0xa5,
	0x6b, 0xa3, 0x01, 0x7a, 0x21, 0xa8, 0x5d, 0xae, 0x44, 0x78, 0xc5, 0x5d, 0x93, 0x5c, 0x5b, 0x7e,
	0x80, 0x9e, 0x7b, 0xea, 0x7b, 0xf4, 0x2d, 0x7a, 0xed, 0x5b, 0xf4, 0x21, 0x7a, 0x29, 0xf8, 0xb3,
	0x92, 0x56, 0x96, 0x0f, 0xf6, 0x69, 0x97, 0x33, 0xdf, 0x7c, 0x43, 0xce, 0x90, 0x33, 0x24, 0x2c,
	0x87, 0xe1, 0x63, 0x49, 0xc5, 0x39, 0x15, 0x4f, 0x52, 0x91, 0xa8, 0x04, 0x55, 0xcc, 0xa7, 0x19,
	0xc1, 0x8a, 0x4f, 0x04, 0xe5, 0x54, 0xca, 0xe3, 0x20, 0x11, 0xd4, 0xa7, 0x67, 0x19, 0x95, 0x0a,
	0x21, 0x98, 0x4e, 0x89, 0xea, 0x7a, 0xa5, 0x46, 0x69, 0x7b, 0xde, 0x37, 0xff, 0x68, 0x13, 0xa0,
	0x1d, 0x27, 0xc1, 0x29, 0xee, 0x12, 0xd9, 0xf5, 0xca, 0x46, 0x33, 0x6f, 0x24, 0xef, 0x89, 0xec,
	0xa2, 0x75, 0x98, 0x4f, 0x89, 0x54, 0x34, 0xc6, 0x2c, 0xf4, 0xa6, 0x8c, 0x76, 0xce, 0x0a, 0x0e,
	0xc3, 0xe6, 0x5f, 0xb3, 0x50, 0x3f, 0xec, 0x91, 0x0e, 0x1d, 0xf3, 0x96, 0xc6, 0x97, 0x68, 0x05,
	0x2a, 0x86, 0xc5, 0x39, 0xb3, 0x03, 0xb4, 0x01, 0xf3, 0xa9, 0x60, 0x3c, 0x60, 0x29, 0x89, 0x73,
	0x67, 0x03, 0x01, 0x7a, 0x03, 0x9b, 0x61, 0x96, 0x52, 0x1c, 0x52, 0x45, 0x03, 0xc5, 0x12, 0x8e,
	0xe5, 0xa5, 0x54, 0xb4, 0x87, 0xcf, 0xa9, 0x90, 0x2c, 0xe1, 0x6e, 0x02, 0x6b, 0x1a, 0xb4, 0x9f,
	0x63, 0x8e, 0x0d, 0xe4, 0x57, 0x8b, 0x40, 0x5b, 0xb0, 0xc4, 0x24, 0x8e, 0xd9, 0x29, 0x8d, 0x2f,
	0xb1, 0xc6, 0x79, 0xd3, 0x8d, 0xd2, 0xf6, 0x9c, 0xbf, 0xc8, 0xe4, 0x07, 0x23, 0xdc, 0xcf, 0x52,
	0x8a, 0x1e, 0xc3, 0x5d, 0x26, 0xb1, 0x20, 0x82, 0xe2, 0x84, 0x63, 0xc6, 0x15, 0x15, 0x9c, 0x2a,
	0xaf, 0x62, 0xa0, 0x35, 0x26, 0xf5, 0x7a, 0x5a, 0xfc, 0xd0, 0xc9, 0xd1, 0x6b, 0x58, 0x16, 0x6e,
	0x85, 0x58, 0xea, 0x25, 0x4a, 0x6f, 0xa6, 0x51, 0xda, 0x5e, 0xd8, 0x5b, 0xb5, 0x71, 0x7f, 0x52,
	0x58, 0xbf, 0xf4, 0x97, 0x44, 0x61, 0x8c, 0xf6, 0xe1, 0x4e, 0xee, 0x03, 0xe7, 0x2a, 0x6f, 0xd6,
	0x30, 0xd4, 0x1d, 0x43, 0xee, 0x2b, 0x67, 0xf2, 0x6b, 0x6c, 0x4c, 0x82, 0xbe, 0x82, 0xe5, 0x24,
	0xa5, 0x1c, 0x73, 0x19, 0x5d, 0xd8, 0x69, 0x78, 0x73, 0x8d, 0xd2, 0x76, 0xd9, 0xaf, 0x6a, 0xf1,
	0x47, 0x19, 0x5d, 0x18, 0x77, 0xe8, 0x03, 0xd4, 0x49, 0xac, 0x6d, 0x89, 0x62, 0xe7, 0x74, 0x04,
	0x2e, 0xbd, 0x79, 0xe3, 0x73, 0xc5, 0xf9, 0x7c, 0x13, 0xab, 0x81, 0x95, 0xf4, 0x57, 0x47, 0x8c,
	0x86, 0x62, 0xf4, 0x19, 0x1e, 0x31, 0x9d, 0x62, 0x1c, 0x31, 0xde, 0xa1, 0x42, 0x27, 0x4b, 0xe1,
	0x24, 0xc2, 0x01, 0xe1, 0x21, 0x0b, 0x89, 0xa2, 0x38, 0x57, 0xc7, 0xd4, 0x83, 0xc6, 0xd4, 0x76,
	0xd9, 0xdf, 0x32, 0x92, 0x83, 0x21, 0xbe, 0x15, 0xbd, 0xcb, 0xd1, 0x87, 0x56, 0x15, 0x53, 0x1d,
	0x94, 0x11, 0x4a, 0x89, 0xa5, 0x22, 0xca, 0x5b, 0x28, 0x04, 0x65, 0x84, 0x42, 0x1e, 0x2b, 0xa2,
	0xfc, 0x5a, 0x34, 0x26, 0x41, 0xaf, 0x61, 0x43, 0x6f, 0xdc, 0x6b, 0x67, 0xb4, 0x68, 0x76, 0x8c,
	0xa7, 0x31, 0x13, 0x67, 0x71, 0x02, 0xf5, 0x94, 0x8a, 0x80, 0xa6, 0x2a, 0x23, 0xb1, 0x33, 0xd4,
	0x60, 0x2a, 0xbd, 0xaa, 0x99, 0xcb, 0x86, 0x9b, 0xcb, 0xa7, 0x01, 0xca, 0x18, 0xbf, 0x37, 0x18,
	0x7f, 0x35, 0x9d, 0x24, 0xd6, 0x1b, 0x79, 0x84, 0xd5, 0x4e, 0xf0, 0x9c, 0x8a, 0x98, 0xa4, 0x38,
	0x48, 0x32, 0xae, 0xbc, 0xa5, 0x46, 0x69, 0xbb, 0xea, 0xaf, 0x0d, 0x41, 0xda, 0xb0, 0x65, 0x21,
	0xef, 0x34, 0x02, 0x35, 0xa1, 0xd2, 0x23, 0x7d, 0x2a, 0xbd, 0x65, 0x33, 0x8d, 0x45, 0x37, 0x8d,
	0x23, 0x2d, 0xf3, 0xad, 0x0a, 0xed, 0x02, 0x18, 0x06, 0xae, 0xf4, 0x52, 0x6b, 0x06, 0x78, 0x67,
	0x74, 0xbe, 0x46, 0xe1, 0x8f, 0x80, 0x9a, 0x7f, 0x96, 0x61, 0xa9, 0xb8, 0x5b, 0xd1, 0x4b, 0xa8,
	0x07, 0x49, 0xaf, 0xcd, 0x38, 0x0d, 0x71, 0x71, 0x9b, 0x9b, 0xb3, 0x5b, 0xf6, 0x57, 0x73, 0x75,
	0xc1, 0x10, 0xfd, 0x0c, 0x8d, 0x7e, 0xa7, 0x9d, 0x24, 0x52, 0xe1, 0x54, 0xd0, 0x90, 0x05, 0xea,
	0x2a, 0x41, 0xd9, 0x10, 0x6c, 0x3a, 0xdc, 0xa7, 0x1c, 0x56, 0x24, 0xfa, 0x11, 0xd6, 0x39, 0xbf,
	0x9e, 0x63, 0xca, 0x70, 0x78, 0x9c, 0x5f, 0x63, 0xfe, 0x0e, 0x1e, 0xe8, 0xe0, 0x92, 0x38, 0xc6,
	0x44, 0x7f, 0x3b, 0x74, 0x9c, 0x61, 0xda, 0x30, 0xac, 0x3b, 0xd4, 0x1b, 0x0b, 0x2a, 0x90, 0x34,
	0xff, 0x2e, 0x41, 0x6d, 0xfc, 0x0c, 0xa2, 0x57, 0xb0, 0xde, 0x23, 0x2a, 0xe8, 0x52, 0x89, 0xa3,
	0x24, 0xe3, 0xa1, 0x2e, 0x16, 0x11, 0x13, 0x7a, 0xc1, 0xa4, 0x63, 0xa3, 0x53, 0xf5, 0xeb, 0x0e,
	0x72, 0xa0, 0x11, 0x2d, 0x7e, 0xa0, 0xf5, 0x9f, 0x48, 0x87, 0xa2, 0x1f, 0x60, 0x8d, 0x67, 0xbd,
	0x36, 0x15, 0x7a, 0x73, 0x6a, 0x03, 0xa9, 0x7f, 0x04, 0x95, 0x59, 0xac, 0xa4, 0x89, 0x4c, 0xd5,
	0xbf, 0x67, 0x11, 0xad, 0x48, 0x5b, 0xc8, 0x56, 0xe4, 0x5b, 0x2d, 0xfa, 0x1e, 0xd6, 0x32, 0x11,
	0x6b, 0xbc, 0xf5, 0x67, 0x7c, 0x60, 0xc6, 0xad, 0x63, 0x5b, 0x06, 0x57, 0x33, 0x11, 0xb7, 0x22,
	0xe3, 0xef, 0x48, 0xab, 0x0f, 0xb9, 0x26, 0x69, 0xfe, 0x5e, 0x82, 0x6a, 0xe1, 0x64, 0xa3, 0x35,
	0x98, 0x0b, 0x05, 0xb9, 0x60, 0xbc, 0x23, 0x5d, 0x46, 0x07, 0x63, 0x74, 0x0f, 0x66, 0xba, 0x94,
	0x2b, 0xc2, 0x5c, 0xaa, 0xdc, 0x08, 0x79, 0x30, 0xcb, 0x69, 0xa6, 0x04, 0x89, 0x5d, 0xfc, 0xf3,
	0xa1, 0x69, 0x22, 0x89, 0xe0, 0x2e, 0xa8, 0xe6, 0x5f, 0xcb, 0x24, 0xed, 0x5f, 0x9a, 0x02, 0x5a,
	0xf6, 0xcd, 0x7f, 0xf3, 0x9f, 0x12, 0xac, 0x4e, 0x3c, 0x34, 0xe8, 0x3e, 0xcc, 0xa5, 0xe1, 0x99,
	0x6d, 0x38, 0xb6, 0x3b, 0xcc, 0xa6, 0xe1, 0x99, 0x69, 0x37, 0x5f, 0xc3, 0xf2, 0xd8, 0xc1, 0x71,
	0x5d, 0x62, 0xa9, 0x78, 0x54, 0xd0, 0x17, 0xb0, 0x98, 0x27, 0xdb, 0xa0, 0x6c, 0x48, 0x16, 0x9c,
	0x2c, 0xe7, 0x0a, 0x59, 0x14, 0x51, 0x41, 0x79, 0xe0, 0x50, 0xd3, 0x96, 0x6b, 0x28, 0xce, 0x81,
	0x9c, 0x66, 0x82, 0xc4, 0xe6, 0xa0, 0x1a, 0x60, 0xc5, 0x02, 0x87, 0x62, 0x0d, 0x6c, 0xfe, 0x5b,
	0x81, 0xda, 0x78, 0x4d, 0x42, 0x5d, 0xd8, 0x1b, 0xa6, 0xb9, 0x50, 0xd1, 0x04, 0x3d, 0xcb, 0x98,
	0x60, 0xbc, 0x83, 0xa3, 0x4c, 0xa8, 0x2e, 0x15, 0x58, 0x51, 0xa9, 0xf4, 0x78, 0xd7, 0xed, 0x9d,
	0x6f, 0xf3, 0xf4, 0x8f, 0xb2, 0xfa, 0xb9, 0xd9, 0x81, 0xb5, 0x3a, 0xb1, 0x46, 0xbb, 0xb7, 0xf2,
	0xb4, 0xe7, 0x36, 0xda, 0x4d, 0x3c, 0xed, 0xdd, 0xca, 0xd3, 0x33, 0x93, 0x83, 0x9b, 0x79, 0x7a,
	0x76, 0x2b, 0x4f, 0xcf, 0x4d, 0x1e, 0x6f, 0xe6, 0xe9, 0xf9, 0xad, 0x3c, 0xbd, 0x30, 0x1b, 0xe1,
	0x66, 0x9e, 0x5e, 0xdc, 0xca, 0xd3, 0x4b, 0x73, 0xa3, 0xb8, 0x99, 0xa7, 0x97, 0xba, 0x39, 0x5f,
	0xe3, 0x29, 0x89, 0xb0, 0xcc, 0x64, 0x4a, 0x4d, 0x41, 0xd5, 0xf7, 0x20, 0x7b, 0xe1, 0xa8, 0xfa,
	0x5b, 0x93, 0x1c, 0xb4, 0xa2, 0xe3, 0x1c, 0xac, 0xef, 0x47, 0xb2, 0xf9, 0x47, 0x19, 0x2a, 0xa6,
	0xd5, 0xa0, 0x87, 0xb0, 0x90, 0x52, 0x22, 0x64, 0xc2, 0x71, 0x8f, 0xf4, 0x5d, 0xfd, 0x00, 0x27,
	0x3a, 0x22, 0x7d, 0x7d, 0x12, 0xa5, 0x1e, 0xf6, 0x88, 0x45, 0xd8, 0x3a, 0xb2, 0x90, 0xcb, 0x34,
	0xe4, 0x21, 0x2c, 0x9c, 0x52, 0x1e, 0xea, 0x0a, 0xad, 0x11, 0xb6, 0xa0, 0x80, 0x13, 0x69, 0xc0,
	0x97, 0x50, 0xed, 0x26, 0x34, 0x8a, 0x42, 0x1d, 0x0a, 0x0d, 0xb1, 0xc5, 0x65, 0x71, 0x20, 0xd4,
	0xa0, 0xe7, 0x70, 0xaf, 0x97, 0xd9, 0x36, 0xcd, 0xa3, 0x44, 0xf4, 0x88, 0xb9, 0x21, 0x6a, 0xb4,
	0x2d, 0x3b, 0x2b, 0x56, 0x7b, 0x38, 0x54, 0x6a, 0xab, 0xfb, 0x30, 0xd7, 0x95, 0x2c, 0x30, 0xb8,
	0x19, 0x5b, 0xc9, 0xf4, 0x58, 0xab, 0xbe, 0x81, 0x3b, 0xfd, 0x4e, 0x9b, 0xf5, 0xd2, 0x44, 0x28,
	0xa2, 0x6b, 0x84, 0xc6, 0xcc, 0x1a, 0x4c, 0xad, 0xa0, 0x38, 0x22, 0xfd, 0xe6, 0x7f, 0x53, 0x00,
	0xc3, 0x9e, 0xaa, 0xef, 0x1d, 0x79, 0x58, 0x54, 0x92, 0xe2, 0x5d, 0xdc, 0x4e, 0x25, 0x1e, 0x69,
	0xc6, 0x36, 0x4e, 0x9e, 0xc3, 0x9c, 0x24, 0xe9, 0xee, 0xdb, 0x54, 0x8e, 0xd8, 0xff, 0x04, 0x9b,
	0x83, 0xa8, 0x4d, 0x24, 0xb0, 0x61, 0xbc, 0x9f, 0x83, 0xae, 0x32, 0xbc, 0x86, 0x8d, 0x3c, 0xa8,
	0x13, 0x09, 0x5c, 0xdb, 0x74, 0x98, 0xab, 0xf6, 0xfb, 0xf0, 0x70, 0x18, 0x73, 0xc3, 0xf0, 0x74,
	0x9c, 0xc2, 0xf5, 0xcd, 0x01, 0x4c, 0x93, 0x3c, 0x2d, 0xb2, 0x7c, 0x86, 0x47, 0x13, 0x92, 0x62,
	0xe9, 0xae, 0xf0, 0xd9, 0x3c, 0x6d, 0x5d, 0xc9, 0x93, 0xe1, 0x1d, 0x23, 0x7e, 0x05, 0xeb, 0x26,
	0x6f, 0xd7, 0x50, 0xd9, 0x54, 0xd6, 0x35, 0x64, 0x92, 0xf5, 0x47, 0xd8, 0x2a, 0xa6, 0xf6, 0x1a,
	0x1a, 0x9b, 0xed, 0x46, 0x01, 0x3b, 0x81, 0x6f, 0xaf, 0x0b, 0x77, 0xf7, 0x0b, 0x8f, 0x0e, 0xf3,
	0xea, 0x42, 0xbf, 0x00, 0xba, 0xfa, 0xfe, 0x41, 0xeb, 0x93, 0x5e, 0x05, 0xee, 0x0d, 0xb6, 0xf6,
	0x20, 0xbf, 0xf0, 0x4f, 0x7e, 0x37, 0xbd, 0xfd, 0xee, 0xb7, 0x17, 0x1d, 0xa6, 0xba, 0x59, 0xfb,
	0x49, 0x90, 0xf4, 0x76, 0xec, 0x53, 0x8b, 0x53, 0x75, 0x91, 0x88, 0xd3, 0x9d, 0x4e, 0xc2, 0x93,
	0x90, 0xee, 0x44, 0xe4, 0x94, 0xca, 0x9d, 0xc1, 0xdb, 0x6f, 0xc7, 0x10, 0xb6, 0x67, 0xcc, 0xe7,
	0xd9, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x7a, 0x26, 0x79, 0x15, 0x0e, 0x00, 0x00,
}
