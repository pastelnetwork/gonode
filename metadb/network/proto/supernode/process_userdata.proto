syntax = "proto3";

option go_package = "github.com/pastelnetwork/gonode/metadb/network/proto/supernode";

package supernode;

service ProcessUserdata {
    // Session informs primary supernode about its `nodeID` and `sessID` it wants to connect to.
    // The stream is used by the parties to inform each other about the cancellation of the task.
    rpc Session(stream SessionRequest) returns (stream SessionReply);

	// SendUserdataToPrimary send signed userdata from other supernodes to primary supernode
    rpc SendUserdataToPrimary(SuperNodeRequest) returns (SuperNodeReply);
}

message SessionRequest {
    string nodeID = 1;
}
message SessionReply {
    string sessID = 1;
}

message SuperNodeRequest {
	// UserdataHash represents UserdataProcessRequest's hash value, to make sure UserdataProcessRequest's integrity 
	string userdata_hash							= 1;
    // UserdataResultHash represents UserdataReply's hash value, to make sure walletnode's UserdataReply integrity
	string userdata_result_hash 					= 2;
	// SuperNodeSignature is the digital signature created by supernode for the [userdata_hash+userdata_result_hash]
	string hash_signature							= 3;
	// Supernode's pastelID of this supernode generate this SuperNodeRequest
	string supernode_pastelID						= 4;
	// Supernode's nodeID that init this SuperNodeRequest
	string nodeID									= 5;
}

message SuperNodeReply {
    // Result of the request is success or not
	int32 response_code    = 1;
	// The detail of why result is success/fail, depend on response_code
	string detail          = 2;
}
